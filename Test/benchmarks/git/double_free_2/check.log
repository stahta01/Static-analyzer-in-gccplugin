../Compiler/newplugin.so 11.2.0 
In file included from ./benchmarks/git/double_free_2/git_df_2.c:11:
./benchmarks/git/double_free_2/../git.h: In function ‘copy_array’:
./benchmarks/git/double_free_2/../git.h:161:17: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/double_free_2/../git.h:1:1: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  +++ |+#include <string.h>
    1 | #define STRING_LIST_INIT_NODUP { NULL, 0, 0, 0, NULL }
./benchmarks/git/double_free_2/../git.h:161:17: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/double_free_2/../git.h:161:17: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_2/../git.h:161:34: warning: implicit declaration of function ‘st_mult’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                                  ^~~~~~~
./benchmarks/git/double_free_2/../git.h: In function ‘move_array’:
./benchmarks/git/double_free_2/../git.h:169:17: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
  169 |                 memmove(dst, src, st_mult(size, n));
      |                 ^~~~~~~
./benchmarks/git/double_free_2/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
./benchmarks/git/double_free_2/../git.h:169:17: warning: incompatible implicit declaration of built-in function ‘memmove’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_2/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
In file included from ./benchmarks/git/double_free_2/git_df_2.c:10:
./benchmarks/git/double_free_2/../git.h: In function ‘xstrdup_or_null’:
./benchmarks/git/double_free_2/../stdio.h:138:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_2/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
./benchmarks/git/double_free_2/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/double_free_2/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
In file included from ./benchmarks/git/double_free_2/git_df_2.c:11:
./benchmarks/git/double_free_2/../git.h: At top level:
./benchmarks/git/double_free_2/../git.h:236:62: warning: ‘struct archiver_args’ declared inside parameter list will not be visible outside of this definition or declaration
  236 |         int (*write_archive)(const struct archiver *, struct archiver_args *);
      |                                                              ^~~~~~~~~~~~~
./benchmarks/git/double_free_2/../git.h: In function ‘strbuf_swap’:
./benchmarks/git/double_free_2/../git.h:126:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/double_free_2/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/double_free_2/../git.h:126:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/double_free_2/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/double_free_2/git_df_2.c: In function ‘strbuf_release’:
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: implicit declaration of function ‘memset’ [-Wimplicit-function-declaration]
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^~~~~~
./benchmarks/git/double_free_2/git_df_2.c:12:1: note: include ‘<string.h>’ or provide a declaration of ‘memset’
   11 | #include "../git.h"
  +++ |+#include <string.h>
   12 | 
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: incompatible implicit declaration of built-in function ‘memset’ [-Wbuiltin-declaration-mismatch]
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^~~~~~
./benchmarks/git/double_free_2/git_df_2.c:16:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
In file included from ./benchmarks/git/double_free_2/git_df_2.c:11:
./benchmarks/git/double_free_2/git_df_2.c: In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:112:29: warning: implicit declaration of function ‘alloc_nr’; did you mean ‘alloca’? [-Wimplicit-function-declaration]
  112 |                         if (alloc_nr(alloc) < (nr)) \
      |                             ^~~~~~~~
./benchmarks/git/double_free_2/git_df_2.c:23:9: note: in expansion of macro ‘ALLOC_GROW’
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^~~~~~~~~~
./benchmarks/git/double_free_2/git_df_2.c: In function ‘strbuf_reset’:
./benchmarks/git/double_free_2/git_df_2.c:29:17: warning: implicit declaration of function ‘strbuf_setlen’; did you mean ‘strbuf_reset’? [-Wimplicit-function-declaration]
   29 |                 strbuf_setlen(sb, 0);
      |                 ^~~~~~~~~~~~~
      |                 strbuf_reset
./benchmarks/git/double_free_2/git_df_2.c: In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^~~~~~
./benchmarks/git/double_free_2/git_df_2.c:35:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_2/git_df_2.c: In function ‘strtoul’:
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: assignment discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
   62 |     *endptr = str + base;
      |             ^
./benchmarks/git/double_free_2/git_df_2.c: In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:87:23: warning: implicit declaration of function ‘strcspn’ [-Wimplicit-function-declaration]
   87 |                 len = strcspn(quoted, "\"\\");
      |                       ^~~~~~~
./benchmarks/git/double_free_2/git_df_2.c:87:23: note: include ‘<string.h>’ or provide a declaration of ‘strcspn’
./benchmarks/git/double_free_2/git_df_2.c:87:23: warning: incompatible implicit declaration of built-in function ‘strcspn’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_2/git_df_2.c:87:23: note: include ‘<string.h>’ or provide a declaration of ‘strcspn’
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: implicit declaration of function ‘strbuf_addch’; did you mean ‘strbuf_add’? [-Wimplicit-function-declaration]
  128 |                 strbuf_addch(sb, ch);
      |                 ^~~~~~~~~~~~
      |                 strbuf_add
./benchmarks/git/double_free_2/git_df_2.c: In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:141:9: warning: implicit declaration of function ‘strbuf_init’ [-Wimplicit-function-declaration]
  141 |         strbuf_init(&buf, 0);
      |         ^~~~~~~~~~~
./benchmarks/git/double_free_2/git_df_2.c:174:23: warning: implicit declaration of function ‘strchr’ [-Wimplicit-function-declaration]
  174 |                 tab = strchr(ptr, '\t');
      |                       ^~~~~~
./benchmarks/git/double_free_2/git_df_2.c:174:23: note: include ‘<string.h>’ or provide a declaration of ‘strchr’
./benchmarks/git/double_free_2/git_df_2.c:174:23: warning: incompatible implicit declaration of built-in function ‘strchr’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/double_free_2/git_df_2.c:174:23: note: include ‘<string.h>’ or provide a declaration of ‘strchr’
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: implicit declaration of function ‘get_sha1_hex’ [-Wimplicit-function-declaration]
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                     ^~~~~~~~~~~~
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: implicit declaration of function ‘verify_path’ [-Wimplicit-function-declaration]
  200 |                 if (!verify_path(path_name)) {
      |                      ^~~~~~~~~~~
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: implicit declaration of function ‘remove_file_from_cache’ [-Wimplicit-function-declaration]
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^~~~~~~~~~~~~~~~~~~~~~
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: implicit declaration of function ‘add_cacheinfo’ [-Wimplicit-function-declaration]
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^~~~~~~~~~~~~

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  1298k ( 47%)
 phase parsing                      :   0.03 ( 60%)   0.00 (  0%)   0.04 ( 80%)  1126k ( 41%)
 phase opt and generate             :   0.02 ( 40%)   0.01 (100%)   0.01 ( 20%)   304k ( 11%)
 callgraph optimization             :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)     0  (  0%)
 callgraph ipa passes               :   0.01 ( 20%)   0.00 (  0%)   0.01 ( 20%)   161k (  6%)
 lto stream compression             :   0.01 ( 20%)   0.00 (  0%)   0.00 (  0%)     0  (  0%)
 preprocessing                      :   0.01 ( 20%)   0.00 (  0%)   0.02 ( 40%)   342k ( 13%)
 lexical analysis                   :   0.02 ( 40%)   0.00 (  0%)   0.01 ( 20%)     0  (  0%)
 parser function body               :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)   106k (  4%)
 tree gimplify                      :   0.01 ( 20%)   0.01 (100%)   0.00 (  0%)    85k (  3%)
 TOTAL                              :   0.05          0.01          0.05         2739k
../Compiler/newplugin.so 11.2.0 

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 (100%)  2157k ( 96%)
 TOTAL                              :   0.00          0.00          0.01         2235k
../Compiler/newplugin.so 11.2.0 
=======ipa_pta=========
=============== The first stage : Point of interest stmt collect =================
=======node_fun:main=========
addr_expraddr_expraddr_expraddr_expraddr_expr------read_index_info--
=======node_fun:read_index_info=========
node:= 2 
 	next_branch :=36
addr_expraddr_expraddr_expraddr_expraddr_expr------strbuf_init--
addr_expraddr_expraddr_expraddr_expraddr_expr------strbuf_init--
node:= 3 
 	next_branch :=7
	next_branch :=4
addr_expraddr_expraddr_expraddr_expraddr_expr------__errno_location--
addr_expraddr_expraddr_expraddr_expraddr_expr------strtoul--
node:= 4 
 	next_branch :=7
	next_branch :=5
node:= 5 
 	next_branch :=7
	next_branch :=6
addr_expraddr_expraddr_expraddr_expraddr_expr------__errno_location--
node:= 6 
 	next_branch :=7
	next_branch :=8
node:= 7 
 	next_branch :=34
node:= 8 
 	next_branch :=10
	next_branch :=9
addr_expraddr_expraddr_expraddr_expraddr_expr------strchr--
node:= 9 
 	next_branch :=10
	next_branch :=11
node:= 10 
 	next_branch :=34
node:= 11 
 	next_branch :=12
	next_branch :=15
node:= 12 
 	next_branch :=13
	next_branch :=15
node:= 13 
 	next_branch :=14
	next_branch :=15
node:= 14 
 	next_branch :=16
node:= 15 
 	next_branch :=16
node:= 16 
 	next_branch :=18
	next_branch :=17
addr_expraddr_expraddr_expraddr_expraddr_expr------get_sha1_hex--
node:= 17 
 	next_branch :=18
	next_branch :=19
node:= 18 
 	next_branch :=34
node:= 19 
 	next_branch :=20
	next_branch :=24
node:= 20 
 	next_branch :=21
	next_branch :=24
node:= 21 
 	next_branch :=22
	next_branch :=23
addr_expraddr_expraddr_expraddr_expraddr_expr------strbuf_reset--
addr_expraddr_expraddr_expraddr_expraddr_expr------unquote_c_style--
node:= 22 
 addr_expraddr_expraddr_expraddr_expraddr_expr------exit--
node:= 23 
 	next_branch :=24
node:= 24 
 	next_branch :=25
	next_branch :=26
addr_expraddr_expraddr_expraddr_expraddr_expr------verify_path--
node:= 25 
 	next_branch :=35
addr_expraddr_expraddr_expraddr_expraddr_expr------fprintf--
node:= 26 
 	next_branch :=27
	next_branch :=29
node:= 27 
 	next_branch :=28
	next_branch :=31
addr_expraddr_expraddr_expraddr_expraddr_expr------remove_file_from_cache--
node:= 28 
 addr_expraddr_expraddr_expraddr_expraddr_expr------exit--
node:= 29 
 	next_branch :=30
	next_branch :=31
addr_expraddr_expraddr_expraddr_expraddr_expr------add_cacheinfo--
node:= 30 
 addr_expraddr_expraddr_expraddr_expraddr_expr------exit--
node:= 31 
 	next_branch :=32
	next_branch :=33
node:= 32 
 	next_branch :=33
node:= 33 
 	next_branch :=35
node:= 34 
 addr_expraddr_expraddr_expraddr_expraddr_expr------exit--
node:= 35 
 	next_branch :=36
node:= 36 
 	next_branch :=3
	next_branch :=37
addr_expraddr_expraddr_expraddr_expraddr_expr------strbuf_getline--
addr_expraddr_expraddr_expraddr_expraddr_expr------strbuf_release--
addr_expraddr_expraddr_expraddr_expraddr_expr------strbuf_release--
=======node_fun:unquote_c_style=========
node:= 2 
 	next_branch :=25
	next_branch :=3
node:= 3 
 	next_branch :=6
	next_branch :=4
	next_branch :=7
addr_expraddr_expraddr_expraddr_expraddr_expr------strcspn--
addr_expraddr_expraddr_expraddr_expraddr_expr------strbuf_add--
node:= 4 
 	next_branch :=5
	next_branch :=25
node:= 5 
 	next_branch :=25
node:= 6 
 	next_branch :=24
node:= 7 
 	next_branch :=22
	next_branch :=23
	next_branch :=15
	next_branch :=8
	next_branch :=9
	next_branch :=10
	next_branch :=11
	next_branch :=12
	next_branch :=13
	next_branch :=14
node:= 8 
 	next_branch :=23
node:= 9 
 	next_branch :=23
node:= 10 
 	next_branch :=23
node:= 11 
 	next_branch :=23
node:= 12 
 	next_branch :=23
node:= 13 
 	next_branch :=23
node:= 14 
 	next_branch :=23
node:= 15 
 	next_branch :=17
	next_branch :=16
node:= 16 
 	next_branch :=17
	next_branch :=18
node:= 17 
 	next_branch :=24
node:= 18 
 	next_branch :=20
	next_branch :=19
node:= 19 
 	next_branch :=20
	next_branch :=21
node:= 20 
 	next_branch :=24
node:= 21 
 	next_branch :=23
node:= 22 
 	next_branch :=24
node:= 23 
 	next_branch :=3
addr_expraddr_expraddr_expraddr_expraddr_expr------strbuf_addch--
node:= 24 
 	next_branch :=25
addr_expraddr_expraddr_expraddr_expraddr_expr------strbuf_setlen--
=======node_fun:strtoul=========
=======node_fun:strbuf_getline=========
node:= 2 
 	next_branch :=10
	next_branch :=3
addr_expraddr_expraddr_expraddr_expraddr_expr------strbuf_grow--
addr_expraddr_expraddr_expraddr_expraddr_expr------feof--
node:= 3 
 	next_branch :=6
addr_expraddr_expraddr_expraddr_expraddr_expr------strbuf_reset--
node:= 4 
 	next_branch :=7
	next_branch :=5
node:= 5 
 	next_branch :=6
addr_expraddr_expraddr_expraddr_expraddr_expr------strbuf_grow--
node:= 6 
 	next_branch :=4
	next_branch :=7
addr_expraddr_expraddr_expraddr_expraddr_expr------fgetc--
node:= 7 
 	next_branch :=8
	next_branch :=9
node:= 8 
 	next_branch :=10
	next_branch :=9
node:= 9 
 	next_branch :=10
=======node_fun:strbuf_add=========
addr_expraddr_expraddr_expraddr_expraddr_expr------strbuf_grow--
addr_expraddr_expraddr_expraddr_expraddr_expr------memcpy--
addr_expraddr_expraddr_expraddr_expraddr_expr------strbuf_setlen--
=======node_fun:strbuf_reset=========
node:= 2 
 	next_branch :=3
	next_branch :=4
node:= 3 
 	next_branch :=4
addr_expraddr_expraddr_expraddr_expraddr_expr------strbuf_setlen--
=======node_fun:strbuf_grow=========
node:= 2 
 	next_branch :=3
	next_branch :=4
node:= 3 
 addr_expraddr_expraddr_expraddr_expraddr_expr------exit--
node:= 4 
 	next_branch :=5
	next_branch :=9
node:= 5 
 	next_branch :=6
	next_branch :=7
addr_expraddr_expraddr_expraddr_expraddr_expr------alloc_nr--
node:= 6 
 	next_branch :=8
node:= 7 
 	next_branch :=8
addr_expraddr_expraddr_expraddr_expraddr_expr------alloc_nr--
node:= 8 
 	next_branch :=9
addr_expraddr_expraddr_expraddr_expraddr_expr------st_mult--
addr_expraddr_expraddr_expraddr_expraddr_expr------xrealloc--
=======node_fun:strbuf_release=========
addr_expraddr_expraddr_expraddr_expraddr_expr------memset--
=======node_fun:xrealloc=========
node:= 2 
 	next_branch :=3
	next_branch :=4
node:= 3 
 	next_branch :=4
node:= 4 
 	next_branch :=5
	next_branch :=9
node:= 5 
 	next_branch :=6
	next_branch :=7
node:= 6 
 	next_branch :=7
node:= 7 
 	next_branch :=8
	next_branch :=9
node:= 8 
 addr_expraddr_expraddr_expraddr_expraddr_expr------exit--
=============== The first stage :  record fucntion =================
start PointerConstraint
ptable point 59 
===============The second stage : Mapping stmt=================
# .MEM_4 = VDEF <.MEM_3(D)>
read_index_info (line_2(D));
# .MEM_78 = VDEF <.MEM_77(D)>
strbuf_init (&buf, 0);
# .MEM_79 = VDEF <.MEM_78>
strbuf_init (&uq, 0);
_1 = __errno_location ();
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
_7 = __errno_location ();
# VUSE <.MEM_86>
tab_59 = strchr (_9, 9);
# .MEM_89 = VDEF <.MEM_70>
_20 = get_sha1_hex (_19, &sha1);
# .MEM_90 = VDEF <.MEM_89>
strbuf_reset (&uq);
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
# .MEM_100 = VDEF <.MEM_94>
_26 = remove_file_from_cache (path_name_37);
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
# .MEM_81 = VDEF <.MEM_80>
strbuf_release (&buf);
# .MEM_82 = VDEF <.MEM_81>
strbuf_release (&uq);
# VUSE <.MEM_35>
len_22 = strcspn (quoted_11, "\"\\");
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
# .MEM_30 = VDEF <.MEM_29>
strbuf_grow (sb_15(D), 1);
# .MEM_29 = VDEF <.MEM_23>
ch_21 = fgetc (fp_17(D));
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
# .MEM_38 = VDEF <.MEM_31>
_22 = st_mult (1, _21);
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
===============The second stage : Program slicing=================
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
=============== *this point analyzable =================
read_index_info (line_2(D));
========================================================
------------------VAR_DECL : LHS2------------------
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
strbuf_init (&buf, 0);
========================================================
------------------VAR_DECL : LHS2------------------
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
strbuf_init (&uq, 0);
========================================================
=============== *this point analyzable =================
_1 = __errno_location ();
========================================================
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>
=============== *this point analyzable =================
ul_57 = strtoul (_2, &ptr, 8);
========================================================
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
ul_57 = strtoul (_2, &ptr, 8);
========================================================
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>
=============== *this point analyzable =================
ul_57 = strtoul (_2, &ptr, 8);
========================================================
=============== *this point analyzable =================
_7 = __errno_location ();
========================================================
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>
=============== *this point analyzable =================
tab_59 = strchr (_9, 9);
========================================================
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>
=============== *this point analyzable =================
tab_59 = strchr (_9, 9);
========================================================
=============== *this point analyzable =================
_20 = get_sha1_hex (_19, &sha1);
========================================================
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
_20 = get_sha1_hex (_19, &sha1);
========================================================
=============== *this point analyzable =================
_20 = get_sha1_hex (_19, &sha1);
========================================================
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>
=============== *this point analyzable =================
_23 = unquote_c_style (&uq, path_name_66, 0B);
========================================================
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>
=============== *this point analyzable =================
_23 = unquote_c_style (&uq, path_name_66, 0B);
========================================================
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>
=============== *this point analyzable =================
_24 = verify_path (path_name_37);
========================================================
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>
=============== *this point analyzable =================
_24 = verify_path (path_name_37);
========================================================
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>
=============== *this point analyzable =================
fprintf (_25, "Ignoring path %s\n", path_name_37);
========================================================
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
fprintf (_25, "Ignoring path %s\n", path_name_37);
========================================================
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>
=============== *this point analyzable =================
_26 = remove_file_from_cache (path_name_37);
========================================================
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>
=============== *this point analyzable =================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
========================================================
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>
=============== *this point analyzable =================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
========================================================
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>
=============== *this point analyzable =================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
========================================================
=============== *this point analyzable =================
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
========================================================
=============== *this point analyzable =================
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
========================================================
=============== *this point analyzable =================
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
========================================================
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
=============== *this point analyzable =================
len_22 = strcspn (quoted_11, "\"\\");
========================================================
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
len_22 = strcspn (quoted_11, "\"\\");
========================================================
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
=============== *this point analyzable =================
len_22 = strcspn (quoted_11, "\"\\");
========================================================
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
=============== *this point analyzable =================
strbuf_add (sb_18(D), quoted_11, len_22);
========================================================
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
=============== *this point analyzable =================
strbuf_addch (sb_18(D), ch_13);
========================================================
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
=============== *this point analyzable =================
strbuf_setlen (sb_18(D), oldlen_19);
========================================================
=============== *this point analyzable =================
strbuf_grow (sb_15(D), 0);
========================================================
=============== *this point analyzable =================
_1 = feof (fp_17(D));
========================================================
=============== *this point analyzable =================
_1 = feof (fp_17(D));
========================================================
=============== *this point analyzable =================
ch_21 = fgetc (fp_17(D));
========================================================
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
=============== *this point analyzable =================
strbuf_grow (sb_7(D), len_8(D));
========================================================
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
=============== *this point analyzable =================
strbuf_grow (sb_7(D), len_8(D));
========================================================
 <ssa_name 0x7fd97dd3d480
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fd97dd25eb8>
=============== *this point analyzable =================
memcpy (_3, data_10(D), len_8(D));
========================================================
 <ssa_name 0x7fd97dd3d480
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fd97dd25eb8>
=============== *this point analyzable =================
memcpy (_3, data_10(D), len_8(D));
========================================================
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
=============== *this point analyzable =================
strbuf_setlen (sb_7(D), _5);
========================================================
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>
=============== *this point analyzable =================
strbuf_setlen (sb_4(D), 0);
========================================================
=============== *this point analyzable =================
_10 = alloc_nr (_9);
========================================================
=============== *this point analyzable =================
_10 = alloc_nr (_9);
========================================================
=============== *this point analyzable =================
_19 = alloc_nr (_18);
========================================================
=============== *this point analyzable =================
_19 = alloc_nr (_18);
========================================================
=============== *this point analyzable =================
_22 = st_mult (1, _21);
========================================================
=============== *this point analyzable =================
_22 = st_mult (1, _21);
========================================================
=============== *this point analyzable =================
_25 = xrealloc (_24, _23);
========================================================
=============== *this point analyzable =================
_25 = xrealloc (_24, _23);
========================================================
=============== *this point analyzable =================
_25 = xrealloc (_24, _23);
========================================================
 <ssa_name 0x7fd97dd46438
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fd97dd25f78>
=============== *this point analyzable =================
memset (sb_3(D), 0, 24);
========================================================
=============== *this point analyzable =================
ret_17 = realloc (ptr_14(D), size_15(D));
========================================================
=============== *this point analyzable =================
ret_19 = realloc (ptr_14(D), 1);
========================================================
=============== *this point analyzable =================
ret_21 = realloc (ptr_14(D), size_15(D));
========================================================
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

=============== The third stage : Start detection  =================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:read_index_info========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path read_index_info  function_call count: 16 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_release========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_release  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;33m =======POP node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:strbuf_release========= [0m
[40;42m =======start_check_funciton:strbuf_release========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46438
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fd97dd25f78>
 <ssa_name 0x7fd97dd46438
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fd97dd25f78>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd46438
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fd97dd25f78>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
memset (sb_3(D), 0, 24);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: use location
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^
this stmt call this function :memset
trace fucntion name:memset 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_3(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
   15 |     free(sb->buf);
      |            ^
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
this stmt call this function :free

 ================== find free stmt ================== 
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46438
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fd97dd25f78>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location

 ================== Start Use after free Check ================== 

============================================================
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: free in this location

===== possiable asias =====
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: use location
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: free in this location
   15 |     free(sb->buf);
      |     ^

===== possiable asias =====
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: use location
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================
[40;33m =======POP node_fun stack:strbuf_release========= [0m
[40;42m =======pre add _ fucntion:strbuf_getline========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_getline  function_call count: 4 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;33m =======POP node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_grow  function_call count: 5 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :4========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46948
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fd97dd04a80>
 <ssa_name 0x7fd97dd46948
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fd97dd04a80>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:strbuf_grow========= [0m
[40;42m =======start_check_funciton:strbuf_grow========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
if (_11 < _14)
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_nr 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>
is Other function alloc_nr
 
 Start check Pointer Collect  

======================================================================
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
if (_11 < _14)
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:2 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================

 Expand conflict 
 The same function may have multiple branches :alloc_nr
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_nr 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
is Other function alloc_nr
 
 Start check Pointer Collect  

======================================================================
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:2 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================

 Expand conflict 
 The same function may have multiple branches :alloc_nr
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_38 = VDEF <.MEM_31>
_22 = st_mult (1, _21);
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>

 ================== pre trace ptable ================== 
trace fucntion name:st_mult 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
is Other function st_mult
 
 Start check Pointer Collect  

======================================================================
# .MEM_38 = VDEF <.MEM_31>
_22 = st_mult (1, _21);
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>

 ================== pre trace ptable ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# .MEM_33 = VDEF <.MEM_32>
exit (1);
./benchmarks/git/double_free_2/../git.h:422:25: warning: use location
  422 |                         die("Out of memory, realloc failed%s", "");
      |                         ^
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
is Other function xrealloc
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;31m    this function with other function alias that other function return value is heap-object [0m
[40;31m  	possible double free :4 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:strbuf_grow========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_reset  function_call count: 1 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre_check_funciton:strbuf_reset========= [0m
[40;42m =======start_check_funciton:strbuf_reset========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
strbuf_setlen (sb_4(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:29:17: warning: use location
   29 |                 strbuf_setlen(sb, 0);
      |                 ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_4(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:28:15: warning: use location
   28 |         if (sb->len)
      |               ^
if (_1 != 0)
./benchmarks/git/double_free_2/git_df_2.c:28:12: warning: use location
   28 |         if (sb->len)
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_reset========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;33m =======POP node_fun stack:feof========= [0m
[40;42m =======pre_check_funciton:strbuf_getline========= [0m
[40;42m =======start_check_funciton:strbuf_getline========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
is Other function 
 
 Start check Pointer Collect  

======================================================================
_9 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:56:19: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                   ^
_10 = _8 + _9;
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^
*_10 = 0;
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^
_8 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^
_7 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:53:28: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                            ^
if (_7 == 0)
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_3 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:51:27: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                           ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :strbuf_grow
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: use location
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_30 = VDEF <.MEM_29>
strbuf_grow (sb_15(D), 1);
./benchmarks/git/double_free_2/git_df_2.c:50:17: warning: use location
   50 |                 strbuf_grow(sb, 1);
      |                 ^
strbuf_reset (sb_15(D));
./benchmarks/git/double_free_2/git_df_2.c:46:9: warning: use location
   46 |         strbuf_reset(sb);
      |         ^
this stmt call this function :strbuf_reset
trace fucntion name:strbuf_reset 
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
[40;36m ======= node_fun:strbuf_reset========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: use location
   42 |         strbuf_grow(sb, 0);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: use location
   42 |         strbuf_grow(sb, 0);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:56:19: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:56:19: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
_10 = _8 + _9;
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
_10 = _8 + _9;
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:53:28: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:53:28: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
if (_7 == 0)
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
if (_7 == 0)
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_30>
_3 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:51:27: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_30>
_3 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:51:27: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_30>
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_30>
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
./benchmarks/git/double_free_2/git_df_2.c:46:9: warning: use location
   46 |         strbuf_reset(sb);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
./benchmarks/git/double_free_2/git_df_2.c:46:9: warning: use location
   46 |         strbuf_reset(sb);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d000
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
    var <parm_decl 0x7fd97dd1fd80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fd97dd25e88>
 <ssa_name 0x7fd97dd3d000
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
    var <parm_decl 0x7fd97dd1fd80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fd97dd25e88>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d000
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
    var <parm_decl 0x7fd97dd1fd80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fd97dd25e88>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_21 = fgetc (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:47:22: warning: use location
   47 |         while ((ch = fgetc(fp)) != EOF) {
      |                      ^
this stmt call this function :fgetc
trace fucntion name:fgetc 

 ================== trace ================== 
trace fucntion free:0 
if (ch_21 == -1)
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = (char) ch_21;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_21 == term_22(D))
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
   48 |                 if (ch == term)
      |                    ^
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
_1 = feof (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:43:13: warning: use location
   43 |         if (feof(fp))
      |             ^
this stmt call this function :feof
trace fucntion name:feof 

 ================== trace ================== 
trace fucntion free:0 
if (_1 != 0)
./benchmarks/git/double_free_2/git_df_2.c:43:12: warning: use location
   43 |         if (feof(fp))
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d000
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
    var <parm_decl 0x7fd97dd1fd80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fd97dd25e88>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd37cf0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _1 = feof (fp_17(D));
    version:1>
 <ssa_name 0x7fd97dd37cf0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _1 = feof (fp_17(D));
    version:1>

 ================== pre trace ptable ================== 
trace fucntion name:feof 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd37cf0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _1 = feof (fp_17(D));
    version:1>
is Other function feof
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_21 = fgetc (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:47:22: warning: use location
   47 |         while ((ch = fgetc(fp)) != EOF) {
      |                      ^
this stmt call this function :fgetc
trace fucntion name:fgetc 

 ================== trace ================== 
trace fucntion free:0 
if (ch_21 == -1)
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = (char) ch_21;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_21 == term_22(D))
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
   48 |                 if (ch == term)
      |                    ^
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
_1 = feof (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:43:13: warning: use location
   43 |         if (feof(fp))
      |             ^
this stmt call this function :feof
trace fucntion name:feof 

 ================== trace ================== 
trace fucntion free:0 
if (_1 != 0)
./benchmarks/git/double_free_2/git_df_2.c:43:12: warning: use location
   43 |         if (feof(fp))
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd37cf0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _1 = feof (fp_17(D));
    version:1>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d048
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35630 ch>
    def_stmt ch_21 = fgetc (fp_17(D));
    version:21>
 <ssa_name 0x7fd97dd3d048
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35630 ch>
    def_stmt ch_21 = fgetc (fp_17(D));
    version:21>

 ================== pre trace ptable ================== 
trace fucntion name:fgetc 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d048
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35630 ch>
    def_stmt ch_21 = fgetc (fp_17(D));
    version:21>
is Other function fgetc
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_29 = VDEF <.MEM_23>
ch_21 = fgetc (fp_17(D));
ch_21 = fgetc (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:47:22: warning: use location
   47 |         while ((ch = fgetc(fp)) != EOF) {
      |                      ^
this stmt call this function :fgetc
trace fucntion name:fgetc 

 ================== trace ================== 
trace fucntion free:0 
if (ch_21 == -1)
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = (char) ch_21;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_21 == term_22(D))
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
   48 |                 if (ch == term)
      |                    ^
_1 = feof (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:43:13: warning: use location
   43 |         if (feof(fp))
      |             ^
this stmt call this function :feof
trace fucntion name:feof 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d048
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35630 ch>
    def_stmt ch_21 = fgetc (fp_17(D));
    version:21>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:strbuf_getline========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:add_cacheinfo========= [0m
[40;33m =======POP node_fun stack:add_cacheinfo========= [0m
[40;42m =======pre add _ fucntion:remove_file_from_cache========= [0m
[40;33m =======POP node_fun stack:remove_file_from_cache========= [0m
[40;42m =======pre add _ fucntion:fprintf========= [0m
[40;33m =======POP node_fun stack:fprintf========= [0m
[40;42m =======pre add _ fucntion:verify_path========= [0m
[40;33m =======POP node_fun stack:verify_path========= [0m
[40;42m =======pre add _ fucntion:unquote_c_style========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path unquote_c_style  function_call count: 4 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;33m =======POP node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_add  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_grow  function_call count: 5 level :4========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :5========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46948
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fd97dd04a80>
 <ssa_name 0x7fd97dd46948
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fd97dd04a80>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:strbuf_grow========= [0m
[40;42m =======start_check_funciton:strbuf_grow========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
if (_11 < _14)
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_nr 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>
is Other function alloc_nr
 
 Start check Pointer Collect  

======================================================================
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
if (_11 < _14)
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:2 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================

 Expand conflict 
 The same function may have multiple branches :alloc_nr
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_nr 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
is Other function alloc_nr
 
 Start check Pointer Collect  

======================================================================
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:2 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================

 Expand conflict 
 The same function may have multiple branches :alloc_nr
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_38 = VDEF <.MEM_31>
_22 = st_mult (1, _21);
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>

 ================== pre trace ptable ================== 
trace fucntion name:st_mult 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
is Other function st_mult
 
 Start check Pointer Collect  

======================================================================
# .MEM_38 = VDEF <.MEM_31>
_22 = st_mult (1, _21);
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>

 ================== pre trace ptable ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# .MEM_33 = VDEF <.MEM_32>
exit (1);
./benchmarks/git/double_free_2/../git.h:422:25: warning: use location
  422 |                         die("Out of memory, realloc failed%s", "");
      |                         ^
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
is Other function xrealloc
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;31m    this function with other function alias that other function return value is heap-object [0m
[40;31m  	possible double free :4 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:strbuf_grow========= [0m
[40;42m =======pre_check_funciton:strbuf_add========= [0m
[40;42m =======start_check_funciton:strbuf_add========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d480
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fd97dd25eb8>
 <ssa_name 0x7fd97dd3d480
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fd97dd25eb8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d480
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fd97dd25eb8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d480
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fd97dd25eb8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d5e8
    type <pointer_type 0x7fd97e211150
        type <void_type 0x7fd97e2110a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211150>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1ff00 data>
    def_stmt GIMPLE_NOP
    version:10
    ptr-info 0x7fd97dd25ee8>
 <ssa_name 0x7fd97dd3d5e8
    type <pointer_type 0x7fd97e211150
        type <void_type 0x7fd97e2110a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211150>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1ff00 data>
    def_stmt GIMPLE_NOP
    version:10
    ptr-info 0x7fd97dd25ee8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d5e8
    type <pointer_type 0x7fd97e211150
        type <void_type 0x7fd97e2110a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211150>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1ff00 data>
    def_stmt GIMPLE_NOP
    version:10
    ptr-info 0x7fd97dd25ee8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d5e8
    type <pointer_type 0x7fd97e211150
        type <void_type 0x7fd97e2110a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211150>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1ff00 data>
    def_stmt GIMPLE_NOP
    version:10
    ptr-info 0x7fd97dd25ee8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:strbuf_add========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;33m =======POP node_fun stack:strcspn========= [0m
[40;42m =======pre_check_funciton:unquote_c_style========= [0m
[40;42m =======start_check_funciton:unquote_c_style========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_35>
len_22 = strcspn (quoted_11, "\"\\");
len_22 = strcspn (quoted_11, "\"\\");
./benchmarks/git/double_free_2/git_df_2.c:87:23: warning: use location
   87 |                 len = strcspn(quoted, "\"\\");
      |                       ^
this stmt call this function :strcspn
trace fucntion name:strcspn 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_9 = MEM[(const char *)quoted_24 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:35: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_31 = (int) _9;
./benchmarks/git/double_free_2/git_df_2.c:120:33: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ac_32 = _10 | ac_29;
./benchmarks/git/double_free_2/git_df_2.c:122:44: warning: use location
  122 |                                         ac |= (ch - '0');
      |                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
lto1: warning: use location
this stmt have mutiple branch ---strcspn-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt call this function :strbuf_addch
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt call this function :strbuf_add
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
[40;36m ======= relate node_fun argument:quoted========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:quoted========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
[40;36m ======= relate node_fun argument:quoted========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_31 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_31 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
lto1: warning: use location
this stmt have mutiple branch ---strbuf_add-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
lto1: warning: use location
this stmt have mutiple branch ---strbuf_add-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = MEM[(const char *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:35: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_28 = (int) _6;
./benchmarks/git/double_free_2/git_df_2.c:117:33: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = ch_28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:119:52: warning: use location
  119 |                                         ac |= ((ch - '0') << 3);
      |                                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_4 = MEM[(const char *)quoted_24 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:31: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = *quoted_24;
./benchmarks/git/double_free_2/git_df_2.c:91:25: warning: use location
   91 |                 switch (*quoted++) {
      |                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_38>
_9 = MEM[(const char *)quoted_24 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:35: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ch_31 = (int) _9;
./benchmarks/git/double_free_2/git_df_2.c:120:33: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ac_32 = _10 | ac_29;
./benchmarks/git/double_free_2/git_df_2.c:122:44: warning: use location
  122 |                                         ac |= (ch - '0');
      |                                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
if (ch_31 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
if (ch_31 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location

===== possiable asias =====
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_38>
_6 = MEM[(const char *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:35: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ch_28 = (int) _6;
./benchmarks/git/double_free_2/git_df_2.c:117:33: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
_7 = ch_28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:119:52: warning: use location
  119 |                                         ac |= ((ch - '0') << 3);
      |                                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_38>
_4 = MEM[(const char *)quoted_24 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:31: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_38>
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_38>
_2 = *quoted_24;
./benchmarks/git/double_free_2/git_df_2.c:91:25: warning: use location
   91 |                 switch (*quoted++) {
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7fd97dd25738
    type <array_type 0x7fd97dd1a7e0
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        BLK
        size <integer_cst 0x7fd97e213060 constant 24>
        unit-size <integer_cst 0x7fd97dd04948 constant 3>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7fd97dd1a738 type <integer_type 0x7fd97e20a000 sizetype>
            DI
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5be8 0> max <integer_cst 0x7fd97e1f5d80 2>>
        pointer_to_this <pointer_type 0x7fd97dd1a888>>
    readonly constant static ""\\000">

dot graph START

======================================================================
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>

 ================== pre trace ptable ================== 
trace fucntion name:strcspn 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>
is Other function strcspn
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_35>
len_22 = strcspn (quoted_11, "\"\\");
len_22 = strcspn (quoted_11, "\"\\");
./benchmarks/git/double_free_2/git_df_2.c:87:23: warning: use location
   87 |                 len = strcspn(quoted, "\"\\");
      |                       ^
this stmt call this function :strcspn
trace fucntion name:strcspn 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_9 = MEM[(const char *)quoted_24 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:35: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_31 = (int) _9;
./benchmarks/git/double_free_2/git_df_2.c:120:33: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ac_32 = _10 | ac_29;
./benchmarks/git/double_free_2/git_df_2.c:122:44: warning: use location
  122 |                                         ac |= (ch - '0');
      |                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
lto1: warning: use location
this stmt have mutiple branch ---strcspn-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt call this function :strbuf_addch
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt call this function :strbuf_add
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_31 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_31 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
lto1: warning: use location
this stmt have mutiple branch ---strbuf_add-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = MEM[(const char *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:35: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_28 = (int) _6;
./benchmarks/git/double_free_2/git_df_2.c:117:33: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = ch_28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:119:52: warning: use location
  119 |                                         ac |= ((ch - '0') << 3);
      |                                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_4 = MEM[(const char *)quoted_24 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:31: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = *quoted_24;
./benchmarks/git/double_free_2/git_df_2.c:91:25: warning: use location
   91 |                 switch (*quoted++) {
      |                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_38>
_9 = MEM[(const char *)quoted_24 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:35: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ch_31 = (int) _9;
./benchmarks/git/double_free_2/git_df_2.c:120:33: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ac_32 = _10 | ac_29;
./benchmarks/git/double_free_2/git_df_2.c:122:44: warning: use location
  122 |                                         ac |= (ch - '0');
      |                                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
if (ch_31 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
if (ch_31 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_38>
_6 = MEM[(const char *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:35: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ch_28 = (int) _6;
./benchmarks/git/double_free_2/git_df_2.c:117:33: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
_7 = ch_28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:119:52: warning: use location
  119 |                                         ac |= ((ch - '0') << 3);
      |                                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_38>
_4 = MEM[(const char *)quoted_24 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:31: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_38>
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_38>
_2 = *quoted_24;
./benchmarks/git/double_free_2/git_df_2.c:91:25: warning: use location
   91 |                 switch (*quoted++) {
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
is Other function 
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt call this function :strbuf_addch
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt call this function :strbuf_add
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
is Other function 
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt call this function :strbuf_addch
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt call this function :strbuf_add
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
this stmt call this function :strbuf_addch
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt call this function :strbuf_add
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with ch ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with ch ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ch ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt call this function :strbuf_addch
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt call this function :strbuf_add
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with oldlen ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with oldlen ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with oldlen ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:unquote_c_style========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_reset  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre_check_funciton:strbuf_reset========= [0m
[40;42m =======start_check_funciton:strbuf_reset========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
strbuf_setlen (sb_4(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:29:17: warning: use location
   29 |                 strbuf_setlen(sb, 0);
      |                 ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_4(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:28:15: warning: use location
   28 |         if (sb->len)
      |               ^
if (_1 != 0)
./benchmarks/git/double_free_2/git_df_2.c:28:12: warning: use location
   28 |         if (sb->len)
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_reset========= [0m
[40;42m =======pre add _ fucntion:get_sha1_hex========= [0m
[40;33m =======POP node_fun stack:get_sha1_hex========= [0m
[40;42m =======pre add _ fucntion:strchr========= [0m
[40;33m =======POP node_fun stack:strchr========= [0m
[40;42m =======pre add _ fucntion:__errno_location========= [0m
[40;33m =======POP node_fun stack:__errno_location========= [0m
[40;42m =======pre add _ fucntion:strtoul========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strtoul  function_call count: 0 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:strtoul========= [0m
[40;42m =======start_check_funciton:strtoul========= [0m
[40;33m =======POP node_fun stack:strtoul========= [0m
[40;42m =======pre add _ fucntion:strbuf_init========= [0m
[40;33m =======POP node_fun stack:strbuf_init========= [0m
[40;42m =======pre_check_funciton:read_index_info========= [0m
[40;42m =======start_check_funciton:read_index_info========= [0m

dot graph START

======================================================================
 <var_decl 0x7fd97dd2b000 buf
    type <record_type 0x7fd97dd17dc8 strbuf BLK
        size <integer_cst 0x7fd97e213078 constant 192>
        unit-size <integer_cst 0x7fd97e213048 constant 24>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8
        fields <field_decl 0x7fd97dd16428 alloc type <integer_type 0x7fd97dd0d9d8 size_t>
            unsigned DI ./benchmarks/git/double_free_2/../git.h:242:9
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 offset_align 128
            offset <integer_cst 0x7fd97e1f5be8 constant 0>
            bit-offset <integer_cst 0x7fd97e1f5c30 constant 0> context <record_type 0x7fd97dd17dc8 strbuf> chain <field_decl 0x7fd97dd16390 len>> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd17e70>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:138:16 size <integer_cst 0x7fd97e213078 192> unit-size <integer_cst 0x7fd97e213048 24>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97ea9df30 uq>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7fd97dd2b000 buf
    type <record_type 0x7fd97dd17dc8 strbuf BLK
        size <integer_cst 0x7fd97e213078 constant 192>
        unit-size <integer_cst 0x7fd97e213048 constant 24>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8
        fields <field_decl 0x7fd97dd16428 alloc type <integer_type 0x7fd97dd0d9d8 size_t>
            unsigned DI ./benchmarks/git/double_free_2/../git.h:242:9
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 offset_align 128
            offset <integer_cst 0x7fd97e1f5be8 constant 0>
            bit-offset <integer_cst 0x7fd97e1f5c30 constant 0> context <record_type 0x7fd97dd17dc8 strbuf> chain <field_decl 0x7fd97dd16390 len>> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd17e70>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:138:16 size <integer_cst 0x7fd97e213078 192> unit-size <integer_cst 0x7fd97e213048 24>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97ea9df30 uq>>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_78 = VDEF <.MEM_77(D)>
strbuf_init (&buf, 0);
strbuf_init (&buf, 0);
./benchmarks/git/double_free_2/git_df_2.c:141:9: warning: use location
  141 |         strbuf_init(&buf, 0);
      |         ^
this stmt call this function :strbuf_init
trace fucntion name:strbuf_init 

 ================== trace ================== 
trace fucntion free:0 
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <var_decl 0x7fd97dd2b000 buf
    type <record_type 0x7fd97dd17dc8 strbuf BLK
        size <integer_cst 0x7fd97e213078 constant 192>
        unit-size <integer_cst 0x7fd97e213048 constant 24>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8
        fields <field_decl 0x7fd97dd16428 alloc type <integer_type 0x7fd97dd0d9d8 size_t>
            unsigned DI ./benchmarks/git/double_free_2/../git.h:242:9
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 offset_align 128
            offset <integer_cst 0x7fd97e1f5be8 constant 0>
            bit-offset <integer_cst 0x7fd97e1f5c30 constant 0> context <record_type 0x7fd97dd17dc8 strbuf> chain <field_decl 0x7fd97dd16390 len>> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd17e70>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:138:16 size <integer_cst 0x7fd97e213078 192> unit-size <integer_cst 0x7fd97e213048 24>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97ea9df30 uq>>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with buf ========= [0m
[40;36m ======= relate node_fun argument:buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_release’:
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
   15 |     free(sb->buf);
      |            ^
_1 = sb_3(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&buf);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <var_decl 0x7fd97dd2b000 buf
    type <record_type 0x7fd97dd17dc8 strbuf BLK
        size <integer_cst 0x7fd97e213078 constant 192>
        unit-size <integer_cst 0x7fd97e213048 constant 24>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8
        fields <field_decl 0x7fd97dd16428 alloc type <integer_type 0x7fd97dd0d9d8 size_t>
            unsigned DI ./benchmarks/git/double_free_2/../git.h:242:9
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 offset_align 128
            offset <integer_cst 0x7fd97e1f5be8 constant 0>
            bit-offset <integer_cst 0x7fd97e1f5c30 constant 0> context <record_type 0x7fd97dd17dc8 strbuf> chain <field_decl 0x7fd97dd16390 len>> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd17e70>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:138:16 size <integer_cst 0x7fd97e213078 192> unit-size <integer_cst 0x7fd97e213048 24>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97ea9df30 uq>>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with buf ========= [0m
[40;36m ======= relate node_fun argument:buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_release’:
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
   15 |     free(sb->buf);
      |            ^
_1 = sb_3(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <var_decl 0x7fd97ea9df30 uq
    type <record_type 0x7fd97dd17dc8 strbuf BLK
        size <integer_cst 0x7fd97e213078 constant 192>
        unit-size <integer_cst 0x7fd97e213048 constant 24>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8
        fields <field_decl 0x7fd97dd16428 alloc type <integer_type 0x7fd97dd0d9d8 size_t>
            unsigned DI ./benchmarks/git/double_free_2/../git.h:242:9
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 offset_align 128
            offset <integer_cst 0x7fd97e1f5be8 constant 0>
            bit-offset <integer_cst 0x7fd97e1f5c30 constant 0> context <record_type 0x7fd97dd17dc8 strbuf> chain <field_decl 0x7fd97dd16390 len>> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd17e70>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fd97e213078 192> unit-size <integer_cst 0x7fd97e213048 24>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <label_decl 0x7fd97dd1f180 bad_line>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7fd97ea9df30 uq
    type <record_type 0x7fd97dd17dc8 strbuf BLK
        size <integer_cst 0x7fd97e213078 constant 192>
        unit-size <integer_cst 0x7fd97e213048 constant 24>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8
        fields <field_decl 0x7fd97dd16428 alloc type <integer_type 0x7fd97dd0d9d8 size_t>
            unsigned DI ./benchmarks/git/double_free_2/../git.h:242:9
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 offset_align 128
            offset <integer_cst 0x7fd97e1f5be8 constant 0>
            bit-offset <integer_cst 0x7fd97e1f5c30 constant 0> context <record_type 0x7fd97dd17dc8 strbuf> chain <field_decl 0x7fd97dd16390 len>> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd17e70>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fd97e213078 192> unit-size <integer_cst 0x7fd97e213048 24>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <label_decl 0x7fd97dd1f180 bad_line>>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_79 = VDEF <.MEM_78>
strbuf_init (&uq, 0);
strbuf_init (&uq, 0);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:142:9: warning: use location
  142 |         strbuf_init(&uq, 0);
      |         ^
this stmt call this function :strbuf_init
trace fucntion name:strbuf_init 

 ================== trace ================== 
trace fucntion free:0 
strbuf_release (&uq);
./benchmarks/git/double_free_2/git_df_2.c:229:9: warning: use location
  229 |         strbuf_release(&uq);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <var_decl 0x7fd97ea9df30 uq
    type <record_type 0x7fd97dd17dc8 strbuf BLK
        size <integer_cst 0x7fd97e213078 constant 192>
        unit-size <integer_cst 0x7fd97e213048 constant 24>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8
        fields <field_decl 0x7fd97dd16428 alloc type <integer_type 0x7fd97dd0d9d8 size_t>
            unsigned DI ./benchmarks/git/double_free_2/../git.h:242:9
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 offset_align 128
            offset <integer_cst 0x7fd97e1f5be8 constant 0>
            bit-offset <integer_cst 0x7fd97e1f5c30 constant 0> context <record_type 0x7fd97dd17dc8 strbuf> chain <field_decl 0x7fd97dd16390 len>> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd17e70>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fd97e213078 192> unit-size <integer_cst 0x7fd97e213048 24>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <label_decl 0x7fd97dd1f180 bad_line>>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with uq ========= [0m
[40;36m ======= relate node_fun argument:uq========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_release’:
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
   15 |     free(sb->buf);
      |            ^
_1 = sb_3(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&uq);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:229:9: warning: use location
  229 |         strbuf_release(&uq);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <var_decl 0x7fd97ea9df30 uq
    type <record_type 0x7fd97dd17dc8 strbuf BLK
        size <integer_cst 0x7fd97e213078 constant 192>
        unit-size <integer_cst 0x7fd97e213048 constant 24>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8
        fields <field_decl 0x7fd97dd16428 alloc type <integer_type 0x7fd97dd0d9d8 size_t>
            unsigned DI ./benchmarks/git/double_free_2/../git.h:242:9
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 offset_align 128
            offset <integer_cst 0x7fd97e1f5be8 constant 0>
            bit-offset <integer_cst 0x7fd97e1f5c30 constant 0> context <record_type 0x7fd97dd17dc8 strbuf> chain <field_decl 0x7fd97dd16390 len>> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd17e70>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fd97e213078 192> unit-size <integer_cst 0x7fd97e213048 24>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <label_decl 0x7fd97dd1f180 bad_line>>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with uq ========= [0m
[40;36m ======= relate node_fun argument:uq========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_release’:
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
   15 |     free(sb->buf);
      |            ^
_1 = sb_3(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fd708
    type <pointer_type 0x7fd97e2119d8
        type <integer_type 0x7fd97e20a5e8 int public SI
            size <integer_cst 0x7fd97e1f5df8 constant 32>
            unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
            pointer_to_this <pointer_type 0x7fd97e2119d8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = __errno_location ();
    version:1
    ptr-info 0x7fd97dd25a98>
 <ssa_name 0x7fd97e1fd708
    type <pointer_type 0x7fd97e2119d8
        type <integer_type 0x7fd97e20a5e8 int public SI
            size <integer_cst 0x7fd97e1f5df8 constant 32>
            unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
            pointer_to_this <pointer_type 0x7fd97e2119d8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = __errno_location ();
    version:1
    ptr-info 0x7fd97dd25a98>

 ================== pre trace ptable ================== 
trace fucntion name:__errno_location 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fd708
    type <pointer_type 0x7fd97e2119d8
        type <integer_type 0x7fd97e20a5e8 int public SI
            size <integer_cst 0x7fd97e1f5df8 constant 32>
            unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
            pointer_to_this <pointer_type 0x7fd97e2119d8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = __errno_location ();
    version:1
    ptr-info 0x7fd97dd25a98>
is Other function __errno_location
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_1 = 0;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:167:23: warning: use location
  167 |                 errno = 0;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_1 = 0;
./benchmarks/git/double_free_2/git_df_2.c:167:23: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = __errno_location ();
_1 = __errno_location ();
./benchmarks/git/double_free_2/git_df_2.c:167:17: warning: use location
  167 |                 errno = 0;
      |                 ^
this stmt call this function :__errno_location
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fd708
    type <pointer_type 0x7fd97e2119d8
        type <integer_type 0x7fd97e20a5e8 int public SI
            size <integer_cst 0x7fd97e1f5df8 constant 32>
            unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
            pointer_to_this <pointer_type 0x7fd97e2119d8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = __errno_location ();
    version:1
    ptr-info 0x7fd97dd25a98>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fd750
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _2 = buf.buf;
    version:2
    ptr-info 0x7fd97dd25ab0>
 <ssa_name 0x7fd97e1fd750
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _2 = buf.buf;
    version:2
    ptr-info 0x7fd97dd25ab0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fd750
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _2 = buf.buf;
    version:2
    ptr-info 0x7fd97dd25ab0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
ul_57 = strtoul (_2, &ptr, 8);
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt call this function :strtoul
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fd97e1fd750
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _2 = buf.buf;
    version:2
    ptr-info 0x7fd97dd25ab0>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strtoul’:
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
   62 |     *endptr = str + base;
      |                   ^
_2 = str_4(D) + _1;
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
   62 |     *endptr = str + base;
      |             ^
*endptr_6(D) = _2;
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
*endptr_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
mode_58 = (unsigned int) ul_57;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:172:22: warning: use location
  172 |                 mode = ul;
      |                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fd750
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _2 = buf.buf;
    version:2
    ptr-info 0x7fd97dd25ab0>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <var_decl 0x7fd97dd2b3f0 ptr
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    addressable unsigned DI ./benchmarks/git/double_free_2/git_df_2.c:144:9 size <integer_cst 0x7fd97e1f5bb8 64> unit-size <integer_cst 0x7fd97e1f5bd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97dd2b360 tab>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7fd97dd2b3f0 ptr
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    addressable unsigned DI ./benchmarks/git/double_free_2/git_df_2.c:144:9 size <integer_cst 0x7fd97e1f5bb8 64> unit-size <integer_cst 0x7fd97e1f5bd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97dd2b360 tab>>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
ul_57 = strtoul (_2, &ptr, 8);
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt call this function :strtoul
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
 <var_decl 0x7fd97dd2b3f0 ptr
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    addressable unsigned DI ./benchmarks/git/double_free_2/git_df_2.c:144:9 size <integer_cst 0x7fd97e1f5bb8 64> unit-size <integer_cst 0x7fd97e1f5bd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97dd2b360 tab>>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with ptr ========= [0m
[40;36m ======= relate node_fun argument:ptr========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strtoul’:
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
   62 |     *endptr = str + base;
      |                   ^
_2 = str_4(D) + _1;
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ptr========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
   62 |     *endptr = str + base;
      |             ^
*endptr_6(D) = _2;
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
*endptr_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
ul_57 = strtoul (_2, &ptr, 8);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt call this function :strtoul
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
 <var_decl 0x7fd97dd2b3f0 ptr
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    addressable unsigned DI ./benchmarks/git/double_free_2/git_df_2.c:144:9 size <integer_cst 0x7fd97e1f5bb8 64> unit-size <integer_cst 0x7fd97e1f5bd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97dd2b360 tab>>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with ptr ========= [0m
[40;36m ======= relate node_fun argument:ptr========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strtoul’:
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
   62 |     *endptr = str + base;
      |                   ^
_2 = str_4(D) + _1;
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ptr========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
   62 |     *endptr = str + base;
      |             ^
*endptr_6(D) = _2;
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
*endptr_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>

 ================== pre trace ptable ================== 
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :888========  [0m
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with ul ========= [0m
fucntion collect path finsh

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>
is Other function strtoul
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
ul_57 = strtoul (_2, &ptr, 8);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt call this function :strtoul
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with ul ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
mode_58 = (unsigned int) ul_57;
./benchmarks/git/double_free_2/git_df_2.c:172:22: warning: use location
  172 |                 mode = ul;
      |                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_4 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:169:25: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                         ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_5 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:169:39: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = *_5;
./benchmarks/git/double_free_2/git_df_2.c:169:39: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_9 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:174:23: warning: use location
  174 |                 tab = strchr(ptr, '\t');
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_59 = strchr (_9, 9);
./benchmarks/git/double_free_2/git_df_2.c:174:23: warning: use location
this stmt call this function :strchr
trace fucntion name:strchr 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location
this stmt have mutiple branch ---strchr-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_21 = MEM[(char *)tab_36 + -41B];
./benchmarks/git/double_free_2/git_df_2.c:188:56: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_19 = tab_36 + 18446744073709551576;
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                     ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
this stmt call this function :get_sha1_hex
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_18 = tab_59 + 1;
./benchmarks/git/double_free_2/git_df_2.c:185:35: warning: use location
  185 |                         ptr = tab + 1; /* point at the head of path */
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ptr = _18;
./benchmarks/git/double_free_2/git_df_2.c:185:29: warning: use location
  185 |                         ptr = tab + 1; /* point at the head of path */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_10 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:175:33: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_11 = tab_59 - _10;
./benchmarks/git/double_free_2/git_df_2.c:175:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ptr = _17;
./benchmarks/git/double_free_2/git_df_2.c:180:29: warning: use location
  180 |                         ptr = tab + 1; /* point at the head of path */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
path_name_66 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:191:27: warning: use location
  191 |                 path_name = ptr;
      |                           ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: use location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
this stmt call this function :unquote_c_style
trace fucntion name:unquote_c_style 
[40;44m =======trace_function_path unquote_c_style  function_call count: 4 level :0========  [0m
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>
[40;36m ======= node_fun:unquote_c_style========= [0m
[40;36m ======= find relate stmt with ul ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;46m =======add node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;46m =======add node_fun stack:strbuf_add========= [0m
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with ul ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :2========  [0m
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with ul ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :3========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ul ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;46m =======add node_fun stack:strcspn========= [0m

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_22 = *path_name_66;
./benchmarks/git/double_free_2/git_df_2.c:192:50: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
_27 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^
printf ("git-update-index: unable to remove %s", _27);
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_28 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_30 = MEM[(char *)_28 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
MEM[(char *)_29 + -42B] = _30;
./benchmarks/git/double_free_2/git_df_2.c:216:34: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
MEM[(char *)_28 + -1B] = 0;
./benchmarks/git/double_free_2/git_df_2.c:216:44: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_29 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:28: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_32 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:221:31: warning: use location
  221 |                 if (path_name != ptr)
      |                               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_62 = tab_59 + 18446744073709551614;
./benchmarks/git/double_free_2/git_df_2.c:181:29: warning: use location
  181 |                         tab = tab - 2; /* point at tail of sha1 */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_15 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:179:36: warning: use location
  179 |                         stage = tab[-1] - '0';
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_14 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:178:60: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_14 <= 51)
./benchmarks/git/double_free_2/git_df_2.c:178:54: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_13 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:178:49: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_13 > 47)
./benchmarks/git/double_free_2/git_df_2.c:178:36: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_12 = MEM[(char *)tab_59 + -2B];
./benchmarks/git/double_free_2/git_df_2.c:178:24: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_98 = VDEF <.MEM_97>
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_100 = VDEF <.MEM_94>
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_94>
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_100>
_27 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_101 = VDEF <.MEM_100>
printf ("git-update-index: unable to remove %s", _27);
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_94>
_28 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_95>
_30 = MEM[(char *)_28 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_96 = VDEF <.MEM_95>
MEM[(char *)_29 + -42B] = _30;
./benchmarks/git/double_free_2/git_df_2.c:216:34: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_95 = VDEF <.MEM_94>
MEM[(char *)_28 + -1B] = 0;
./benchmarks/git/double_free_2/git_df_2.c:216:44: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_95>
_29 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:28: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_72>
_32 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:221:31: warning: use location
  221 |                 if (path_name != ptr)
      |                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:5 [0m
[40;31m  	possible double free [rigorous]:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fd8b8
    type <pointer_type 0x7fd97e2119d8
        type <integer_type 0x7fd97e20a5e8 int public SI
            size <integer_cst 0x7fd97e1f5df8 constant 32>
            unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
            pointer_to_this <pointer_type 0x7fd97e2119d8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = __errno_location ();
    version:7
    ptr-info 0x7fd97dd25b10>
 <ssa_name 0x7fd97e1fd8b8
    type <pointer_type 0x7fd97e2119d8
        type <integer_type 0x7fd97e20a5e8 int public SI
            size <integer_cst 0x7fd97e1f5df8 constant 32>
            unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
            pointer_to_this <pointer_type 0x7fd97e2119d8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = __errno_location ();
    version:7
    ptr-info 0x7fd97dd25b10>

 ================== pre trace ptable ================== 
trace fucntion name:__errno_location 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fd8b8
    type <pointer_type 0x7fd97e2119d8
        type <integer_type 0x7fd97e20a5e8 int public SI
            size <integer_cst 0x7fd97e1f5df8 constant 32>
            unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
            pointer_to_this <pointer_type 0x7fd97e2119d8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = __errno_location ();
    version:7
    ptr-info 0x7fd97dd25b10>
is Other function __errno_location
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = *_7;
./benchmarks/git/double_free_2/git_df_2.c:170:24: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = __errno_location ();
_7 = __errno_location ();
./benchmarks/git/double_free_2/git_df_2.c:170:24: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                        ^
this stmt call this function :__errno_location
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fd8b8
    type <pointer_type 0x7fd97e2119d8
        type <integer_type 0x7fd97e20a5e8 int public SI
            size <integer_cst 0x7fd97e1f5df8 constant 32>
            unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
            pointer_to_this <pointer_type 0x7fd97e2119d8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = __errno_location ();
    version:7
    ptr-info 0x7fd97dd25b10>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_86>
tab_59 = strchr (_9, 9);
tab_59 = strchr (_9, 9);
./benchmarks/git/double_free_2/git_df_2.c:174:23: warning: use location
  174 |                 tab = strchr(ptr, '\t');
      |                       ^
this stmt call this function :strchr
trace fucntion name:strchr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location
this stmt have mutiple branch ---strchr-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_21 = MEM[(char *)tab_36 + -41B];
./benchmarks/git/double_free_2/git_df_2.c:188:56: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_19 = tab_36 + 18446744073709551576;
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                     ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
this stmt call this function :get_sha1_hex
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_18 = tab_59 + 1;
./benchmarks/git/double_free_2/git_df_2.c:185:35: warning: use location
  185 |                         ptr = tab + 1; /* point at the head of path */
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ptr = _18;
./benchmarks/git/double_free_2/git_df_2.c:185:29: warning: use location
  185 |                         ptr = tab + 1; /* point at the head of path */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ul_57 = strtoul (_2, &ptr, 8);
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt call this function :strtoul
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strtoul’:
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
   62 |     *endptr = str + base;
      |                   ^
_2 = str_4(D) + _1;
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
   62 |     *endptr = str + base;
      |             ^
*endptr_6(D) = _2;
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
*endptr_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ul_57 = strtoul (_2, &ptr, 8);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt call this function :strtoul
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strtoul’:
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
   62 |     *endptr = str + base;
      |                   ^
_2 = str_4(D) + _1;
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
   62 |     *endptr = str + base;
      |             ^
*endptr_6(D) = _2;
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
*endptr_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_4 = ptr;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:169:25: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                         ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_5 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:169:39: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = *_5;
./benchmarks/git/double_free_2/git_df_2.c:169:39: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_9 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:174:23: warning: use location
  174 |                 tab = strchr(ptr, '\t');
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_10 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:175:33: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_11 = tab_59 - _10;
./benchmarks/git/double_free_2/git_df_2.c:175:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ptr = _17;
./benchmarks/git/double_free_2/git_df_2.c:180:29: warning: use location
  180 |                         ptr = tab + 1; /* point at the head of path */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
path_name_66 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:191:27: warning: use location
  191 |                 path_name = ptr;
      |                           ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location
this stmt have mutiple branch ---strtoul-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: use location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
this stmt call this function :unquote_c_style
trace fucntion name:unquote_c_style 
[40;44m =======trace_function_path unquote_c_style  function_call count: 4 level :0========  [0m
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>
[40;36m ======= node_fun:unquote_c_style========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:83:20: warning: use location
   83 |         if (*quoted++ != '"')
      |                    ^
quoted_21 = quoted_20(D) + 1;
./benchmarks/git/double_free_2/git_df_2.c:83:20: warning: use location
quoted_21

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
quoted_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
*endp_34(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
quoted_25

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
quoted_30

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;46m =======add node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;46m =======add node_fun stack:strbuf_add========= [0m
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :2========  [0m
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :3========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;46m =======add node_fun stack:strcspn========= [0m

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_22 = *path_name_66;
./benchmarks/git/double_free_2/git_df_2.c:192:50: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
_27 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^
printf ("git-update-index: unable to remove %s", _27);
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_28 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_30 = MEM[(char *)_28 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
MEM[(char *)_29 + -42B] = _30;
./benchmarks/git/double_free_2/git_df_2.c:216:34: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
MEM[(char *)_28 + -1B] = 0;
./benchmarks/git/double_free_2/git_df_2.c:216:44: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_29 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:28: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_32 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:221:31: warning: use location
  221 |                 if (path_name != ptr)
      |                               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_62 = tab_59 + 18446744073709551614;
./benchmarks/git/double_free_2/git_df_2.c:181:29: warning: use location
  181 |                         tab = tab - 2; /* point at tail of sha1 */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_15 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:179:36: warning: use location
  179 |                         stage = tab[-1] - '0';
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_14 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:178:60: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_14 <= 51)
./benchmarks/git/double_free_2/git_df_2.c:178:54: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_13 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:178:49: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_13 > 47)
./benchmarks/git/double_free_2/git_df_2.c:178:36: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_12 = MEM[(char *)tab_59 + -2B];
./benchmarks/git/double_free_2/git_df_2.c:178:24: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location

===== possiable asias =====
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_98 = VDEF <.MEM_97>
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_100 = VDEF <.MEM_94>
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_94>
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_100>
_27 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_101 = VDEF <.MEM_100>
printf ("git-update-index: unable to remove %s", _27);
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_94>
_28 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_95>
_30 = MEM[(char *)_28 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_96 = VDEF <.MEM_95>
MEM[(char *)_29 + -42B] = _30;
./benchmarks/git/double_free_2/git_df_2.c:216:34: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_95 = VDEF <.MEM_94>
MEM[(char *)_28 + -1B] = 0;
./benchmarks/git/double_free_2/git_df_2.c:216:44: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_95>
_29 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:28: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_72>
_32 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:221:31: warning: use location
  221 |                 if (path_name != ptr)
      |                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:5 [0m
[40;31m  	possible double free [rigorous]:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>

 ================== pre trace ptable ================== 
trace fucntion name:strchr 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>
is Other function strchr
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_86>
tab_59 = strchr (_9, 9);
tab_59 = strchr (_9, 9);
./benchmarks/git/double_free_2/git_df_2.c:174:23: warning: use location
  174 |                 tab = strchr(ptr, '\t');
      |                       ^
this stmt call this function :strchr
trace fucntion name:strchr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location
this stmt have mutiple branch ---strchr-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_21 = MEM[(char *)tab_36 + -41B];
./benchmarks/git/double_free_2/git_df_2.c:188:56: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_19 = tab_36 + 18446744073709551576;
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                     ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
this stmt call this function :get_sha1_hex
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_18 = tab_59 + 1;
./benchmarks/git/double_free_2/git_df_2.c:185:35: warning: use location
  185 |                         ptr = tab + 1; /* point at the head of path */
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ptr = _18;
./benchmarks/git/double_free_2/git_df_2.c:185:29: warning: use location
  185 |                         ptr = tab + 1; /* point at the head of path */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ul_57 = strtoul (_2, &ptr, 8);
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt call this function :strtoul
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with tab ========= [0m
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strtoul’:
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
   62 |     *endptr = str + base;
      |                   ^
_2 = str_4(D) + _1;
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
   62 |     *endptr = str + base;
      |             ^
*endptr_6(D) = _2;
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
*endptr_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ul_57 = strtoul (_2, &ptr, 8);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt call this function :strtoul
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with tab ========= [0m
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strtoul’:
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
   62 |     *endptr = str + base;
      |                   ^
_2 = str_4(D) + _1;
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
   62 |     *endptr = str + base;
      |             ^
*endptr_6(D) = _2;
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
*endptr_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_4 = ptr;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:169:25: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                         ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_5 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:169:39: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = *_5;
./benchmarks/git/double_free_2/git_df_2.c:169:39: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_10 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:175:33: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_11 = tab_59 - _10;
./benchmarks/git/double_free_2/git_df_2.c:175:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ptr = _17;
./benchmarks/git/double_free_2/git_df_2.c:180:29: warning: use location
  180 |                         ptr = tab + 1; /* point at the head of path */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
path_name_66 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:191:27: warning: use location
  191 |                 path_name = ptr;
      |                           ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location
this stmt have mutiple branch ---strtoul-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: use location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
this stmt call this function :unquote_c_style
trace fucntion name:unquote_c_style 
[40;44m =======trace_function_path unquote_c_style  function_call count: 4 level :0========  [0m
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>
[40;36m ======= node_fun:unquote_c_style========= [0m
[40;36m ======= find relate stmt with tab ========= [0m
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:83:20: warning: use location
   83 |         if (*quoted++ != '"')
      |                    ^
quoted_21 = quoted_20(D) + 1;
./benchmarks/git/double_free_2/git_df_2.c:83:20: warning: use location
quoted_21

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
quoted_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
*endp_34(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
quoted_25

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
quoted_30

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;46m =======add node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;46m =======add node_fun stack:strbuf_add========= [0m
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with tab ========= [0m
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :2========  [0m
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with tab ========= [0m
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :3========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with tab ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;46m =======add node_fun stack:strcspn========= [0m

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_22 = *path_name_66;
./benchmarks/git/double_free_2/git_df_2.c:192:50: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
_27 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^
printf ("git-update-index: unable to remove %s", _27);
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_28 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_30 = MEM[(char *)_28 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
MEM[(char *)_29 + -42B] = _30;
./benchmarks/git/double_free_2/git_df_2.c:216:34: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
MEM[(char *)_28 + -1B] = 0;
./benchmarks/git/double_free_2/git_df_2.c:216:44: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_29 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:28: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_32 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:221:31: warning: use location
  221 |                 if (path_name != ptr)
      |                               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_62 = tab_59 + 18446744073709551614;
./benchmarks/git/double_free_2/git_df_2.c:181:29: warning: use location
  181 |                         tab = tab - 2; /* point at tail of sha1 */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_15 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:179:36: warning: use location
  179 |                         stage = tab[-1] - '0';
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_14 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:178:60: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_14 <= 51)
./benchmarks/git/double_free_2/git_df_2.c:178:54: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_13 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:178:49: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_13 > 47)
./benchmarks/git/double_free_2/git_df_2.c:178:36: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_12 = MEM[(char *)tab_59 + -2B];
./benchmarks/git/double_free_2/git_df_2.c:178:24: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location

===== possiable asias =====
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_98 = VDEF <.MEM_97>
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_100 = VDEF <.MEM_94>
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_94>
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_100>
_27 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_101 = VDEF <.MEM_100>
printf ("git-update-index: unable to remove %s", _27);
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_94>
_28 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_95>
_30 = MEM[(char *)_28 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_96 = VDEF <.MEM_95>
MEM[(char *)_29 + -42B] = _30;
./benchmarks/git/double_free_2/git_df_2.c:216:34: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_95 = VDEF <.MEM_94>
MEM[(char *)_28 + -1B] = 0;
./benchmarks/git/double_free_2/git_df_2.c:216:44: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_95>
_29 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:28: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_72>
_32 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:221:31: warning: use location
  221 |                 if (path_name != ptr)
      |                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:5 [0m
[40;31m  	possible double free [rigorous]:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fdc18
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _19 = tab_36 + 18446744073709551576;
    version:19
    ptr-info 0x7fd97dd25b88>
 <ssa_name 0x7fd97e1fdc18
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _19 = tab_36 + 18446744073709551576;
    version:19
    ptr-info 0x7fd97dd25b88>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fdc18
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _19 = tab_36 + 18446744073709551576;
    version:19
    ptr-info 0x7fd97dd25b88>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_89 = VDEF <.MEM_70>
_20 = get_sha1_hex (_19, &sha1);
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                     ^
this stmt call this function :get_sha1_hex
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fdc18
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _19 = tab_36 + 18446744073709551576;
    version:19
    ptr-info 0x7fd97dd25b88>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <var_decl 0x7fd97dd2b240 sha1
    type <array_type 0x7fd97dd1a9d8
        type <integer_type 0x7fd97e20a348 unsigned char public unsigned QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97e1f5cd8 0> max <integer_cst 0x7fd97e1f5c78 255>
            pointer_to_this <pointer_type 0x7fd97e2d9930>>
        BLK
        size <integer_cst 0x7fd97dd04768 constant 160>
        unit-size <integer_cst 0x7fd97dd04750 constant 20>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7fd97dd14b28 type <integer_type 0x7fd97e20a000 sizetype>
            DI
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5be8 0> max <integer_cst 0x7fd97dd04870 19>>
        pointer_to_this <pointer_type 0x7fd97dd1adc8>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:146:17 size <integer_cst 0x7fd97dd04768 160> unit-size <integer_cst 0x7fd97dd04750 20>
    align:8 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97dd2b1b0 mode>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7fd97dd2b240 sha1
    type <array_type 0x7fd97dd1a9d8
        type <integer_type 0x7fd97e20a348 unsigned char public unsigned QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97e1f5cd8 0> max <integer_cst 0x7fd97e1f5c78 255>
            pointer_to_this <pointer_type 0x7fd97e2d9930>>
        BLK
        size <integer_cst 0x7fd97dd04768 constant 160>
        unit-size <integer_cst 0x7fd97dd04750 constant 20>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7fd97dd14b28 type <integer_type 0x7fd97e20a000 sizetype>
            DI
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5be8 0> max <integer_cst 0x7fd97dd04870 19>>
        pointer_to_this <pointer_type 0x7fd97dd1adc8>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:146:17 size <integer_cst 0x7fd97dd04768 160> unit-size <integer_cst 0x7fd97dd04750 20>
    align:8 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97dd2b1b0 mode>>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_89 = VDEF <.MEM_70>
_20 = get_sha1_hex (_19, &sha1);
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                     ^
this stmt call this function :get_sha1_hex
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_89 = VDEF <.MEM_70>
_20 = get_sha1_hex (_19, &sha1);
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
this stmt call this function :get_sha1_hex
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fdc60
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _20 = get_sha1_hex (_19, &sha1);
    version:20>
 <ssa_name 0x7fd97e1fdc60
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _20 = get_sha1_hex (_19, &sha1);
    version:20>

 ================== pre trace ptable ================== 
trace fucntion name:get_sha1_hex 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fdc60
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _20 = get_sha1_hex (_19, &sha1);
    version:20>
is Other function get_sha1_hex
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_89 = VDEF <.MEM_70>
_20 = get_sha1_hex (_19, &sha1);
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
this stmt call this function :get_sha1_hex
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fdc60
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _20 = get_sha1_hex (_19, &sha1);
    version:20>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd313f0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_66 = ptr;
    version:66
    ptr-info 0x7fd97dd25ca8>
 <ssa_name 0x7fd97dd313f0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_66 = ptr;
    version:66
    ptr-info 0x7fd97dd25ca8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd313f0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_66 = ptr;
    version:66
    ptr-info 0x7fd97dd25ca8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: use location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
this stmt call this function :unquote_c_style
trace fucntion name:unquote_c_style 
[40;44m =======trace_function_path unquote_c_style  function_call count: 4 level :0========  [0m
 <ssa_name 0x7fd97dd313f0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_66 = ptr;
    version:66
    ptr-info 0x7fd97dd25ca8>
[40;36m ======= node_fun:unquote_c_style========= [0m
[40;36m ======= find relate stmt with path_name ========= [0m
[40;36m ======= relate node_fun argument:path_name========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:83:20: warning: use location
   83 |         if (*quoted++ != '"')
      |                    ^
quoted_21 = quoted_20(D) + 1;
./benchmarks/git/double_free_2/git_df_2.c:83:20: warning: use location
quoted_21

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:path_name========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
quoted_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:path_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:path_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
*endp_34(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:path_name========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
quoted_25

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:path_name========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
quoted_30

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;46m =======add node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;46m =======add node_fun stack:strbuf_add========= [0m
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fd97dd313f0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_66 = ptr;
    version:66
    ptr-info 0x7fd97dd25ca8>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with path_name ========= [0m
[40;36m ======= relate node_fun argument:path_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:path_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :2========  [0m
 <ssa_name 0x7fd97dd313f0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_66 = ptr;
    version:66
    ptr-info 0x7fd97dd25ca8>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with path_name ========= [0m
[40;36m ======= relate node_fun argument:path_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :3========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd313f0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_66 = ptr;
    version:66
    ptr-info 0x7fd97dd25ca8>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with path_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;46m =======add node_fun stack:strcspn========= [0m

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_22 = *path_name_66;
./benchmarks/git/double_free_2/git_df_2.c:192:50: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd313f0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_66 = ptr;
    version:66
    ptr-info 0x7fd97dd25ca8>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_98 = VDEF <.MEM_97>
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_100 = VDEF <.MEM_94>
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_94>
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:5 [0m
[40;31m  	possible double free [rigorous]:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>

 ================== pre trace ptable ================== 
trace fucntion name:unquote_c_style 
[40;44m =======trace_function_path unquote_c_style  function_call count: 4 level :888========  [0m
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
[40;36m ======= node_fun:unquote_c_style========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;46m =======add node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;46m =======add node_fun stack:strbuf_add========= [0m
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :889========  [0m
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :890========  [0m
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :891========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;46m =======add node_fun stack:strcspn========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
is Other function unquote_c_style
 
 Start check Pointer Collect  

======================================================================
strbuf_release (&uq);
./benchmarks/git/double_free_2/git_df_2.c:229:9: warning: use location
  229 |         strbuf_release(&uq);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location
this stmt have mutiple branch ---strbuf_release-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:2 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:2 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:2 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:2 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:2 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:2 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: use location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
this stmt call this function :unquote_c_style
trace fucntion name:unquote_c_style 
[40;44m =======trace_function_path unquote_c_style  function_call count: 4 level :0========  [0m
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
[40;36m ======= node_fun:unquote_c_style========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;46m =======add node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;46m =======add node_fun stack:strbuf_add========= [0m
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :2========  [0m
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :3========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;46m =======add node_fun stack:strcspn========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_22 = *path_name_66;
./benchmarks/git/double_free_2/git_df_2.c:192:50: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location

===== possiable asias =====
# .MEM_82 = VDEF <.MEM_81>
strbuf_release (&uq);
./benchmarks/git/double_free_2/git_df_2.c:229:9: warning: use location
  229 |         strbuf_release(&uq);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_82 = VDEF <.MEM_81>
strbuf_release (&uq);
./benchmarks/git/double_free_2/git_df_2.c:229:9: warning: use location
  229 |         strbuf_release(&uq);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
# .MEM_82 = VDEF <.MEM_81>
strbuf_release (&uq);
./benchmarks/git/double_free_2/git_df_2.c:229:9: warning: use location
  229 |         strbuf_release(&uq);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_82 = VDEF <.MEM_81>
strbuf_release (&uq);
./benchmarks/git/double_free_2/git_df_2.c:229:9: warning: free in this location

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_98 = VDEF <.MEM_97>
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_100 = VDEF <.MEM_94>
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_94>
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:6 [0m
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;31m    this function with other function alias that other function return value is heap-object [0m
[40;31m  	possible double free :6 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd31168
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
    version:37
    ptr-info 0x7fd97dd25c60>
 <ssa_name 0x7fd97dd31168
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
    version:37
    ptr-info 0x7fd97dd25c60>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd31168
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
    version:37
    ptr-info 0x7fd97dd25c60>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_32 != path_name_37)
./benchmarks/git/double_free_2/git_df_2.c:221:20: warning: use location
  221 |                 if (path_name != ptr)
      |                    ^
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd31168
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
    version:37
    ptr-info 0x7fd97dd25c60>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fdd80
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _24 = verify_path (path_name_37);
    version:24>
 <ssa_name 0x7fd97e1fdd80
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _24 = verify_path (path_name_37);
    version:24>

 ================== pre trace ptable ================== 
trace fucntion name:verify_path 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fdd80
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _24 = verify_path (path_name_37);
    version:24>
is Other function verify_path
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fdd80
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _24 = verify_path (path_name_37);
    version:24>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7fd97dd2db68
    type <array_type 0x7fd97dd1b348
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        BLK
        size <integer_cst 0x7fd97dd049d8 constant 144>
        unit-size <integer_cst 0x7fd97dd049c0 constant 18>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7fd97dd1b2a0 type <integer_type 0x7fd97e20a000 sizetype>
            DI
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5be8 0> max <integer_cst 0x7fd97dd049a8 17>>
        pointer_to_this <pointer_type 0x7fd97dd1b3f0>>
    readonly constant static "Ignoring path %s\012\000">

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fde10
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _26 = remove_file_from_cache (path_name_37);
    version:26>
 <ssa_name 0x7fd97e1fde10
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _26 = remove_file_from_cache (path_name_37);
    version:26>

 ================== pre trace ptable ================== 
trace fucntion name:remove_file_from_cache 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fde10
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _26 = remove_file_from_cache (path_name_37);
    version:26>
is Other function remove_file_from_cache
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_100 = VDEF <.MEM_94>
_26 = remove_file_from_cache (path_name_37);
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fde10
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _26 = remove_file_from_cache (path_name_37);
    version:26>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd31288
    type <integer_type 0x7fd97e20a690 unsigned int public unsigned SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a690 precision:32 min <integer_cst 0x7fd97e1f5e28 0> max <integer_cst 0x7fd97e1f5de0 4294967295>
        pointer_to_this <pointer_type 0x7fd97e216690>>
    var <var_decl 0x7fd97dd2b1b0 mode>
    def_stmt mode_58 = (unsigned int) ul_57;
    version:58>
 <ssa_name 0x7fd97dd31288
    type <integer_type 0x7fd97e20a690 unsigned int public unsigned SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a690 precision:32 min <integer_cst 0x7fd97e1f5e28 0> max <integer_cst 0x7fd97e1f5de0 4294967295>
        pointer_to_this <pointer_type 0x7fd97e216690>>
    var <var_decl 0x7fd97dd2b1b0 mode>
    def_stmt mode_58 = (unsigned int) ul_57;
    version:58>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd31288
    type <integer_type 0x7fd97e20a690 unsigned int public unsigned SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a690 precision:32 min <integer_cst 0x7fd97e1f5e28 0> max <integer_cst 0x7fd97e1f5de0 4294967295>
        pointer_to_this <pointer_type 0x7fd97e216690>>
    var <var_decl 0x7fd97dd2b1b0 mode>
    def_stmt mode_58 = (unsigned int) ul_57;
    version:58>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd31288
    type <integer_type 0x7fd97e20a690 unsigned int public unsigned SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a690 precision:32 min <integer_cst 0x7fd97e1f5e28 0> max <integer_cst 0x7fd97e1f5de0 4294967295>
        pointer_to_this <pointer_type 0x7fd97e216690>>
    var <var_decl 0x7fd97dd2b1b0 mode>
    def_stmt mode_58 = (unsigned int) ul_57;
    version:58>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd311b0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd2b090 stage>
    def_stmt stage_38 = PHI <stage_60(14), 0(15)>
    version:38>
 <ssa_name 0x7fd97dd311b0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd2b090 stage>
    def_stmt stage_38 = PHI <stage_60(14), 0(15)>
    version:38>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd311b0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd2b090 stage>
    def_stmt stage_38 = PHI <stage_60(14), 0(15)>
    version:38>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd311b0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd2b090 stage>
    def_stmt stage_38 = PHI <stage_60(14), 0(15)>
    version:38>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fdf78
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
    version:31>
 <ssa_name 0x7fd97e1fdf78
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
    version:31>

 ================== pre trace ptable ================== 
trace fucntion name:add_cacheinfo 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fdf78
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
    version:31>
is Other function add_cacheinfo
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                     ^
this stmt call this function :get_sha1_hex
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fdf78
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
    version:31>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd31090
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _34 = stdin;
    version:34
    ptr-info 0x7fd97dd25c30>
 <ssa_name 0x7fd97dd31090
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _34 = stdin;
    version:34
    ptr-info 0x7fd97dd25c30>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd31090
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _34 = stdin;
    version:34
    ptr-info 0x7fd97dd25c30>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                ^
this stmt call this function :strbuf_getline
trace fucntion name:strbuf_getline 
[40;44m =======trace_function_path strbuf_getline  function_call count: 4 level :0========  [0m
 <ssa_name 0x7fd97dd31090
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _34 = stdin;
    version:34
    ptr-info 0x7fd97dd25c30>
[40;36m ======= node_fun:strbuf_getline========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^
_8 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^
_10 = _8 + _9;
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^
*_10 = 0;
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
*_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;46m =======add node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd31090
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _34 = stdin;
    version:34
    ptr-info 0x7fd97dd25c30>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd31090
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _34 = stdin;
    version:34
    ptr-info 0x7fd97dd25c30>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;46m =======add node_fun stack:strbuf_reset========= [0m
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fd97dd31090
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _34 = stdin;
    version:34
    ptr-info 0x7fd97dd25c30>
[40;36m ======= node_fun:strbuf_reset========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;46m =======add node_fun stack:feof========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_35 != -1)
./benchmarks/git/double_free_2/git_df_2.c:143:62: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                                                              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd31090
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _34 = stdin;
    version:34
    ptr-info 0x7fd97dd25c30>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location

===== possiable asias =====
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: free in this location

===== possiable asias =====
if (_35 != -1)
./benchmarks/git/double_free_2/git_df_2.c:143:62: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                                                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
if (_35 != -1)
./benchmarks/git/double_free_2/git_df_2.c:143:62: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                                                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd311f8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <parm_decl 0x7fd97dd1f100 line_termination>
    def_stmt GIMPLE_NOP
    version:49>
 <ssa_name 0x7fd97dd311f8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <parm_decl 0x7fd97dd1f100 line_termination>
    def_stmt GIMPLE_NOP
    version:49>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd311f8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <parm_decl 0x7fd97dd1f100 line_termination>
    def_stmt GIMPLE_NOP
    version:49>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                ^
this stmt call this function :strbuf_getline
trace fucntion name:strbuf_getline 
[40;44m =======trace_function_path strbuf_getline  function_call count: 4 level :0========  [0m
 <ssa_name 0x7fd97dd311f8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <parm_decl 0x7fd97dd1f100 line_termination>
    def_stmt GIMPLE_NOP
    version:49>
[40;36m ======= node_fun:strbuf_getline========= [0m
[40;36m ======= find relate stmt with line_termination ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;46m =======add node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd311f8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <parm_decl 0x7fd97dd1f100 line_termination>
    def_stmt GIMPLE_NOP
    version:49>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with line_termination ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd311f8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <parm_decl 0x7fd97dd1f100 line_termination>
    def_stmt GIMPLE_NOP
    version:49>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with line_termination ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;46m =======add node_fun stack:strbuf_reset========= [0m
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fd97dd311f8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <parm_decl 0x7fd97dd1f100 line_termination>
    def_stmt GIMPLE_NOP
    version:49>
[40;36m ======= node_fun:strbuf_reset========= [0m
[40;36m ======= find relate stmt with line_termination ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;46m =======add node_fun stack:feof========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_35 != -1)
./benchmarks/git/double_free_2/git_df_2.c:143:62: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                                                              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd311f8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <parm_decl 0x7fd97dd1f100 line_termination>
    def_stmt GIMPLE_NOP
    version:49>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location

===== possiable asias =====
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: free in this location

===== possiable asias =====
if (_35 != -1)
./benchmarks/git/double_free_2/git_df_2.c:143:62: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                                                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
if (_35 != -1)
./benchmarks/git/double_free_2/git_df_2.c:143:62: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                                                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>

 ================== pre trace ptable ================== 
trace fucntion name:strbuf_getline 
[40;44m =======trace_function_path strbuf_getline  function_call count: 4 level :888========  [0m
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
[40;36m ======= node_fun:strbuf_getline========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;46m =======add node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :889========  [0m
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :890========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;46m =======add node_fun stack:strbuf_reset========= [0m
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :889========  [0m
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
[40;36m ======= node_fun:strbuf_reset========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;46m =======add node_fun stack:feof========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
is Other function strbuf_getline
 
 Start check Pointer Collect  

======================================================================
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                ^
this stmt call this function :strbuf_getline
trace fucntion name:strbuf_getline 
[40;44m =======trace_function_path strbuf_getline  function_call count: 4 level :0========  [0m
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
[40;36m ======= node_fun:strbuf_getline========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;46m =======add node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;46m =======add node_fun stack:strbuf_reset========= [0m
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
[40;36m ======= node_fun:strbuf_reset========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;46m =======add node_fun stack:feof========= [0m

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_35 != -1)
./benchmarks/git/double_free_2/git_df_2.c:143:62: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                                                              ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: free in this location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                ^

===== possiable asias =====
# .MEM_81 = VDEF <.MEM_80>
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
# .MEM_81 = VDEF <.MEM_80>
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: free in this location

===== possiable asias =====
if (_35 != -1)
./benchmarks/git/double_free_2/git_df_2.c:143:62: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                                                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
if (_35 != -1)
./benchmarks/git/double_free_2/git_df_2.c:143:62: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                                                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:5 [0m
[40;31m  	possible double free [rigorous]:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;31m    this function with other function alias that other function return value is heap-object [0m
[40;31m  	possible double free :5 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:read_index_info========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_4 = VDEF <.MEM_3(D)>
read_index_info (line_2(D));
read_index_info (line_2(D));
./benchmarks/git/double_free_2/git_df_2.c:235:5: warning: use location
  235 |     read_index_info(line);
      |     ^
this stmt call this function :read_index_info
trace fucntion name:read_index_info 
[40;44m =======trace_function_path read_index_info  function_call count: 16 level :0========  [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
[40;31m  find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:read_index_info========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_release========= [0m
[40;46m =======add node_fun stack:strbuf_release========= [0m
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :1========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:strbuf_getline========= [0m
[40;46m =======add node_fun stack:strbuf_getline========= [0m
[40;44m =======trace_function_path strbuf_getline  function_call count: 4 level :1========  [0m
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:strbuf_getline========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;46m =======add node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :2========  [0m
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :3========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;46m =======add node_fun stack:strbuf_reset========= [0m
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :2========  [0m
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:strbuf_reset========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;46m =======add node_fun stack:feof========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:add_cacheinfo========= [0m
[40;46m =======add node_fun stack:add_cacheinfo========= [0m
[40;42m =======pre add _ fucntion:remove_file_from_cache========= [0m
[40;46m =======add node_fun stack:remove_file_from_cache========= [0m
[40;42m =======pre add _ fucntion:fprintf========= [0m
[40;46m =======add node_fun stack:fprintf========= [0m
[40;42m =======pre add _ fucntion:verify_path========= [0m
[40;46m =======add node_fun stack:verify_path========= [0m
[40;42m =======pre add _ fucntion:unquote_c_style========= [0m
[40;46m =======add node_fun stack:unquote_c_style========= [0m
[40;44m =======trace_function_path unquote_c_style  function_call count: 4 level :1========  [0m
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:unquote_c_style========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;46m =======add node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;46m =======add node_fun stack:strbuf_add========= [0m
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :2========  [0m
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :3========  [0m
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :4========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;46m =======add node_fun stack:strcspn========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;46m =======add node_fun stack:strbuf_reset========= [0m
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:strbuf_reset========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:get_sha1_hex========= [0m
[40;46m =======add node_fun stack:get_sha1_hex========= [0m
[40;42m =======pre add _ fucntion:strchr========= [0m
[40;46m =======add node_fun stack:strchr========= [0m
[40;42m =======pre add _ fucntion:__errno_location========= [0m
[40;46m =======add node_fun stack:__errno_location========= [0m
[40;42m =======pre add _ fucntion:strtoul========= [0m
[40;46m =======add node_fun stack:strtoul========= [0m
[40;44m =======trace_function_path strtoul  function_call count: 0 level :1========  [0m
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_init========= [0m
[40;46m =======add node_fun stack:strbuf_init========= [0m

 ================== trace ================== 
trace fucntion free:10 
# .MEM_4 = VDEF <.MEM_3(D)>
read_index_info (line_2(D));
read_index_info (line_2(D));
./benchmarks/git/double_free_2/git_df_2.c:235:5: warning: use location
  235 |     read_index_info(line);
      |     ^
this stmt call this function :read_index_info
trace fucntion name:read_index_info 
[40;44m =======trace_function_path read_index_info  function_call count: 16 level :0========  [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
[40;31m  find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:read_index_info========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_release========= [0m
[40;46m =======add node_fun stack:strbuf_release========= [0m
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :1========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:strbuf_getline========= [0m
[40;46m =======add node_fun stack:strbuf_getline========= [0m
[40;44m =======trace_function_path strbuf_getline  function_call count: 4 level :1========  [0m
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:strbuf_getline========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;46m =======add node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :2========  [0m
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :3========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;46m =======add node_fun stack:strbuf_reset========= [0m
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :2========  [0m
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:strbuf_reset========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;46m =======add node_fun stack:feof========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:add_cacheinfo========= [0m
[40;46m =======add node_fun stack:add_cacheinfo========= [0m
[40;42m =======pre add _ fucntion:remove_file_from_cache========= [0m
[40;46m =======add node_fun stack:remove_file_from_cache========= [0m
[40;42m =======pre add _ fucntion:fprintf========= [0m
[40;46m =======add node_fun stack:fprintf========= [0m
[40;42m =======pre add _ fucntion:verify_path========= [0m
[40;46m =======add node_fun stack:verify_path========= [0m
[40;42m =======pre add _ fucntion:unquote_c_style========= [0m
[40;46m =======add node_fun stack:unquote_c_style========= [0m
[40;44m =======trace_function_path unquote_c_style  function_call count: 4 level :1========  [0m
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:unquote_c_style========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;46m =======add node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;46m =======add node_fun stack:strbuf_add========= [0m
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :2========  [0m
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :3========  [0m
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :4========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;46m =======add node_fun stack:strcspn========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;46m =======add node_fun stack:strbuf_reset========= [0m
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:strbuf_reset========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:get_sha1_hex========= [0m
[40;46m =======add node_fun stack:get_sha1_hex========= [0m
[40;42m =======pre add _ fucntion:strchr========= [0m
[40;46m =======add node_fun stack:strchr========= [0m
[40;42m =======pre add _ fucntion:__errno_location========= [0m
[40;46m =======add node_fun stack:__errno_location========= [0m
[40;42m =======pre add _ fucntion:strtoul========= [0m
[40;46m =======add node_fun stack:strtoul========= [0m
[40;44m =======trace_function_path strtoul  function_call count: 0 level :1========  [0m
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with line ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_init========= [0m
[40;46m =======add node_fun stack:strbuf_init========= [0m

 ================== trace ================== 
trace fucntion free:20 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fd5e8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97ea9dcf0 line>
    def_stmt GIMPLE_NOP
    version:2>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:20 [0m
[40;31m  	possible double free [rigorous]:20 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:20 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
[40;44m =======node_fun:read_index_info========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path read_index_info  function_call count: 16 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_release========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_release  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;33m =======POP node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:strbuf_release========= [0m
[40;42m =======start_check_funciton:strbuf_release========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46438
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fd97dd25f78>
 <ssa_name 0x7fd97dd46438
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fd97dd25f78>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd46438
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fd97dd25f78>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
memset (sb_3(D), 0, 24);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: use location
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^
this stmt call this function :memset
trace fucntion name:memset 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_3(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
   15 |     free(sb->buf);
      |            ^
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
this stmt call this function :free

 ================== find free stmt ================== 
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46438
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fd97dd25f78>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location

 ================== Start Use after free Check ================== 

============================================================
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: free in this location

===== possiable asias =====
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: use location
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: free in this location
   15 |     free(sb->buf);
      |     ^

===== possiable asias =====
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: use location
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================
[40;33m =======POP node_fun stack:strbuf_release========= [0m
[40;42m =======pre add _ fucntion:strbuf_getline========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_getline  function_call count: 4 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;33m =======POP node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_grow  function_call count: 5 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46948
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fd97dd04a80>
 <ssa_name 0x7fd97dd46948
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fd97dd04a80>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:strbuf_grow========= [0m
[40;42m =======start_check_funciton:strbuf_grow========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
if (_11 < _14)
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_nr 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>
is Other function alloc_nr
 
 Start check Pointer Collect  

======================================================================
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
if (_11 < _14)
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:2 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================

 Expand conflict 
 The same function may have multiple branches :alloc_nr
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_nr 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
is Other function alloc_nr
 
 Start check Pointer Collect  

======================================================================
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:2 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================

 Expand conflict 
 The same function may have multiple branches :alloc_nr
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_38 = VDEF <.MEM_31>
_22 = st_mult (1, _21);
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>

 ================== pre trace ptable ================== 
trace fucntion name:st_mult 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
is Other function st_mult
 
 Start check Pointer Collect  

======================================================================
# .MEM_38 = VDEF <.MEM_31>
_22 = st_mult (1, _21);
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>

 ================== pre trace ptable ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# .MEM_33 = VDEF <.MEM_32>
exit (1);
./benchmarks/git/double_free_2/../git.h:422:25: warning: use location
  422 |                         die("Out of memory, realloc failed%s", "");
      |                         ^
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
is Other function xrealloc
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;31m    this function with other function alias that other function return value is heap-object [0m
[40;31m  	possible double free :4 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:strbuf_grow========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_reset  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre_check_funciton:strbuf_reset========= [0m
[40;42m =======start_check_funciton:strbuf_reset========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
strbuf_setlen (sb_4(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:29:17: warning: use location
   29 |                 strbuf_setlen(sb, 0);
      |                 ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_4(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:28:15: warning: use location
   28 |         if (sb->len)
      |               ^
if (_1 != 0)
./benchmarks/git/double_free_2/git_df_2.c:28:12: warning: use location
   28 |         if (sb->len)
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_reset========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;33m =======POP node_fun stack:feof========= [0m
[40;42m =======pre_check_funciton:strbuf_getline========= [0m
[40;42m =======start_check_funciton:strbuf_getline========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
is Other function 
 
 Start check Pointer Collect  

======================================================================
_9 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:56:19: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                   ^
_10 = _8 + _9;
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^
*_10 = 0;
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^
_8 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^
_7 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:53:28: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                            ^
if (_7 == 0)
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_3 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:51:27: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                           ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :strbuf_grow
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: use location
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_30 = VDEF <.MEM_29>
strbuf_grow (sb_15(D), 1);
./benchmarks/git/double_free_2/git_df_2.c:50:17: warning: use location
   50 |                 strbuf_grow(sb, 1);
      |                 ^
strbuf_reset (sb_15(D));
./benchmarks/git/double_free_2/git_df_2.c:46:9: warning: use location
   46 |         strbuf_reset(sb);
      |         ^
this stmt call this function :strbuf_reset
trace fucntion name:strbuf_reset 
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
[40;36m ======= node_fun:strbuf_reset========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: use location
   42 |         strbuf_grow(sb, 0);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: use location
   42 |         strbuf_grow(sb, 0);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:56:19: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:56:19: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
_10 = _8 + _9;
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
_10 = _8 + _9;
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:53:28: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:53:28: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
if (_7 == 0)
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
if (_7 == 0)
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_30>
_3 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:51:27: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_30>
_3 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:51:27: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_30>
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_30>
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
./benchmarks/git/double_free_2/git_df_2.c:46:9: warning: use location
   46 |         strbuf_reset(sb);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
./benchmarks/git/double_free_2/git_df_2.c:46:9: warning: use location
   46 |         strbuf_reset(sb);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d000
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
    var <parm_decl 0x7fd97dd1fd80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fd97dd25e88>
 <ssa_name 0x7fd97dd3d000
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
    var <parm_decl 0x7fd97dd1fd80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fd97dd25e88>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d000
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
    var <parm_decl 0x7fd97dd1fd80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fd97dd25e88>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_21 = fgetc (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:47:22: warning: use location
   47 |         while ((ch = fgetc(fp)) != EOF) {
      |                      ^
this stmt call this function :fgetc
trace fucntion name:fgetc 

 ================== trace ================== 
trace fucntion free:0 
if (ch_21 == -1)
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = (char) ch_21;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_21 == term_22(D))
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
   48 |                 if (ch == term)
      |                    ^
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
_1 = feof (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:43:13: warning: use location
   43 |         if (feof(fp))
      |             ^
this stmt call this function :feof
trace fucntion name:feof 

 ================== trace ================== 
trace fucntion free:0 
if (_1 != 0)
./benchmarks/git/double_free_2/git_df_2.c:43:12: warning: use location
   43 |         if (feof(fp))
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d000
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
    var <parm_decl 0x7fd97dd1fd80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fd97dd25e88>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd37cf0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _1 = feof (fp_17(D));
    version:1>
 <ssa_name 0x7fd97dd37cf0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _1 = feof (fp_17(D));
    version:1>

 ================== pre trace ptable ================== 
trace fucntion name:feof 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd37cf0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _1 = feof (fp_17(D));
    version:1>
is Other function feof
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_21 = fgetc (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:47:22: warning: use location
   47 |         while ((ch = fgetc(fp)) != EOF) {
      |                      ^
this stmt call this function :fgetc
trace fucntion name:fgetc 

 ================== trace ================== 
trace fucntion free:0 
if (ch_21 == -1)
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = (char) ch_21;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_21 == term_22(D))
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
   48 |                 if (ch == term)
      |                    ^
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
_1 = feof (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:43:13: warning: use location
   43 |         if (feof(fp))
      |             ^
this stmt call this function :feof
trace fucntion name:feof 

 ================== trace ================== 
trace fucntion free:0 
if (_1 != 0)
./benchmarks/git/double_free_2/git_df_2.c:43:12: warning: use location
   43 |         if (feof(fp))
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd37cf0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _1 = feof (fp_17(D));
    version:1>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d048
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35630 ch>
    def_stmt ch_21 = fgetc (fp_17(D));
    version:21>
 <ssa_name 0x7fd97dd3d048
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35630 ch>
    def_stmt ch_21 = fgetc (fp_17(D));
    version:21>

 ================== pre trace ptable ================== 
trace fucntion name:fgetc 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d048
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35630 ch>
    def_stmt ch_21 = fgetc (fp_17(D));
    version:21>
is Other function fgetc
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_29 = VDEF <.MEM_23>
ch_21 = fgetc (fp_17(D));
ch_21 = fgetc (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:47:22: warning: use location
   47 |         while ((ch = fgetc(fp)) != EOF) {
      |                      ^
this stmt call this function :fgetc
trace fucntion name:fgetc 

 ================== trace ================== 
trace fucntion free:0 
if (ch_21 == -1)
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = (char) ch_21;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_21 == term_22(D))
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
   48 |                 if (ch == term)
      |                    ^
_1 = feof (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:43:13: warning: use location
   43 |         if (feof(fp))
      |             ^
this stmt call this function :feof
trace fucntion name:feof 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d048
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35630 ch>
    def_stmt ch_21 = fgetc (fp_17(D));
    version:21>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:strbuf_getline========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:add_cacheinfo========= [0m
[40;33m =======POP node_fun stack:add_cacheinfo========= [0m
[40;42m =======pre add _ fucntion:remove_file_from_cache========= [0m
[40;33m =======POP node_fun stack:remove_file_from_cache========= [0m
[40;42m =======pre add _ fucntion:fprintf========= [0m
[40;33m =======POP node_fun stack:fprintf========= [0m
[40;42m =======pre add _ fucntion:verify_path========= [0m
[40;33m =======POP node_fun stack:verify_path========= [0m
[40;42m =======pre add _ fucntion:unquote_c_style========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path unquote_c_style  function_call count: 4 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;33m =======POP node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_add  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_grow  function_call count: 5 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :4========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46948
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fd97dd04a80>
 <ssa_name 0x7fd97dd46948
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fd97dd04a80>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:strbuf_grow========= [0m
[40;42m =======start_check_funciton:strbuf_grow========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
if (_11 < _14)
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_nr 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>
is Other function alloc_nr
 
 Start check Pointer Collect  

======================================================================
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
if (_11 < _14)
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:2 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================

 Expand conflict 
 The same function may have multiple branches :alloc_nr
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_nr 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
is Other function alloc_nr
 
 Start check Pointer Collect  

======================================================================
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:2 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================

 Expand conflict 
 The same function may have multiple branches :alloc_nr
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_38 = VDEF <.MEM_31>
_22 = st_mult (1, _21);
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>

 ================== pre trace ptable ================== 
trace fucntion name:st_mult 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
is Other function st_mult
 
 Start check Pointer Collect  

======================================================================
# .MEM_38 = VDEF <.MEM_31>
_22 = st_mult (1, _21);
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>

 ================== pre trace ptable ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# .MEM_33 = VDEF <.MEM_32>
exit (1);
./benchmarks/git/double_free_2/../git.h:422:25: warning: use location
  422 |                         die("Out of memory, realloc failed%s", "");
      |                         ^
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
is Other function xrealloc
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;31m    this function with other function alias that other function return value is heap-object [0m
[40;31m  	possible double free :4 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:strbuf_grow========= [0m
[40;42m =======pre_check_funciton:strbuf_add========= [0m
[40;42m =======start_check_funciton:strbuf_add========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d480
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fd97dd25eb8>
 <ssa_name 0x7fd97dd3d480
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fd97dd25eb8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d480
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fd97dd25eb8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d480
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fd97dd25eb8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d5e8
    type <pointer_type 0x7fd97e211150
        type <void_type 0x7fd97e2110a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211150>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1ff00 data>
    def_stmt GIMPLE_NOP
    version:10
    ptr-info 0x7fd97dd25ee8>
 <ssa_name 0x7fd97dd3d5e8
    type <pointer_type 0x7fd97e211150
        type <void_type 0x7fd97e2110a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211150>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1ff00 data>
    def_stmt GIMPLE_NOP
    version:10
    ptr-info 0x7fd97dd25ee8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d5e8
    type <pointer_type 0x7fd97e211150
        type <void_type 0x7fd97e2110a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211150>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1ff00 data>
    def_stmt GIMPLE_NOP
    version:10
    ptr-info 0x7fd97dd25ee8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d5e8
    type <pointer_type 0x7fd97e211150
        type <void_type 0x7fd97e2110a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211150>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1ff00 data>
    def_stmt GIMPLE_NOP
    version:10
    ptr-info 0x7fd97dd25ee8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:strbuf_add========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;33m =======POP node_fun stack:strcspn========= [0m
[40;42m =======pre_check_funciton:unquote_c_style========= [0m
[40;42m =======start_check_funciton:unquote_c_style========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_35>
len_22 = strcspn (quoted_11, "\"\\");
len_22 = strcspn (quoted_11, "\"\\");
./benchmarks/git/double_free_2/git_df_2.c:87:23: warning: use location
   87 |                 len = strcspn(quoted, "\"\\");
      |                       ^
this stmt call this function :strcspn
trace fucntion name:strcspn 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_9 = MEM[(const char *)quoted_24 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:35: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_31 = (int) _9;
./benchmarks/git/double_free_2/git_df_2.c:120:33: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ac_32 = _10 | ac_29;
./benchmarks/git/double_free_2/git_df_2.c:122:44: warning: use location
  122 |                                         ac |= (ch - '0');
      |                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
lto1: warning: use location
this stmt have mutiple branch ---strcspn-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt call this function :strbuf_addch
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt call this function :strbuf_add
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
[40;36m ======= relate node_fun argument:quoted========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:quoted========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
[40;36m ======= relate node_fun argument:quoted========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_31 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_31 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
lto1: warning: use location
this stmt have mutiple branch ---strbuf_add-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
lto1: warning: use location
this stmt have mutiple branch ---strbuf_add-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = MEM[(const char *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:35: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_28 = (int) _6;
./benchmarks/git/double_free_2/git_df_2.c:117:33: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = ch_28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:119:52: warning: use location
  119 |                                         ac |= ((ch - '0') << 3);
      |                                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_4 = MEM[(const char *)quoted_24 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:31: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = *quoted_24;
./benchmarks/git/double_free_2/git_df_2.c:91:25: warning: use location
   91 |                 switch (*quoted++) {
      |                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_38>
_9 = MEM[(const char *)quoted_24 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:35: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ch_31 = (int) _9;
./benchmarks/git/double_free_2/git_df_2.c:120:33: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ac_32 = _10 | ac_29;
./benchmarks/git/double_free_2/git_df_2.c:122:44: warning: use location
  122 |                                         ac |= (ch - '0');
      |                                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
if (ch_31 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
if (ch_31 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location

===== possiable asias =====
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_38>
_6 = MEM[(const char *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:35: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ch_28 = (int) _6;
./benchmarks/git/double_free_2/git_df_2.c:117:33: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
_7 = ch_28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:119:52: warning: use location
  119 |                                         ac |= ((ch - '0') << 3);
      |                                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_38>
_4 = MEM[(const char *)quoted_24 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:31: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_38>
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_38>
_2 = *quoted_24;
./benchmarks/git/double_free_2/git_df_2.c:91:25: warning: use location
   91 |                 switch (*quoted++) {
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7fd97dd25738
    type <array_type 0x7fd97dd1a7e0
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        BLK
        size <integer_cst 0x7fd97e213060 constant 24>
        unit-size <integer_cst 0x7fd97dd04948 constant 3>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7fd97dd1a738 type <integer_type 0x7fd97e20a000 sizetype>
            DI
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5be8 0> max <integer_cst 0x7fd97e1f5d80 2>>
        pointer_to_this <pointer_type 0x7fd97dd1a888>>
    readonly constant static ""\\000">

dot graph START

======================================================================
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>

 ================== pre trace ptable ================== 
trace fucntion name:strcspn 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>
is Other function strcspn
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_35>
len_22 = strcspn (quoted_11, "\"\\");
len_22 = strcspn (quoted_11, "\"\\");
./benchmarks/git/double_free_2/git_df_2.c:87:23: warning: use location
   87 |                 len = strcspn(quoted, "\"\\");
      |                       ^
this stmt call this function :strcspn
trace fucntion name:strcspn 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_9 = MEM[(const char *)quoted_24 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:35: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_31 = (int) _9;
./benchmarks/git/double_free_2/git_df_2.c:120:33: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ac_32 = _10 | ac_29;
./benchmarks/git/double_free_2/git_df_2.c:122:44: warning: use location
  122 |                                         ac |= (ch - '0');
      |                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
lto1: warning: use location
this stmt have mutiple branch ---strcspn-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt call this function :strbuf_addch
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt call this function :strbuf_add
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_31 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_31 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
lto1: warning: use location
this stmt have mutiple branch ---strbuf_add-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = MEM[(const char *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:35: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_28 = (int) _6;
./benchmarks/git/double_free_2/git_df_2.c:117:33: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = ch_28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:119:52: warning: use location
  119 |                                         ac |= ((ch - '0') << 3);
      |                                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_4 = MEM[(const char *)quoted_24 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:31: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = *quoted_24;
./benchmarks/git/double_free_2/git_df_2.c:91:25: warning: use location
   91 |                 switch (*quoted++) {
      |                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_38>
_9 = MEM[(const char *)quoted_24 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:35: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ch_31 = (int) _9;
./benchmarks/git/double_free_2/git_df_2.c:120:33: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ac_32 = _10 | ac_29;
./benchmarks/git/double_free_2/git_df_2.c:122:44: warning: use location
  122 |                                         ac |= (ch - '0');
      |                                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
if (ch_31 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
if (ch_31 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_38>
_6 = MEM[(const char *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:35: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ch_28 = (int) _6;
./benchmarks/git/double_free_2/git_df_2.c:117:33: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
_7 = ch_28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:119:52: warning: use location
  119 |                                         ac |= ((ch - '0') << 3);
      |                                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_38>
_4 = MEM[(const char *)quoted_24 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:31: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_38>
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_38>
_2 = *quoted_24;
./benchmarks/git/double_free_2/git_df_2.c:91:25: warning: use location
   91 |                 switch (*quoted++) {
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
is Other function 
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt call this function :strbuf_addch
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt call this function :strbuf_add
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
is Other function 
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt call this function :strbuf_addch
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt call this function :strbuf_add
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
this stmt call this function :strbuf_addch
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt call this function :strbuf_add
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with ch ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with ch ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ch ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt call this function :strbuf_addch
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt call this function :strbuf_add
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with oldlen ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with oldlen ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with oldlen ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:unquote_c_style========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_reset  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre_check_funciton:strbuf_reset========= [0m
[40;42m =======start_check_funciton:strbuf_reset========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
strbuf_setlen (sb_4(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:29:17: warning: use location
   29 |                 strbuf_setlen(sb, 0);
      |                 ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_4(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:28:15: warning: use location
   28 |         if (sb->len)
      |               ^
if (_1 != 0)
./benchmarks/git/double_free_2/git_df_2.c:28:12: warning: use location
   28 |         if (sb->len)
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_reset========= [0m
[40;42m =======pre add _ fucntion:get_sha1_hex========= [0m
[40;33m =======POP node_fun stack:get_sha1_hex========= [0m
[40;42m =======pre add _ fucntion:strchr========= [0m
[40;33m =======POP node_fun stack:strchr========= [0m
[40;42m =======pre add _ fucntion:__errno_location========= [0m
[40;33m =======POP node_fun stack:__errno_location========= [0m
[40;42m =======pre add _ fucntion:strtoul========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strtoul  function_call count: 0 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:strtoul========= [0m
[40;42m =======start_check_funciton:strtoul========= [0m
[40;33m =======POP node_fun stack:strtoul========= [0m
[40;42m =======pre add _ fucntion:strbuf_init========= [0m
[40;33m =======POP node_fun stack:strbuf_init========= [0m
[40;42m =======pre_check_funciton:read_index_info========= [0m
[40;42m =======start_check_funciton:read_index_info========= [0m

dot graph START

======================================================================
 <var_decl 0x7fd97dd2b000 buf
    type <record_type 0x7fd97dd17dc8 strbuf BLK
        size <integer_cst 0x7fd97e213078 constant 192>
        unit-size <integer_cst 0x7fd97e213048 constant 24>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8
        fields <field_decl 0x7fd97dd16428 alloc type <integer_type 0x7fd97dd0d9d8 size_t>
            unsigned DI ./benchmarks/git/double_free_2/../git.h:242:9
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 offset_align 128
            offset <integer_cst 0x7fd97e1f5be8 constant 0>
            bit-offset <integer_cst 0x7fd97e1f5c30 constant 0> context <record_type 0x7fd97dd17dc8 strbuf> chain <field_decl 0x7fd97dd16390 len>> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd17e70>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:138:16 size <integer_cst 0x7fd97e213078 192> unit-size <integer_cst 0x7fd97e213048 24>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97ea9df30 uq>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7fd97dd2b000 buf
    type <record_type 0x7fd97dd17dc8 strbuf BLK
        size <integer_cst 0x7fd97e213078 constant 192>
        unit-size <integer_cst 0x7fd97e213048 constant 24>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8
        fields <field_decl 0x7fd97dd16428 alloc type <integer_type 0x7fd97dd0d9d8 size_t>
            unsigned DI ./benchmarks/git/double_free_2/../git.h:242:9
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 offset_align 128
            offset <integer_cst 0x7fd97e1f5be8 constant 0>
            bit-offset <integer_cst 0x7fd97e1f5c30 constant 0> context <record_type 0x7fd97dd17dc8 strbuf> chain <field_decl 0x7fd97dd16390 len>> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd17e70>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:138:16 size <integer_cst 0x7fd97e213078 192> unit-size <integer_cst 0x7fd97e213048 24>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97ea9df30 uq>>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_78 = VDEF <.MEM_77(D)>
strbuf_init (&buf, 0);
strbuf_init (&buf, 0);
./benchmarks/git/double_free_2/git_df_2.c:141:9: warning: use location
  141 |         strbuf_init(&buf, 0);
      |         ^
this stmt call this function :strbuf_init
trace fucntion name:strbuf_init 

 ================== trace ================== 
trace fucntion free:0 
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <var_decl 0x7fd97dd2b000 buf
    type <record_type 0x7fd97dd17dc8 strbuf BLK
        size <integer_cst 0x7fd97e213078 constant 192>
        unit-size <integer_cst 0x7fd97e213048 constant 24>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8
        fields <field_decl 0x7fd97dd16428 alloc type <integer_type 0x7fd97dd0d9d8 size_t>
            unsigned DI ./benchmarks/git/double_free_2/../git.h:242:9
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 offset_align 128
            offset <integer_cst 0x7fd97e1f5be8 constant 0>
            bit-offset <integer_cst 0x7fd97e1f5c30 constant 0> context <record_type 0x7fd97dd17dc8 strbuf> chain <field_decl 0x7fd97dd16390 len>> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd17e70>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:138:16 size <integer_cst 0x7fd97e213078 192> unit-size <integer_cst 0x7fd97e213048 24>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97ea9df30 uq>>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with buf ========= [0m
[40;36m ======= relate node_fun argument:buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_release’:
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
   15 |     free(sb->buf);
      |            ^
_1 = sb_3(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&buf);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <var_decl 0x7fd97dd2b000 buf
    type <record_type 0x7fd97dd17dc8 strbuf BLK
        size <integer_cst 0x7fd97e213078 constant 192>
        unit-size <integer_cst 0x7fd97e213048 constant 24>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8
        fields <field_decl 0x7fd97dd16428 alloc type <integer_type 0x7fd97dd0d9d8 size_t>
            unsigned DI ./benchmarks/git/double_free_2/../git.h:242:9
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 offset_align 128
            offset <integer_cst 0x7fd97e1f5be8 constant 0>
            bit-offset <integer_cst 0x7fd97e1f5c30 constant 0> context <record_type 0x7fd97dd17dc8 strbuf> chain <field_decl 0x7fd97dd16390 len>> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd17e70>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:138:16 size <integer_cst 0x7fd97e213078 192> unit-size <integer_cst 0x7fd97e213048 24>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97ea9df30 uq>>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with buf ========= [0m
[40;36m ======= relate node_fun argument:buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_release’:
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
   15 |     free(sb->buf);
      |            ^
_1 = sb_3(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <var_decl 0x7fd97ea9df30 uq
    type <record_type 0x7fd97dd17dc8 strbuf BLK
        size <integer_cst 0x7fd97e213078 constant 192>
        unit-size <integer_cst 0x7fd97e213048 constant 24>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8
        fields <field_decl 0x7fd97dd16428 alloc type <integer_type 0x7fd97dd0d9d8 size_t>
            unsigned DI ./benchmarks/git/double_free_2/../git.h:242:9
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 offset_align 128
            offset <integer_cst 0x7fd97e1f5be8 constant 0>
            bit-offset <integer_cst 0x7fd97e1f5c30 constant 0> context <record_type 0x7fd97dd17dc8 strbuf> chain <field_decl 0x7fd97dd16390 len>> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd17e70>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fd97e213078 192> unit-size <integer_cst 0x7fd97e213048 24>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <label_decl 0x7fd97dd1f180 bad_line>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7fd97ea9df30 uq
    type <record_type 0x7fd97dd17dc8 strbuf BLK
        size <integer_cst 0x7fd97e213078 constant 192>
        unit-size <integer_cst 0x7fd97e213048 constant 24>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8
        fields <field_decl 0x7fd97dd16428 alloc type <integer_type 0x7fd97dd0d9d8 size_t>
            unsigned DI ./benchmarks/git/double_free_2/../git.h:242:9
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 offset_align 128
            offset <integer_cst 0x7fd97e1f5be8 constant 0>
            bit-offset <integer_cst 0x7fd97e1f5c30 constant 0> context <record_type 0x7fd97dd17dc8 strbuf> chain <field_decl 0x7fd97dd16390 len>> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd17e70>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fd97e213078 192> unit-size <integer_cst 0x7fd97e213048 24>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <label_decl 0x7fd97dd1f180 bad_line>>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_79 = VDEF <.MEM_78>
strbuf_init (&uq, 0);
strbuf_init (&uq, 0);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:142:9: warning: use location
  142 |         strbuf_init(&uq, 0);
      |         ^
this stmt call this function :strbuf_init
trace fucntion name:strbuf_init 

 ================== trace ================== 
trace fucntion free:0 
strbuf_release (&uq);
./benchmarks/git/double_free_2/git_df_2.c:229:9: warning: use location
  229 |         strbuf_release(&uq);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <var_decl 0x7fd97ea9df30 uq
    type <record_type 0x7fd97dd17dc8 strbuf BLK
        size <integer_cst 0x7fd97e213078 constant 192>
        unit-size <integer_cst 0x7fd97e213048 constant 24>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8
        fields <field_decl 0x7fd97dd16428 alloc type <integer_type 0x7fd97dd0d9d8 size_t>
            unsigned DI ./benchmarks/git/double_free_2/../git.h:242:9
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 offset_align 128
            offset <integer_cst 0x7fd97e1f5be8 constant 0>
            bit-offset <integer_cst 0x7fd97e1f5c30 constant 0> context <record_type 0x7fd97dd17dc8 strbuf> chain <field_decl 0x7fd97dd16390 len>> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd17e70>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fd97e213078 192> unit-size <integer_cst 0x7fd97e213048 24>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <label_decl 0x7fd97dd1f180 bad_line>>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with uq ========= [0m
[40;36m ======= relate node_fun argument:uq========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_release’:
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
   15 |     free(sb->buf);
      |            ^
_1 = sb_3(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&uq);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:229:9: warning: use location
  229 |         strbuf_release(&uq);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <var_decl 0x7fd97ea9df30 uq
    type <record_type 0x7fd97dd17dc8 strbuf BLK
        size <integer_cst 0x7fd97e213078 constant 192>
        unit-size <integer_cst 0x7fd97e213048 constant 24>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8
        fields <field_decl 0x7fd97dd16428 alloc type <integer_type 0x7fd97dd0d9d8 size_t>
            unsigned DI ./benchmarks/git/double_free_2/../git.h:242:9
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 offset_align 128
            offset <integer_cst 0x7fd97e1f5be8 constant 0>
            bit-offset <integer_cst 0x7fd97e1f5c30 constant 0> context <record_type 0x7fd97dd17dc8 strbuf> chain <field_decl 0x7fd97dd16390 len>> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd17e70>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:139:16 size <integer_cst 0x7fd97e213078 192> unit-size <integer_cst 0x7fd97e213048 24>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <label_decl 0x7fd97dd1f180 bad_line>>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with uq ========= [0m
[40;36m ======= relate node_fun argument:uq========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_release’:
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
   15 |     free(sb->buf);
      |            ^
_1 = sb_3(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fd708
    type <pointer_type 0x7fd97e2119d8
        type <integer_type 0x7fd97e20a5e8 int public SI
            size <integer_cst 0x7fd97e1f5df8 constant 32>
            unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
            pointer_to_this <pointer_type 0x7fd97e2119d8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = __errno_location ();
    version:1
    ptr-info 0x7fd97dd25a98>
 <ssa_name 0x7fd97e1fd708
    type <pointer_type 0x7fd97e2119d8
        type <integer_type 0x7fd97e20a5e8 int public SI
            size <integer_cst 0x7fd97e1f5df8 constant 32>
            unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
            pointer_to_this <pointer_type 0x7fd97e2119d8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = __errno_location ();
    version:1
    ptr-info 0x7fd97dd25a98>

 ================== pre trace ptable ================== 
trace fucntion name:__errno_location 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fd708
    type <pointer_type 0x7fd97e2119d8
        type <integer_type 0x7fd97e20a5e8 int public SI
            size <integer_cst 0x7fd97e1f5df8 constant 32>
            unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
            pointer_to_this <pointer_type 0x7fd97e2119d8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = __errno_location ();
    version:1
    ptr-info 0x7fd97dd25a98>
is Other function __errno_location
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_1 = 0;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:167:23: warning: use location
  167 |                 errno = 0;
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_1 = 0;
./benchmarks/git/double_free_2/git_df_2.c:167:23: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = __errno_location ();
_1 = __errno_location ();
./benchmarks/git/double_free_2/git_df_2.c:167:17: warning: use location
  167 |                 errno = 0;
      |                 ^
this stmt call this function :__errno_location
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fd708
    type <pointer_type 0x7fd97e2119d8
        type <integer_type 0x7fd97e20a5e8 int public SI
            size <integer_cst 0x7fd97e1f5df8 constant 32>
            unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
            pointer_to_this <pointer_type 0x7fd97e2119d8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _1 = __errno_location ();
    version:1
    ptr-info 0x7fd97dd25a98>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fd750
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _2 = buf.buf;
    version:2
    ptr-info 0x7fd97dd25ab0>
 <ssa_name 0x7fd97e1fd750
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _2 = buf.buf;
    version:2
    ptr-info 0x7fd97dd25ab0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fd750
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _2 = buf.buf;
    version:2
    ptr-info 0x7fd97dd25ab0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
ul_57 = strtoul (_2, &ptr, 8);
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt call this function :strtoul
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fd97e1fd750
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _2 = buf.buf;
    version:2
    ptr-info 0x7fd97dd25ab0>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strtoul’:
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
   62 |     *endptr = str + base;
      |                   ^
_2 = str_4(D) + _1;
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
   62 |     *endptr = str + base;
      |             ^
*endptr_6(D) = _2;
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
*endptr_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
mode_58 = (unsigned int) ul_57;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:172:22: warning: use location
  172 |                 mode = ul;
      |                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fd750
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _2 = buf.buf;
    version:2
    ptr-info 0x7fd97dd25ab0>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <var_decl 0x7fd97dd2b3f0 ptr
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    addressable unsigned DI ./benchmarks/git/double_free_2/git_df_2.c:144:9 size <integer_cst 0x7fd97e1f5bb8 64> unit-size <integer_cst 0x7fd97e1f5bd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97dd2b360 tab>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7fd97dd2b3f0 ptr
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    addressable unsigned DI ./benchmarks/git/double_free_2/git_df_2.c:144:9 size <integer_cst 0x7fd97e1f5bb8 64> unit-size <integer_cst 0x7fd97e1f5bd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97dd2b360 tab>>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
ul_57 = strtoul (_2, &ptr, 8);
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt call this function :strtoul
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
 <var_decl 0x7fd97dd2b3f0 ptr
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    addressable unsigned DI ./benchmarks/git/double_free_2/git_df_2.c:144:9 size <integer_cst 0x7fd97e1f5bb8 64> unit-size <integer_cst 0x7fd97e1f5bd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97dd2b360 tab>>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with ptr ========= [0m
[40;36m ======= relate node_fun argument:ptr========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strtoul’:
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
   62 |     *endptr = str + base;
      |                   ^
_2 = str_4(D) + _1;
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ptr========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
   62 |     *endptr = str + base;
      |             ^
*endptr_6(D) = _2;
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
*endptr_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
ul_57 = strtoul (_2, &ptr, 8);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt call this function :strtoul
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
 <var_decl 0x7fd97dd2b3f0 ptr
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    addressable unsigned DI ./benchmarks/git/double_free_2/git_df_2.c:144:9 size <integer_cst 0x7fd97e1f5bb8 64> unit-size <integer_cst 0x7fd97e1f5bd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97dd2b360 tab>>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with ptr ========= [0m
[40;36m ======= relate node_fun argument:ptr========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strtoul’:
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
   62 |     *endptr = str + base;
      |                   ^
_2 = str_4(D) + _1;
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ptr========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
   62 |     *endptr = str + base;
      |             ^
*endptr_6(D) = _2;
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
*endptr_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>

 ================== pre trace ptable ================== 
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :888========  [0m
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with ul ========= [0m
fucntion collect path finsh

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>
is Other function strtoul
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_86 = VDEF <.MEM_85>
ul_57 = strtoul (_2, &ptr, 8);
ul_57 = strtoul (_2, &ptr, 8);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt call this function :strtoul
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with ul ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
mode_58 = (unsigned int) ul_57;
./benchmarks/git/double_free_2/git_df_2.c:172:22: warning: use location
  172 |                 mode = ul;
      |                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ul_57 != _63)
./benchmarks/git/double_free_2/git_df_2.c:170:30: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_4 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:169:25: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                         ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_5 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:169:39: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = *_5;
./benchmarks/git/double_free_2/git_df_2.c:169:39: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_6 != 32)
./benchmarks/git/double_free_2/git_df_2.c:169:36: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_9 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:174:23: warning: use location
  174 |                 tab = strchr(ptr, '\t');
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_59 = strchr (_9, 9);
./benchmarks/git/double_free_2/git_df_2.c:174:23: warning: use location
this stmt call this function :strchr
trace fucntion name:strchr 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location
this stmt have mutiple branch ---strchr-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_21 = MEM[(char *)tab_36 + -41B];
./benchmarks/git/double_free_2/git_df_2.c:188:56: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_19 = tab_36 + 18446744073709551576;
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                     ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
this stmt call this function :get_sha1_hex
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_18 = tab_59 + 1;
./benchmarks/git/double_free_2/git_df_2.c:185:35: warning: use location
  185 |                         ptr = tab + 1; /* point at the head of path */
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ptr = _18;
./benchmarks/git/double_free_2/git_df_2.c:185:29: warning: use location
  185 |                         ptr = tab + 1; /* point at the head of path */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_10 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:175:33: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_11 = tab_59 - _10;
./benchmarks/git/double_free_2/git_df_2.c:175:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ptr = _17;
./benchmarks/git/double_free_2/git_df_2.c:180:29: warning: use location
  180 |                         ptr = tab + 1; /* point at the head of path */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
path_name_66 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:191:27: warning: use location
  191 |                 path_name = ptr;
      |                           ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: use location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
this stmt call this function :unquote_c_style
trace fucntion name:unquote_c_style 
[40;44m =======trace_function_path unquote_c_style  function_call count: 4 level :0========  [0m
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>
[40;36m ======= node_fun:unquote_c_style========= [0m
[40;36m ======= find relate stmt with ul ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;46m =======add node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;46m =======add node_fun stack:strbuf_add========= [0m
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with ul ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :2========  [0m
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with ul ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :3========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ul ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;46m =======add node_fun stack:strcspn========= [0m

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_22 = *path_name_66;
./benchmarks/git/double_free_2/git_df_2.c:192:50: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
_27 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^
printf ("git-update-index: unable to remove %s", _27);
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_28 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_30 = MEM[(char *)_28 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
MEM[(char *)_29 + -42B] = _30;
./benchmarks/git/double_free_2/git_df_2.c:216:34: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
MEM[(char *)_28 + -1B] = 0;
./benchmarks/git/double_free_2/git_df_2.c:216:44: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_29 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:28: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_32 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:221:31: warning: use location
  221 |                 if (path_name != ptr)
      |                               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_62 = tab_59 + 18446744073709551614;
./benchmarks/git/double_free_2/git_df_2.c:181:29: warning: use location
  181 |                         tab = tab - 2; /* point at tail of sha1 */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_15 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:179:36: warning: use location
  179 |                         stage = tab[-1] - '0';
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_14 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:178:60: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_14 <= 51)
./benchmarks/git/double_free_2/git_df_2.c:178:54: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_13 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:178:49: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_13 > 47)
./benchmarks/git/double_free_2/git_df_2.c:178:36: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_12 = MEM[(char *)tab_59 + -2B];
./benchmarks/git/double_free_2/git_df_2.c:178:24: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd31240
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
    var <var_decl 0x7fd97dd2b120 ul>
    def_stmt ul_57 = strtoul (_2, &ptr, 8);
    version:57>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_98 = VDEF <.MEM_97>
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_100 = VDEF <.MEM_94>
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_94>
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_100>
_27 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_101 = VDEF <.MEM_100>
printf ("git-update-index: unable to remove %s", _27);
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_94>
_28 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_95>
_30 = MEM[(char *)_28 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_96 = VDEF <.MEM_95>
MEM[(char *)_29 + -42B] = _30;
./benchmarks/git/double_free_2/git_df_2.c:216:34: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_95 = VDEF <.MEM_94>
MEM[(char *)_28 + -1B] = 0;
./benchmarks/git/double_free_2/git_df_2.c:216:44: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_95>
_29 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:28: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_72>
_32 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:221:31: warning: use location
  221 |                 if (path_name != ptr)
      |                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:5 [0m
[40;31m  	possible double free [rigorous]:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fd8b8
    type <pointer_type 0x7fd97e2119d8
        type <integer_type 0x7fd97e20a5e8 int public SI
            size <integer_cst 0x7fd97e1f5df8 constant 32>
            unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
            pointer_to_this <pointer_type 0x7fd97e2119d8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = __errno_location ();
    version:7
    ptr-info 0x7fd97dd25b10>
 <ssa_name 0x7fd97e1fd8b8
    type <pointer_type 0x7fd97e2119d8
        type <integer_type 0x7fd97e20a5e8 int public SI
            size <integer_cst 0x7fd97e1f5df8 constant 32>
            unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
            pointer_to_this <pointer_type 0x7fd97e2119d8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = __errno_location ();
    version:7
    ptr-info 0x7fd97dd25b10>

 ================== pre trace ptable ================== 
trace fucntion name:__errno_location 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fd8b8
    type <pointer_type 0x7fd97e2119d8
        type <integer_type 0x7fd97e20a5e8 int public SI
            size <integer_cst 0x7fd97e1f5df8 constant 32>
            unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
            pointer_to_this <pointer_type 0x7fd97e2119d8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = __errno_location ();
    version:7
    ptr-info 0x7fd97dd25b10>
is Other function __errno_location
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = *_7;
./benchmarks/git/double_free_2/git_df_2.c:170:24: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_8 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:21: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                     ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = __errno_location ();
_7 = __errno_location ();
./benchmarks/git/double_free_2/git_df_2.c:170:24: warning: use location
  170 |                     || errno || (unsigned int) ul != ul)
      |                        ^
this stmt call this function :__errno_location
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fd8b8
    type <pointer_type 0x7fd97e2119d8
        type <integer_type 0x7fd97e20a5e8 int public SI
            size <integer_cst 0x7fd97e1f5df8 constant 32>
            unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
            pointer_to_this <pointer_type 0x7fd97e2119d8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _7 = __errno_location ();
    version:7
    ptr-info 0x7fd97dd25b10>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_86>
tab_59 = strchr (_9, 9);
tab_59 = strchr (_9, 9);
./benchmarks/git/double_free_2/git_df_2.c:174:23: warning: use location
  174 |                 tab = strchr(ptr, '\t');
      |                       ^
this stmt call this function :strchr
trace fucntion name:strchr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location
this stmt have mutiple branch ---strchr-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_21 = MEM[(char *)tab_36 + -41B];
./benchmarks/git/double_free_2/git_df_2.c:188:56: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_19 = tab_36 + 18446744073709551576;
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                     ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
this stmt call this function :get_sha1_hex
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_18 = tab_59 + 1;
./benchmarks/git/double_free_2/git_df_2.c:185:35: warning: use location
  185 |                         ptr = tab + 1; /* point at the head of path */
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ptr = _18;
./benchmarks/git/double_free_2/git_df_2.c:185:29: warning: use location
  185 |                         ptr = tab + 1; /* point at the head of path */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ul_57 = strtoul (_2, &ptr, 8);
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt call this function :strtoul
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strtoul’:
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
   62 |     *endptr = str + base;
      |                   ^
_2 = str_4(D) + _1;
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
   62 |     *endptr = str + base;
      |             ^
*endptr_6(D) = _2;
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
*endptr_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ul_57 = strtoul (_2, &ptr, 8);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt call this function :strtoul
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strtoul’:
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
   62 |     *endptr = str + base;
      |                   ^
_2 = str_4(D) + _1;
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
   62 |     *endptr = str + base;
      |             ^
*endptr_6(D) = _2;
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
*endptr_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_4 = ptr;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:169:25: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                         ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_5 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:169:39: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = *_5;
./benchmarks/git/double_free_2/git_df_2.c:169:39: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_9 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:174:23: warning: use location
  174 |                 tab = strchr(ptr, '\t');
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_10 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:175:33: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_11 = tab_59 - _10;
./benchmarks/git/double_free_2/git_df_2.c:175:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ptr = _17;
./benchmarks/git/double_free_2/git_df_2.c:180:29: warning: use location
  180 |                         ptr = tab + 1; /* point at the head of path */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
path_name_66 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:191:27: warning: use location
  191 |                 path_name = ptr;
      |                           ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location
this stmt have mutiple branch ---strtoul-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: use location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
this stmt call this function :unquote_c_style
trace fucntion name:unquote_c_style 
[40;44m =======trace_function_path unquote_c_style  function_call count: 4 level :0========  [0m
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>
[40;36m ======= node_fun:unquote_c_style========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:83:20: warning: use location
   83 |         if (*quoted++ != '"')
      |                    ^
quoted_21 = quoted_20(D) + 1;
./benchmarks/git/double_free_2/git_df_2.c:83:20: warning: use location
quoted_21

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
quoted_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
*endp_34(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
quoted_25

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
quoted_30

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;46m =======add node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;46m =======add node_fun stack:strbuf_add========= [0m
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :2========  [0m
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :3========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;46m =======add node_fun stack:strcspn========= [0m

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_22 = *path_name_66;
./benchmarks/git/double_free_2/git_df_2.c:192:50: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
_27 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^
printf ("git-update-index: unable to remove %s", _27);
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_28 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_30 = MEM[(char *)_28 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
MEM[(char *)_29 + -42B] = _30;
./benchmarks/git/double_free_2/git_df_2.c:216:34: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
MEM[(char *)_28 + -1B] = 0;
./benchmarks/git/double_free_2/git_df_2.c:216:44: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_29 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:28: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_32 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:221:31: warning: use location
  221 |                 if (path_name != ptr)
      |                               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_62 = tab_59 + 18446744073709551614;
./benchmarks/git/double_free_2/git_df_2.c:181:29: warning: use location
  181 |                         tab = tab - 2; /* point at tail of sha1 */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_15 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:179:36: warning: use location
  179 |                         stage = tab[-1] - '0';
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_14 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:178:60: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_14 <= 51)
./benchmarks/git/double_free_2/git_df_2.c:178:54: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_13 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:178:49: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_13 > 47)
./benchmarks/git/double_free_2/git_df_2.c:178:36: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_12 = MEM[(char *)tab_59 + -2B];
./benchmarks/git/double_free_2/git_df_2.c:178:24: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fd948
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _9 = ptr;
    version:9
    ptr-info 0x7fd97dd25b28>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location

===== possiable asias =====
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_98 = VDEF <.MEM_97>
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_100 = VDEF <.MEM_94>
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_94>
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_100>
_27 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_101 = VDEF <.MEM_100>
printf ("git-update-index: unable to remove %s", _27);
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_94>
_28 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_95>
_30 = MEM[(char *)_28 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_96 = VDEF <.MEM_95>
MEM[(char *)_29 + -42B] = _30;
./benchmarks/git/double_free_2/git_df_2.c:216:34: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_95 = VDEF <.MEM_94>
MEM[(char *)_28 + -1B] = 0;
./benchmarks/git/double_free_2/git_df_2.c:216:44: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_95>
_29 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:28: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_72>
_32 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:221:31: warning: use location
  221 |                 if (path_name != ptr)
      |                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:5 [0m
[40;31m  	possible double free [rigorous]:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>

 ================== pre trace ptable ================== 
trace fucntion name:strchr 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>
is Other function strchr
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_86>
tab_59 = strchr (_9, 9);
tab_59 = strchr (_9, 9);
./benchmarks/git/double_free_2/git_df_2.c:174:23: warning: use location
  174 |                 tab = strchr(ptr, '\t');
      |                       ^
this stmt call this function :strchr
trace fucntion name:strchr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location
this stmt have mutiple branch ---strchr-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_21 = MEM[(char *)tab_36 + -41B];
./benchmarks/git/double_free_2/git_df_2.c:188:56: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_21 != 32)
./benchmarks/git/double_free_2/git_df_2.c:188:50: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_19 = tab_36 + 18446744073709551576;
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                     ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
this stmt call this function :get_sha1_hex
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_18 = tab_59 + 1;
./benchmarks/git/double_free_2/git_df_2.c:185:35: warning: use location
  185 |                         ptr = tab + 1; /* point at the head of path */
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ptr = _18;
./benchmarks/git/double_free_2/git_df_2.c:185:29: warning: use location
  185 |                         ptr = tab + 1; /* point at the head of path */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ul_57 = strtoul (_2, &ptr, 8);
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt call this function :strtoul
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with tab ========= [0m
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strtoul’:
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
   62 |     *endptr = str + base;
      |                   ^
_2 = str_4(D) + _1;
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
   62 |     *endptr = str + base;
      |             ^
*endptr_6(D) = _2;
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
*endptr_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ul_57 = strtoul (_2, &ptr, 8);
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:168:22: warning: use location
  168 |                 ul = strtoul(buf.buf, &ptr, 8);
      |                      ^
this stmt call this function :strtoul
trace fucntion name:strtoul 
[40;44m =======trace_function_path strtoul  function_call count: 0 level :0========  [0m
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>
[40;36m ======= node_fun:strtoul========= [0m
[40;36m ======= find relate stmt with tab ========= [0m
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strtoul’:
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
   62 |     *endptr = str + base;
      |                   ^
_2 = str_4(D) + _1;
./benchmarks/git/double_free_2/git_df_2.c:62:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
   62 |     *endptr = str + base;
      |             ^
*endptr_6(D) = _2;
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: use location
*endptr_6(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_4 = ptr;
In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:169:25: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                         ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_5 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:169:39: warning: use location
  169 |                 if (ptr == buf.buf || *ptr != ' '
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = *_5;
./benchmarks/git/double_free_2/git_df_2.c:169:39: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_10 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:175:33: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_11 = tab_59 - _10;
./benchmarks/git/double_free_2/git_df_2.c:175:33: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_11 <= 40)
./benchmarks/git/double_free_2/git_df_2.c:175:26: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ptr = _17;
./benchmarks/git/double_free_2/git_df_2.c:180:29: warning: use location
  180 |                         ptr = tab + 1; /* point at the head of path */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
path_name_66 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:191:27: warning: use location
  191 |                 path_name = ptr;
      |                           ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location
this stmt have mutiple branch ---strtoul-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: use location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
this stmt call this function :unquote_c_style
trace fucntion name:unquote_c_style 
[40;44m =======trace_function_path unquote_c_style  function_call count: 4 level :0========  [0m
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>
[40;36m ======= node_fun:unquote_c_style========= [0m
[40;36m ======= find relate stmt with tab ========= [0m
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:83:20: warning: use location
   83 |         if (*quoted++ != '"')
      |                    ^
quoted_21 = quoted_20(D) + 1;
./benchmarks/git/double_free_2/git_df_2.c:83:20: warning: use location
quoted_21

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
quoted_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
*endp_34(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
quoted_25

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
quoted_30

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;46m =======add node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;46m =======add node_fun stack:strbuf_add========= [0m
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with tab ========= [0m
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :2========  [0m
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with tab ========= [0m
[40;36m ======= relate node_fun argument:tab========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :3========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with tab ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;46m =======add node_fun stack:strcspn========= [0m

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_22 = *path_name_66;
./benchmarks/git/double_free_2/git_df_2.c:192:50: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^
_27 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^
printf ("git-update-index: unable to remove %s", _27);
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_28 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_30 = MEM[(char *)_28 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
MEM[(char *)_29 + -42B] = _30;
./benchmarks/git/double_free_2/git_df_2.c:216:34: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
MEM[(char *)_28 + -1B] = 0;
./benchmarks/git/double_free_2/git_df_2.c:216:44: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_29 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:28: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_32 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:221:31: warning: use location
  221 |                 if (path_name != ptr)
      |                               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_62 = tab_59 + 18446744073709551614;
./benchmarks/git/double_free_2/git_df_2.c:181:29: warning: use location
  181 |                         tab = tab - 2; /* point at tail of sha1 */
      |                             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_15 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:179:36: warning: use location
  179 |                         stage = tab[-1] - '0';
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_14 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:178:60: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_14 <= 51)
./benchmarks/git/double_free_2/git_df_2.c:178:54: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_13 = MEM[(char *)tab_59 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:178:49: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_13 > 47)
./benchmarks/git/double_free_2/git_df_2.c:178:36: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_12 = MEM[(char *)tab_59 + -2B];
./benchmarks/git/double_free_2/git_df_2.c:178:24: warning: use location
  178 |                 if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (tab_59 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:20: warning: use location
  175 |                 if (!tab || tab - ptr < 41)
      |                    ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd312d0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b360 tab>
    def_stmt tab_59 = strchr (_9, 9);
    version:59
    ptr-info 0x7fd97dd25c78>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location

===== possiable asias =====
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
tab_36 = PHI <tab_62(14), tab_59(15)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_98 = VDEF <.MEM_97>
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_100 = VDEF <.MEM_94>
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_94>
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_100>
_27 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_101 = VDEF <.MEM_100>
printf ("git-update-index: unable to remove %s", _27);
./benchmarks/git/double_free_2/git_df_2.c:208:33: warning: use location
  208 |                                 die("git-update-index: unable to remove %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_94>
_28 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_95>
_30 = MEM[(char *)_28 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:216:39: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_96 = VDEF <.MEM_95>
MEM[(char *)_29 + -42B] = _30;
./benchmarks/git/double_free_2/git_df_2.c:216:34: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_95 = VDEF <.MEM_94>
MEM[(char *)_28 + -1B] = 0;
./benchmarks/git/double_free_2/git_df_2.c:216:44: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_95>
_29 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:216:28: warning: use location
  216 |                         ptr[-42] = ptr[-1] = 0;
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_72>
_32 = ptr;
./benchmarks/git/double_free_2/git_df_2.c:221:31: warning: use location
  221 |                 if (path_name != ptr)
      |                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:5 [0m
[40;31m  	possible double free [rigorous]:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fdc18
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _19 = tab_36 + 18446744073709551576;
    version:19
    ptr-info 0x7fd97dd25b88>
 <ssa_name 0x7fd97e1fdc18
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _19 = tab_36 + 18446744073709551576;
    version:19
    ptr-info 0x7fd97dd25b88>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fdc18
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _19 = tab_36 + 18446744073709551576;
    version:19
    ptr-info 0x7fd97dd25b88>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_89 = VDEF <.MEM_70>
_20 = get_sha1_hex (_19, &sha1);
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                     ^
this stmt call this function :get_sha1_hex
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fdc18
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _19 = tab_36 + 18446744073709551576;
    version:19
    ptr-info 0x7fd97dd25b88>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <var_decl 0x7fd97dd2b240 sha1
    type <array_type 0x7fd97dd1a9d8
        type <integer_type 0x7fd97e20a348 unsigned char public unsigned QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97e1f5cd8 0> max <integer_cst 0x7fd97e1f5c78 255>
            pointer_to_this <pointer_type 0x7fd97e2d9930>>
        BLK
        size <integer_cst 0x7fd97dd04768 constant 160>
        unit-size <integer_cst 0x7fd97dd04750 constant 20>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7fd97dd14b28 type <integer_type 0x7fd97e20a000 sizetype>
            DI
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5be8 0> max <integer_cst 0x7fd97dd04870 19>>
        pointer_to_this <pointer_type 0x7fd97dd1adc8>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:146:17 size <integer_cst 0x7fd97dd04768 160> unit-size <integer_cst 0x7fd97dd04750 20>
    align:8 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97dd2b1b0 mode>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7fd97dd2b240 sha1
    type <array_type 0x7fd97dd1a9d8
        type <integer_type 0x7fd97e20a348 unsigned char public unsigned QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97e1f5cd8 0> max <integer_cst 0x7fd97e1f5c78 255>
            pointer_to_this <pointer_type 0x7fd97e2d9930>>
        BLK
        size <integer_cst 0x7fd97dd04768 constant 160>
        unit-size <integer_cst 0x7fd97dd04750 constant 20>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7fd97dd14b28 type <integer_type 0x7fd97e20a000 sizetype>
            DI
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5be8 0> max <integer_cst 0x7fd97dd04870 19>>
        pointer_to_this <pointer_type 0x7fd97dd1adc8>>
    addressable BLK ./benchmarks/git/double_free_2/git_df_2.c:146:17 size <integer_cst 0x7fd97dd04768 160> unit-size <integer_cst 0x7fd97dd04750 20>
    align:8 warn_if_not_align:0 context <function_decl 0x7fd97dd15200 read_index_info> chain <var_decl 0x7fd97dd2b1b0 mode>>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_89 = VDEF <.MEM_70>
_20 = get_sha1_hex (_19, &sha1);
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                     ^
this stmt call this function :get_sha1_hex
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_89 = VDEF <.MEM_70>
_20 = get_sha1_hex (_19, &sha1);
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
this stmt call this function :get_sha1_hex
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fdc60
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _20 = get_sha1_hex (_19, &sha1);
    version:20>
 <ssa_name 0x7fd97e1fdc60
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _20 = get_sha1_hex (_19, &sha1);
    version:20>

 ================== pre trace ptable ================== 
trace fucntion name:get_sha1_hex 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fdc60
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _20 = get_sha1_hex (_19, &sha1);
    version:20>
is Other function get_sha1_hex
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_89 = VDEF <.MEM_70>
_20 = get_sha1_hex (_19, &sha1);
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
this stmt call this function :get_sha1_hex
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_20 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:20: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fdc60
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _20 = get_sha1_hex (_19, &sha1);
    version:20>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd313f0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_66 = ptr;
    version:66
    ptr-info 0x7fd97dd25ca8>
 <ssa_name 0x7fd97dd313f0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_66 = ptr;
    version:66
    ptr-info 0x7fd97dd25ca8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd313f0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_66 = ptr;
    version:66
    ptr-info 0x7fd97dd25ca8>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: use location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
this stmt call this function :unquote_c_style
trace fucntion name:unquote_c_style 
[40;44m =======trace_function_path unquote_c_style  function_call count: 4 level :0========  [0m
 <ssa_name 0x7fd97dd313f0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_66 = ptr;
    version:66
    ptr-info 0x7fd97dd25ca8>
[40;36m ======= node_fun:unquote_c_style========= [0m
[40;36m ======= find relate stmt with path_name ========= [0m
[40;36m ======= relate node_fun argument:path_name========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:83:20: warning: use location
   83 |         if (*quoted++ != '"')
      |                    ^
quoted_21 = quoted_20(D) + 1;
./benchmarks/git/double_free_2/git_df_2.c:83:20: warning: use location
quoted_21

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:path_name========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
quoted_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:path_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:path_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
*endp_34(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:path_name========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
quoted_25

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:path_name========= [0m
[40;36m ======= relate gimple_assign_lhs:quoted========= [0m
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
quoted_30

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;46m =======add node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;46m =======add node_fun stack:strbuf_add========= [0m
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fd97dd313f0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_66 = ptr;
    version:66
    ptr-info 0x7fd97dd25ca8>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with path_name ========= [0m
[40;36m ======= relate node_fun argument:path_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:path_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :2========  [0m
 <ssa_name 0x7fd97dd313f0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_66 = ptr;
    version:66
    ptr-info 0x7fd97dd25ca8>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with path_name ========= [0m
[40;36m ======= relate node_fun argument:path_name========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :3========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd313f0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_66 = ptr;
    version:66
    ptr-info 0x7fd97dd25ca8>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with path_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;46m =======add node_fun stack:strcspn========= [0m

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_22 = *path_name_66;
./benchmarks/git/double_free_2/git_df_2.c:192:50: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd313f0
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_66 = ptr;
    version:66
    ptr-info 0x7fd97dd25ca8>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_98 = VDEF <.MEM_97>
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_100 = VDEF <.MEM_94>
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_94>
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:5 [0m
[40;31m  	possible double free [rigorous]:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>

 ================== pre trace ptable ================== 
trace fucntion name:unquote_c_style 
[40;44m =======trace_function_path unquote_c_style  function_call count: 4 level :888========  [0m
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
[40;36m ======= node_fun:unquote_c_style========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;46m =======add node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;46m =======add node_fun stack:strbuf_add========= [0m
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :889========  [0m
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :890========  [0m
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :891========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;46m =======add node_fun stack:strcspn========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
is Other function unquote_c_style
 
 Start check Pointer Collect  

======================================================================
strbuf_release (&uq);
./benchmarks/git/double_free_2/git_df_2.c:229:9: warning: use location
  229 |         strbuf_release(&uq);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location
this stmt have mutiple branch ---strbuf_release-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:2 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:2 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:2 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:2 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:2 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:2 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: use location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^
this stmt call this function :unquote_c_style
trace fucntion name:unquote_c_style 
[40;44m =======trace_function_path unquote_c_style  function_call count: 4 level :0========  [0m
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
[40;36m ======= node_fun:unquote_c_style========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;46m =======add node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;46m =======add node_fun stack:strbuf_add========= [0m
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :1========  [0m
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :2========  [0m
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :3========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;46m =======add node_fun stack:strcspn========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_22 = *path_name_66;
./benchmarks/git/double_free_2/git_df_2.c:192:50: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                                  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_22 == 34)
./benchmarks/git/double_free_2/git_df_2.c:192:38: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                                      ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fdd38
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _23 = unquote_c_style (&uq, path_name_66, 0B);
    version:23>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location

===== possiable asias =====
# .MEM_82 = VDEF <.MEM_81>
strbuf_release (&uq);
./benchmarks/git/double_free_2/git_df_2.c:229:9: warning: use location
  229 |         strbuf_release(&uq);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_82 = VDEF <.MEM_81>
strbuf_release (&uq);
./benchmarks/git/double_free_2/git_df_2.c:229:9: warning: use location
  229 |         strbuf_release(&uq);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
# .MEM_82 = VDEF <.MEM_81>
strbuf_release (&uq);
./benchmarks/git/double_free_2/git_df_2.c:229:9: warning: use location
  229 |         strbuf_release(&uq);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_82 = VDEF <.MEM_81>
strbuf_release (&uq);
./benchmarks/git/double_free_2/git_df_2.c:229:9: warning: free in this location

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_98 = VDEF <.MEM_97>
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_100 = VDEF <.MEM_94>
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# VUSE <.MEM_94>
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_91 = VDEF <.MEM_90>
_23 = unquote_c_style (&uq, path_name_66, 0B);
./benchmarks/git/double_free_2/git_df_2.c:194:29: warning: free in this location
  194 |                         if (unquote_c_style(&uq, path_name, NULL)) {
      |                             ^

===== possiable asias =====
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:6 [0m
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;31m    this function with other function alias that other function return value is heap-object [0m
[40;31m  	possible double free :6 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd31168
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
    version:37
    ptr-info 0x7fd97dd25c60>
 <ssa_name 0x7fd97dd31168
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
    version:37
    ptr-info 0x7fd97dd25c60>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd31168
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
    version:37
    ptr-info 0x7fd97dd25c60>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_32 != path_name_37)
./benchmarks/git/double_free_2/git_df_2.c:221:20: warning: use location
  221 |                 if (path_name != ptr)
      |                    ^
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd31168
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
    var <var_decl 0x7fd97dd2b2d0 path_name>
    def_stmt path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
    version:37
    ptr-info 0x7fd97dd25c60>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fdd80
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _24 = verify_path (path_name_37);
    version:24>
 <ssa_name 0x7fd97e1fdd80
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _24 = verify_path (path_name_37);
    version:24>

 ================== pre trace ptable ================== 
trace fucntion name:verify_path 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fdd80
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _24 = verify_path (path_name_37);
    version:24>
is Other function verify_path
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_94 = VDEF <.MEM_71>
_24 = verify_path (path_name_37);
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fdd80
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _24 = verify_path (path_name_37);
    version:24>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_104 = VDEF <.MEM_94>
fprintf (_25, "Ignoring path %s\n", path_name_37);
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fddc8
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _25 = stderr;
    version:25
    ptr-info 0x7fd97dd25ba0>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7fd97dd2db68
    type <array_type 0x7fd97dd1b348
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        BLK
        size <integer_cst 0x7fd97dd049d8 constant 144>
        unit-size <integer_cst 0x7fd97dd049c0 constant 18>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7fd97dd1b2a0 type <integer_type 0x7fd97e20a000 sizetype>
            DI
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5be8 0> max <integer_cst 0x7fd97dd049a8 17>>
        pointer_to_this <pointer_type 0x7fd97dd1b3f0>>
    readonly constant static "Ignoring path %s\012\000">

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fde10
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _26 = remove_file_from_cache (path_name_37);
    version:26>
 <ssa_name 0x7fd97e1fde10
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _26 = remove_file_from_cache (path_name_37);
    version:26>

 ================== pre trace ptable ================== 
trace fucntion name:remove_file_from_cache 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fde10
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _26 = remove_file_from_cache (path_name_37);
    version:26>
is Other function remove_file_from_cache
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_100 = VDEF <.MEM_94>
_26 = remove_file_from_cache (path_name_37);
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fde10
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _26 = remove_file_from_cache (path_name_37);
    version:26>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd31288
    type <integer_type 0x7fd97e20a690 unsigned int public unsigned SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a690 precision:32 min <integer_cst 0x7fd97e1f5e28 0> max <integer_cst 0x7fd97e1f5de0 4294967295>
        pointer_to_this <pointer_type 0x7fd97e216690>>
    var <var_decl 0x7fd97dd2b1b0 mode>
    def_stmt mode_58 = (unsigned int) ul_57;
    version:58>
 <ssa_name 0x7fd97dd31288
    type <integer_type 0x7fd97e20a690 unsigned int public unsigned SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a690 precision:32 min <integer_cst 0x7fd97e1f5e28 0> max <integer_cst 0x7fd97e1f5de0 4294967295>
        pointer_to_this <pointer_type 0x7fd97e216690>>
    var <var_decl 0x7fd97dd2b1b0 mode>
    def_stmt mode_58 = (unsigned int) ul_57;
    version:58>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd31288
    type <integer_type 0x7fd97e20a690 unsigned int public unsigned SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a690 precision:32 min <integer_cst 0x7fd97e1f5e28 0> max <integer_cst 0x7fd97e1f5de0 4294967295>
        pointer_to_this <pointer_type 0x7fd97e216690>>
    var <var_decl 0x7fd97dd2b1b0 mode>
    def_stmt mode_58 = (unsigned int) ul_57;
    version:58>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd31288
    type <integer_type 0x7fd97e20a690 unsigned int public unsigned SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a690 precision:32 min <integer_cst 0x7fd97e1f5e28 0> max <integer_cst 0x7fd97e1f5de0 4294967295>
        pointer_to_this <pointer_type 0x7fd97e216690>>
    var <var_decl 0x7fd97dd2b1b0 mode>
    def_stmt mode_58 = (unsigned int) ul_57;
    version:58>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd311b0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd2b090 stage>
    def_stmt stage_38 = PHI <stage_60(14), 0(15)>
    version:38>
 <ssa_name 0x7fd97dd311b0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd2b090 stage>
    def_stmt stage_38 = PHI <stage_60(14), 0(15)>
    version:38>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd311b0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd2b090 stage>
    def_stmt stage_38 = PHI <stage_60(14), 0(15)>
    version:38>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd311b0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd2b090 stage>
    def_stmt stage_38 = PHI <stage_60(14), 0(15)>
    version:38>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97e1fdf78
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
    version:31>
 <ssa_name 0x7fd97e1fdf78
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
    version:31>

 ================== pre trace ptable ================== 
trace fucntion name:add_cacheinfo 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97e1fdf78
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
    version:31>
is Other function add_cacheinfo
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_97 = VDEF <.MEM_96>
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
./benchmarks/git/double_free_2/git_df_2.c:217:29: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                             ^
this stmt call this function :add_cacheinfo
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_31 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:28: warning: use location
  217 |                         if (add_cacheinfo(mode, sha1, path_name, stage))
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^
this stmt call this function :free

 ================== find free stmt ================== 
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
printf ("git-update-index: unable to update %s", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:218:33: warning: use location
  218 |                                 die("git-update-index: unable to update %s",
      |                                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = remove_file_from_cache (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:207:29: warning: use location
  207 |                         if (remove_file_from_cache(path_name))
      |                             ^
this stmt call this function :remove_file_from_cache
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
fprintf (_25, "Ignoring path %s\n", path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location
  201 |                         fprintf(stderr, "Ignoring path %s\n", path_name);
      |                         ^
this stmt call this function :fprintf
trace fucntion name:fprintf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = stderr;
./benchmarks/git/double_free_2/git_df_2.c:201:25: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = verify_path (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:200:22: warning: use location
  200 |                 if (!verify_path(path_name)) {
      |                      ^
this stmt call this function :verify_path
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_58 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:20: warning: use location
  205 |                 if (!mode) {
      |                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_20 = get_sha1_hex (_19, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:21: warning: use location
  188 |                 if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      |                     ^
this stmt call this function :get_sha1_hex
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97e1fdf78
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
    version:31>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd31090
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _34 = stdin;
    version:34
    ptr-info 0x7fd97dd25c30>
 <ssa_name 0x7fd97dd31090
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _34 = stdin;
    version:34
    ptr-info 0x7fd97dd25c30>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd31090
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _34 = stdin;
    version:34
    ptr-info 0x7fd97dd25c30>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                ^
this stmt call this function :strbuf_getline
trace fucntion name:strbuf_getline 
[40;44m =======trace_function_path strbuf_getline  function_call count: 4 level :0========  [0m
 <ssa_name 0x7fd97dd31090
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _34 = stdin;
    version:34
    ptr-info 0x7fd97dd25c30>
[40;36m ======= node_fun:strbuf_getline========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^
_8 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
_8

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^
_10 = _8 + _9;
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^
*_10 = 0;
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
*_10

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;46m =======add node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd31090
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _34 = stdin;
    version:34
    ptr-info 0x7fd97dd25c30>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘read_index_info’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd31090
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _34 = stdin;
    version:34
    ptr-info 0x7fd97dd25c30>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;46m =======add node_fun stack:strbuf_reset========= [0m
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fd97dd31090
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _34 = stdin;
    version:34
    ptr-info 0x7fd97dd25c30>
[40;36m ======= node_fun:strbuf_reset========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;46m =======add node_fun stack:feof========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_35 != -1)
./benchmarks/git/double_free_2/git_df_2.c:143:62: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                                                              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd31090
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
   
    def_stmt _34 = stdin;
    version:34
    ptr-info 0x7fd97dd25c30>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location

===== possiable asias =====
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: free in this location

===== possiable asias =====
if (_35 != -1)
./benchmarks/git/double_free_2/git_df_2.c:143:62: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                                                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
if (_35 != -1)
./benchmarks/git/double_free_2/git_df_2.c:143:62: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                                                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd311f8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <parm_decl 0x7fd97dd1f100 line_termination>
    def_stmt GIMPLE_NOP
    version:49>
 <ssa_name 0x7fd97dd311f8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <parm_decl 0x7fd97dd1f100 line_termination>
    def_stmt GIMPLE_NOP
    version:49>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd311f8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <parm_decl 0x7fd97dd1f100 line_termination>
    def_stmt GIMPLE_NOP
    version:49>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                ^
this stmt call this function :strbuf_getline
trace fucntion name:strbuf_getline 
[40;44m =======trace_function_path strbuf_getline  function_call count: 4 level :0========  [0m
 <ssa_name 0x7fd97dd311f8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <parm_decl 0x7fd97dd1f100 line_termination>
    def_stmt GIMPLE_NOP
    version:49>
[40;36m ======= node_fun:strbuf_getline========= [0m
[40;36m ======= find relate stmt with line_termination ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;46m =======add node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd311f8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <parm_decl 0x7fd97dd1f100 line_termination>
    def_stmt GIMPLE_NOP
    version:49>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with line_termination ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd311f8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <parm_decl 0x7fd97dd1f100 line_termination>
    def_stmt GIMPLE_NOP
    version:49>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with line_termination ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;46m =======add node_fun stack:strbuf_reset========= [0m
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fd97dd311f8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <parm_decl 0x7fd97dd1f100 line_termination>
    def_stmt GIMPLE_NOP
    version:49>
[40;36m ======= node_fun:strbuf_reset========= [0m
[40;36m ======= find relate stmt with line_termination ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;46m =======add node_fun stack:feof========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_35 != -1)
./benchmarks/git/double_free_2/git_df_2.c:143:62: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                                                              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (line_termination_49(D) != 0)
./benchmarks/git/double_free_2/git_df_2.c:192:20: warning: use location
  192 |                 if (line_termination && path_name[0] == '"') {
      |                    ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd311f8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <parm_decl 0x7fd97dd1f100 line_termination>
    def_stmt GIMPLE_NOP
    version:49>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location

===== possiable asias =====
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: free in this location

===== possiable asias =====
if (_35 != -1)
./benchmarks/git/double_free_2/git_df_2.c:143:62: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                                                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
if (_35 != -1)
./benchmarks/git/double_free_2/git_df_2.c:143:62: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                                                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>

 ================== pre trace ptable ================== 
trace fucntion name:strbuf_getline 
[40;44m =======trace_function_path strbuf_getline  function_call count: 4 level :888========  [0m
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
[40;36m ======= node_fun:strbuf_getline========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;46m =======add node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :889========  [0m
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :890========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;46m =======add node_fun stack:strbuf_reset========= [0m
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :889========  [0m
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
[40;36m ======= node_fun:strbuf_reset========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;46m =======add node_fun stack:feof========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
is Other function strbuf_getline
 
 Start check Pointer Collect  

======================================================================
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                ^
this stmt call this function :strbuf_getline
trace fucntion name:strbuf_getline 
[40;44m =======trace_function_path strbuf_getline  function_call count: 4 level :0========  [0m
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
[40;36m ======= node_fun:strbuf_getline========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;46m =======add node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;46m =======add node_fun stack:strbuf_reset========= [0m
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :1========  [0m
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>
[40;36m ======= node_fun:strbuf_reset========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;46m =======add node_fun stack:feof========= [0m

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_35 != -1)
./benchmarks/git/double_free_2/git_df_2.c:143:62: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                                                              ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd310d8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _35 = strbuf_getline (&buf, _34, line_termination_49(D));
    version:35>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: use location
  222 |                         free(path_name);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: free in this location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                ^

===== possiable asias =====
# .MEM_81 = VDEF <.MEM_80>
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
# .MEM_81 = VDEF <.MEM_80>
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_80 = VDEF <.MEM_76>
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
./benchmarks/git/double_free_2/git_df_2.c:143:16: warning: free in this location

===== possiable asias =====
if (_35 != -1)
./benchmarks/git/double_free_2/git_df_2.c:143:62: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                                                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_103 = VDEF <.MEM_72>
free (path_name_37);
./benchmarks/git/double_free_2/git_df_2.c:222:25: warning: free in this location
  222 |                         free(path_name);
      |                         ^

===== possiable asias =====
if (_35 != -1)
./benchmarks/git/double_free_2/git_df_2.c:143:62: warning: use location
  143 |         while (strbuf_getline(&buf, stdin, line_termination) != EOF) {
      |                                                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:5 [0m
[40;31m  	possible double free [rigorous]:5 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;31m    this function with other function alias that other function return value is heap-object [0m
[40;31m  	possible double free :5 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:read_index_info========= [0m
[40;44m =======node_fun:unquote_c_style========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path unquote_c_style  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;33m =======POP node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:strbuf_add========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_add  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_grow  function_call count: 5 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46948
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fd97dd04a80>
 <ssa_name 0x7fd97dd46948
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fd97dd04a80>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:strbuf_grow========= [0m
[40;42m =======start_check_funciton:strbuf_grow========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
if (_11 < _14)
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_nr 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>
is Other function alloc_nr
 
 Start check Pointer Collect  

======================================================================
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
if (_11 < _14)
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:2 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================

 Expand conflict 
 The same function may have multiple branches :alloc_nr
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_nr 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
is Other function alloc_nr
 
 Start check Pointer Collect  

======================================================================
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:2 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================

 Expand conflict 
 The same function may have multiple branches :alloc_nr
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_38 = VDEF <.MEM_31>
_22 = st_mult (1, _21);
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>

 ================== pre trace ptable ================== 
trace fucntion name:st_mult 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
is Other function st_mult
 
 Start check Pointer Collect  

======================================================================
# .MEM_38 = VDEF <.MEM_31>
_22 = st_mult (1, _21);
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>

 ================== pre trace ptable ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# .MEM_33 = VDEF <.MEM_32>
exit (1);
./benchmarks/git/double_free_2/../git.h:422:25: warning: use location
  422 |                         die("Out of memory, realloc failed%s", "");
      |                         ^
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
is Other function xrealloc
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;31m    this function with other function alias that other function return value is heap-object [0m
[40;31m  	possible double free :4 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:strbuf_grow========= [0m
[40;42m =======pre_check_funciton:strbuf_add========= [0m
[40;42m =======start_check_funciton:strbuf_add========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d480
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fd97dd25eb8>
 <ssa_name 0x7fd97dd3d480
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fd97dd25eb8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d480
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fd97dd25eb8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d480
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fd97dd25eb8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d5e8
    type <pointer_type 0x7fd97e211150
        type <void_type 0x7fd97e2110a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211150>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1ff00 data>
    def_stmt GIMPLE_NOP
    version:10
    ptr-info 0x7fd97dd25ee8>
 <ssa_name 0x7fd97dd3d5e8
    type <pointer_type 0x7fd97e211150
        type <void_type 0x7fd97e2110a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211150>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1ff00 data>
    def_stmt GIMPLE_NOP
    version:10
    ptr-info 0x7fd97dd25ee8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d5e8
    type <pointer_type 0x7fd97e211150
        type <void_type 0x7fd97e2110a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211150>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1ff00 data>
    def_stmt GIMPLE_NOP
    version:10
    ptr-info 0x7fd97dd25ee8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d5e8
    type <pointer_type 0x7fd97e211150
        type <void_type 0x7fd97e2110a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211150>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1ff00 data>
    def_stmt GIMPLE_NOP
    version:10
    ptr-info 0x7fd97dd25ee8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:strbuf_add========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;33m =======POP node_fun stack:strcspn========= [0m
[40;42m =======pre_check_funciton:unquote_c_style========= [0m
[40;42m =======start_check_funciton:unquote_c_style========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_35>
len_22 = strcspn (quoted_11, "\"\\");
len_22 = strcspn (quoted_11, "\"\\");
./benchmarks/git/double_free_2/git_df_2.c:87:23: warning: use location
   87 |                 len = strcspn(quoted, "\"\\");
      |                       ^
this stmt call this function :strcspn
trace fucntion name:strcspn 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_9 = MEM[(const char *)quoted_24 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:35: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_31 = (int) _9;
./benchmarks/git/double_free_2/git_df_2.c:120:33: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ac_32 = _10 | ac_29;
./benchmarks/git/double_free_2/git_df_2.c:122:44: warning: use location
  122 |                                         ac |= (ch - '0');
      |                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
lto1: warning: use location
this stmt have mutiple branch ---strcspn-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt call this function :strbuf_addch
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt call this function :strbuf_add
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
[40;36m ======= relate node_fun argument:quoted========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:quoted========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
[40;36m ======= relate node_fun argument:quoted========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_31 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_31 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
lto1: warning: use location
this stmt have mutiple branch ---strbuf_add-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
lto1: warning: use location
this stmt have mutiple branch ---strbuf_add-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = MEM[(const char *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:35: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_28 = (int) _6;
./benchmarks/git/double_free_2/git_df_2.c:117:33: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = ch_28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:119:52: warning: use location
  119 |                                         ac |= ((ch - '0') << 3);
      |                                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_4 = MEM[(const char *)quoted_24 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:31: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = *quoted_24;
./benchmarks/git/double_free_2/git_df_2.c:91:25: warning: use location
   91 |                 switch (*quoted++) {
      |                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd37360
    type <pointer_type 0x7fd97dd0d888
        type <integer_type 0x7fd97dd0d7e0 char readonly public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d888>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd140a8>>
    var <parm_decl 0x7fd97dd1f380 quoted>
    def_stmt quoted_11 = PHI <quoted_21(2), quoted_12(23)>
    version:11
    ptr-info 0x7fd97dd25cf0>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_38>
_9 = MEM[(const char *)quoted_24 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:35: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ch_31 = (int) _9;
./benchmarks/git/double_free_2/git_df_2.c:120:33: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ac_32 = _10 | ac_29;
./benchmarks/git/double_free_2/git_df_2.c:122:44: warning: use location
  122 |                                         ac |= (ch - '0');
      |                                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
if (ch_31 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
if (ch_31 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location

===== possiable asias =====
quoted_11 = PHI <quoted_21(2), quoted_12(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_38>
_6 = MEM[(const char *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:35: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ch_28 = (int) _6;
./benchmarks/git/double_free_2/git_df_2.c:117:33: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
_7 = ch_28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:119:52: warning: use location
  119 |                                         ac |= ((ch - '0') << 3);
      |                                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_38>
_4 = MEM[(const char *)quoted_24 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:31: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_38>
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_38>
_2 = *quoted_24;
./benchmarks/git/double_free_2/git_df_2.c:91:25: warning: use location
   91 |                 switch (*quoted++) {
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <string_cst 0x7fd97dd25738
    type <array_type 0x7fd97dd1a7e0
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        BLK
        size <integer_cst 0x7fd97e213060 constant 24>
        unit-size <integer_cst 0x7fd97dd04948 constant 3>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        domain <integer_type 0x7fd97dd1a738 type <integer_type 0x7fd97e20a000 sizetype>
            DI
            size <integer_cst 0x7fd97e1f5bb8 constant 64>
            unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5be8 0> max <integer_cst 0x7fd97e1f5d80 2>>
        pointer_to_this <pointer_type 0x7fd97dd1a888>>
    readonly constant static ""\\000">

dot graph START

======================================================================
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>

 ================== pre trace ptable ================== 
trace fucntion name:strcspn 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>
is Other function strcspn
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# VUSE <.MEM_35>
len_22 = strcspn (quoted_11, "\"\\");
len_22 = strcspn (quoted_11, "\"\\");
./benchmarks/git/double_free_2/git_df_2.c:87:23: warning: use location
   87 |                 len = strcspn(quoted, "\"\\");
      |                       ^
this stmt call this function :strcspn
trace fucntion name:strcspn 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_9 = MEM[(const char *)quoted_24 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:35: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_31 = (int) _9;
./benchmarks/git/double_free_2/git_df_2.c:120:33: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ac_32 = _10 | ac_29;
./benchmarks/git/double_free_2/git_df_2.c:122:44: warning: use location
  122 |                                         ac |= (ch - '0');
      |                                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
lto1: warning: use location
this stmt have mutiple branch ---strcspn-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt call this function :strbuf_addch
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt call this function :strbuf_add
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_31 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_31 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
lto1: warning: use location
this stmt have mutiple branch ---strbuf_add-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = MEM[(const char *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:35: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_28 = (int) _6;
./benchmarks/git/double_free_2/git_df_2.c:117:33: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_7 = ch_28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:119:52: warning: use location
  119 |                                         ac |= ((ch - '0') << 3);
      |                                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_4 = MEM[(const char *)quoted_24 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:31: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = *quoted_24;
./benchmarks/git/double_free_2/git_df_2.c:91:25: warning: use location
   91 |                 switch (*quoted++) {
      |                         ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd375a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35090 len>
    def_stmt len_22 = strcspn (quoted_11, "\"\\");
    version:22>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_24 = quoted_11 + len_22;
./benchmarks/git/double_free_2/git_df_2.c:89:24: warning: use location
   89 |                 quoted += len;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_38>
_9 = MEM[(const char *)quoted_24 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:35: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ch_31 = (int) _9;
./benchmarks/git/double_free_2/git_df_2.c:120:33: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ac_32 = _10 | ac_29;
./benchmarks/git/double_free_2/git_df_2.c:122:44: warning: use location
  122 |                                         ac |= (ch - '0');
      |                                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
if (ch_31 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:52: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
if (ch_31 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:28: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:42: warning: use location
  120 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_38>
_6 = MEM[(const char *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:35: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
ch_28 = (int) _6;
./benchmarks/git/double_free_2/git_df_2.c:117:33: warning: use location
  117 |                         if ((ch = *quoted++) < '0' || '7' < ch)
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
_7 = ch_28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:119:52: warning: use location
  119 |                                         ac |= ((ch - '0') << 3);
      |                                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_38>
_4 = MEM[(const char *)quoted_24 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:31: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:38: warning: use location
  102 |                 switch ((ch = *quoted++)) {
      |                                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:94:48: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_38>
*endp_34(D) = _3;
./benchmarks/git/double_free_2/git_df_2.c:94:39: warning: use location
   94 |                                 *endp = quoted + 1;
      |                                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# VUSE <.MEM_38>
_2 = *quoted_24;
./benchmarks/git/double_free_2/git_df_2.c:91:25: warning: use location
   91 |                 switch (*quoted++) {
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
is Other function 
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt call this function :strbuf_addch
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt call this function :strbuf_add
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
is Other function 
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt call this function :strbuf_addch
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt call this function :strbuf_add
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd37480
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1f300 sb>
    def_stmt GIMPLE_NOP
    version:18
    ptr-info 0x7fd97dd25d20>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
this stmt call this function :strbuf_addch
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt call this function :strbuf_add
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with ch ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with ch ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ch ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd373f0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35000 ch>
    def_stmt ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
    version:13>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^
this stmt call this function :strbuf_addch
trace fucntion name:strbuf_addch 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: use location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^
this stmt call this function :strbuf_add
trace fucntion name:strbuf_add 
[40;44m =======trace_function_path strbuf_add  function_call count: 3 level :0========  [0m
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>
[40;36m ======= node_fun:strbuf_add========= [0m
[40;36m ======= find relate stmt with oldlen ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;46m =======add node_fun stack:strbuf_grow========= [0m
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :1========  [0m
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with oldlen ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with oldlen ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
oldlen_19 = sb_18(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:80:16: warning: use location
   80 |         size_t oldlen = sb->len, len;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd374c8
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <var_decl 0x7fd97dd35120 oldlen>
    def_stmt oldlen_19 = sb_18(D)->len;
    version:19>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_41 = VDEF <.MEM_38>
strbuf_setlen (sb_18(D), oldlen_19);
./benchmarks/git/double_free_2/git_df_2.c:132:9: warning: use location
  132 |         strbuf_setlen(sb, oldlen);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_38 = VDEF <.MEM_35>
strbuf_add (sb_18(D), quoted_11, len_22);
./benchmarks/git/double_free_2/git_df_2.c:88:17: warning: free in this location
   88 |                 strbuf_add(sb, quoted, len);
      |                 ^

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
strbuf_addch (sb_18(D), ch_13);
./benchmarks/git/double_free_2/git_df_2.c:128:17: warning: use location
  128 |                 strbuf_addch(sb, ch);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:unquote_c_style========= [0m
[40;44m =======node_fun:strtoul========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path strtoul  function_call count: 0 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:strtoul========= [0m
[40;42m =======start_check_funciton:strtoul========= [0m
[40;33m =======POP node_fun stack:strtoul========= [0m
[40;44m =======node_fun:strbuf_getline========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path strbuf_getline  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;33m =======POP node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_grow  function_call count: 5 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46948
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fd97dd04a80>
 <ssa_name 0x7fd97dd46948
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fd97dd04a80>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:strbuf_grow========= [0m
[40;42m =======start_check_funciton:strbuf_grow========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
if (_11 < _14)
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_nr 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>
is Other function alloc_nr
 
 Start check Pointer Collect  

======================================================================
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
if (_11 < _14)
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:2 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================

 Expand conflict 
 The same function may have multiple branches :alloc_nr
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_nr 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
is Other function alloc_nr
 
 Start check Pointer Collect  

======================================================================
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:2 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================

 Expand conflict 
 The same function may have multiple branches :alloc_nr
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_38 = VDEF <.MEM_31>
_22 = st_mult (1, _21);
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>

 ================== pre trace ptable ================== 
trace fucntion name:st_mult 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
is Other function st_mult
 
 Start check Pointer Collect  

======================================================================
# .MEM_38 = VDEF <.MEM_31>
_22 = st_mult (1, _21);
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>

 ================== pre trace ptable ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# .MEM_33 = VDEF <.MEM_32>
exit (1);
./benchmarks/git/double_free_2/../git.h:422:25: warning: use location
  422 |                         die("Out of memory, realloc failed%s", "");
      |                         ^
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
is Other function xrealloc
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;31m    this function with other function alias that other function return value is heap-object [0m
[40;31m  	possible double free :4 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:strbuf_grow========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_reset  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre_check_funciton:strbuf_reset========= [0m
[40;42m =======start_check_funciton:strbuf_reset========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
strbuf_setlen (sb_4(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:29:17: warning: use location
   29 |                 strbuf_setlen(sb, 0);
      |                 ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_4(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:28:15: warning: use location
   28 |         if (sb->len)
      |               ^
if (_1 != 0)
./benchmarks/git/double_free_2/git_df_2.c:28:12: warning: use location
   28 |         if (sb->len)
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_reset========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;33m =======POP node_fun stack:feof========= [0m
[40;42m =======pre_check_funciton:strbuf_getline========= [0m
[40;42m =======start_check_funciton:strbuf_getline========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
is Other function 
 
 Start check Pointer Collect  

======================================================================
_9 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:56:19: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                   ^
_10 = _8 + _9;
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^
*_10 = 0;
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^
_8 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^
_7 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:53:28: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                            ^
if (_7 == 0)
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_3 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:51:27: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                           ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :strbuf_grow
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: use location
   42 |         strbuf_grow(sb, 0);
      |         ^
# .MEM_30 = VDEF <.MEM_29>
strbuf_grow (sb_15(D), 1);
./benchmarks/git/double_free_2/git_df_2.c:50:17: warning: use location
   50 |                 strbuf_grow(sb, 1);
      |                 ^
strbuf_reset (sb_15(D));
./benchmarks/git/double_free_2/git_df_2.c:46:9: warning: use location
   46 |         strbuf_reset(sb);
      |         ^
this stmt call this function :strbuf_reset
trace fucntion name:strbuf_reset 
[40;44m =======trace_function_path strbuf_reset  function_call count: 1 level :0========  [0m
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
[40;36m ======= node_fun:strbuf_reset========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;46m =======add node_fun stack:strbuf_setlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: use location
   42 |         strbuf_grow(sb, 0);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: use location
   42 |         strbuf_grow(sb, 0);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_getline’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd37048
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fd00 sb>
    def_stmt GIMPLE_NOP
    version:15
    ptr-info 0x7fd97dd25e70>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:56:19: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_29>
_9 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:56:19: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
_10 = _8 + _9;
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
_10 = _8 + _9;
./benchmarks/git/double_free_2/git_df_2.c:56:16: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_33 = VDEF <.MEM_29>
*_10 = 0;
./benchmarks/git/double_free_2/git_df_2.c:56:26: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_29>
_8 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:56:11: warning: use location
   56 |         sb->buf[sb->len] = '\0';
      |           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:53:28: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_29>
_7 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:53:28: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
if (_7 == 0)
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
if (_7 == 0)
./benchmarks/git/double_free_2/git_df_2.c:53:23: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_31 = VDEF <.MEM_30>
sb_15(D)->len = _4;
./benchmarks/git/double_free_2/git_df_2.c:51:32: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_30>
_3 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:51:27: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_30>
_3 = sb_15(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:51:27: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
_5 = _2 + _3;
./benchmarks/git/double_free_2/git_df_2.c:51:24: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_32 = VDEF <.MEM_31>
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_30>
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# VUSE <.MEM_30>
_2 = sb_15(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:51:19: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
./benchmarks/git/double_free_2/git_df_2.c:46:9: warning: use location
   46 |         strbuf_reset(sb);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_26 = VDEF <.MEM_25(D)>
strbuf_grow (sb_15(D), 0);
./benchmarks/git/double_free_2/git_df_2.c:42:9: warning: free in this location
   42 |         strbuf_grow(sb, 0);
      |         ^

===== possiable asias =====
# .MEM_28 = VDEF <.MEM_27>
strbuf_reset (sb_15(D));
./benchmarks/git/double_free_2/git_df_2.c:46:9: warning: use location
   46 |         strbuf_reset(sb);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d000
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
    var <parm_decl 0x7fd97dd1fd80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fd97dd25e88>
 <ssa_name 0x7fd97dd3d000
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
    var <parm_decl 0x7fd97dd1fd80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fd97dd25e88>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d000
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
    var <parm_decl 0x7fd97dd1fd80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fd97dd25e88>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_21 = fgetc (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:47:22: warning: use location
   47 |         while ((ch = fgetc(fp)) != EOF) {
      |                      ^
this stmt call this function :fgetc
trace fucntion name:fgetc 

 ================== trace ================== 
trace fucntion free:0 
if (ch_21 == -1)
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = (char) ch_21;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_21 == term_22(D))
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
   48 |                 if (ch == term)
      |                    ^
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
_1 = feof (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:43:13: warning: use location
   43 |         if (feof(fp))
      |             ^
this stmt call this function :feof
trace fucntion name:feof 

 ================== trace ================== 
trace fucntion free:0 
if (_1 != 0)
./benchmarks/git/double_free_2/git_df_2.c:43:12: warning: use location
   43 |         if (feof(fp))
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d000
    type <pointer_type 0x7fd97dd14dc8
        type <record_type 0x7fd97dd14d20 FILE BLK
            size <integer_cst 0x7fd97e2ca0a8 constant 1728>
            unit-size <integer_cst 0x7fd97dd04840 constant 216>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd14c78 fields <field_decl 0x7fd97dd16260 _flags> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd14dc8>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97dd1b150>>
    var <parm_decl 0x7fd97dd1fd80 fp>
    def_stmt GIMPLE_NOP
    version:17
    ptr-info 0x7fd97dd25e88>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd37cf0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _1 = feof (fp_17(D));
    version:1>
 <ssa_name 0x7fd97dd37cf0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _1 = feof (fp_17(D));
    version:1>

 ================== pre trace ptable ================== 
trace fucntion name:feof 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd37cf0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _1 = feof (fp_17(D));
    version:1>
is Other function feof
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_21 = fgetc (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:47:22: warning: use location
   47 |         while ((ch = fgetc(fp)) != EOF) {
      |                      ^
this stmt call this function :fgetc
trace fucntion name:fgetc 

 ================== trace ================== 
trace fucntion free:0 
if (ch_21 == -1)
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = (char) ch_21;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_21 == term_22(D))
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
   48 |                 if (ch == term)
      |                    ^
# .MEM_27 = VDEF <.MEM_26>
_1 = feof (fp_17(D));
_1 = feof (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:43:13: warning: use location
   43 |         if (feof(fp))
      |             ^
this stmt call this function :feof
trace fucntion name:feof 

 ================== trace ================== 
trace fucntion free:0 
if (_1 != 0)
./benchmarks/git/double_free_2/git_df_2.c:43:12: warning: use location
   43 |         if (feof(fp))
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd37cf0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _1 = feof (fp_17(D));
    version:1>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d048
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35630 ch>
    def_stmt ch_21 = fgetc (fp_17(D));
    version:21>
 <ssa_name 0x7fd97dd3d048
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35630 ch>
    def_stmt ch_21 = fgetc (fp_17(D));
    version:21>

 ================== pre trace ptable ================== 
trace fucntion name:fgetc 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d048
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35630 ch>
    def_stmt ch_21 = fgetc (fp_17(D));
    version:21>
is Other function fgetc
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_29 = VDEF <.MEM_23>
ch_21 = fgetc (fp_17(D));
ch_21 = fgetc (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:47:22: warning: use location
   47 |         while ((ch = fgetc(fp)) != EOF) {
      |                      ^
this stmt call this function :fgetc
trace fucntion name:fgetc 

 ================== trace ================== 
trace fucntion free:0 
if (ch_21 == -1)
./benchmarks/git/double_free_2/git_df_2.c:53:12: warning: use location
   53 |         if (ch == EOF && sb->len == 0)
      |            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = (char) ch_21;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location
   51 |                 sb->buf[sb->len++] = ch;
      |                                    ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = _6;
./benchmarks/git/double_free_2/git_df_2.c:51:36: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_21 == term_22(D))
./benchmarks/git/double_free_2/git_df_2.c:48:20: warning: use location
   48 |                 if (ch == term)
      |                    ^
_1 = feof (fp_17(D));
./benchmarks/git/double_free_2/git_df_2.c:43:13: warning: use location
   43 |         if (feof(fp))
      |             ^
this stmt call this function :feof
trace fucntion name:feof 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d048
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
    var <var_decl 0x7fd97dd35630 ch>
    def_stmt ch_21 = fgetc (fp_17(D));
    version:21>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:strbuf_getline========= [0m
[40;44m =======node_fun:strbuf_add========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path strbuf_add  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_grow  function_call count: 5 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46948
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fd97dd04a80>
 <ssa_name 0x7fd97dd46948
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fd97dd04a80>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:strbuf_grow========= [0m
[40;42m =======start_check_funciton:strbuf_grow========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
if (_11 < _14)
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_nr 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>
is Other function alloc_nr
 
 Start check Pointer Collect  

======================================================================
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
if (_11 < _14)
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:2 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================

 Expand conflict 
 The same function may have multiple branches :alloc_nr
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_nr 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
is Other function alloc_nr
 
 Start check Pointer Collect  

======================================================================
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:2 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================

 Expand conflict 
 The same function may have multiple branches :alloc_nr
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_38 = VDEF <.MEM_31>
_22 = st_mult (1, _21);
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>

 ================== pre trace ptable ================== 
trace fucntion name:st_mult 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
is Other function st_mult
 
 Start check Pointer Collect  

======================================================================
# .MEM_38 = VDEF <.MEM_31>
_22 = st_mult (1, _21);
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>

 ================== pre trace ptable ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# .MEM_33 = VDEF <.MEM_32>
exit (1);
./benchmarks/git/double_free_2/../git.h:422:25: warning: use location
  422 |                         die("Out of memory, realloc failed%s", "");
      |                         ^
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
is Other function xrealloc
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;31m    this function with other function alias that other function return value is heap-object [0m
[40;31m  	possible double free :4 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:strbuf_grow========= [0m
[40;42m =======pre_check_funciton:strbuf_add========= [0m
[40;42m =======start_check_funciton:strbuf_add========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
[40;36m ======= relate node_fun argument:sb========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_24

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_add’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with sb ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d558
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1fe80 sb>
    def_stmt GIMPLE_NOP
    version:7
    ptr-info 0x7fd97dd25ed0>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d5a0
    type <integer_type 0x7fd97dd0d9d8 size_t public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>>
    var <parm_decl 0x7fd97dd1ff80 len>
    def_stmt GIMPLE_NOP
    version:8>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d480
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fd97dd25eb8>
 <ssa_name 0x7fd97dd3d480
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fd97dd25eb8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d480
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fd97dd25eb8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d480
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _3 = _1 + _2;
    version:3
    ptr-info 0x7fd97dd25eb8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d5e8
    type <pointer_type 0x7fd97e211150
        type <void_type 0x7fd97e2110a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211150>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1ff00 data>
    def_stmt GIMPLE_NOP
    version:10
    ptr-info 0x7fd97dd25ee8>
 <ssa_name 0x7fd97dd3d5e8
    type <pointer_type 0x7fd97e211150
        type <void_type 0x7fd97e2110a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211150>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1ff00 data>
    def_stmt GIMPLE_NOP
    version:10
    ptr-info 0x7fd97dd25ee8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d5e8
    type <pointer_type 0x7fd97e211150
        type <void_type 0x7fd97e2110a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211150>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1ff00 data>
    def_stmt GIMPLE_NOP
    version:10
    ptr-info 0x7fd97dd25ee8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d5e8
    type <pointer_type 0x7fd97e211150
        type <void_type 0x7fd97e2110a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211150>>
        unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd1ff00 data>
    def_stmt GIMPLE_NOP
    version:10
    ptr-info 0x7fd97dd25ee8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^
this stmt call this function :memcpy
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: use location
   34 |         strbuf_grow(sb, len);
      |         ^
this stmt call this function :strbuf_grow
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:4 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d510
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _5 = _4 + len_8(D);
    version:5>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_14 = VDEF <.MEM_13>
strbuf_setlen (sb_7(D), _5);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_13>
_4 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:36:29: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_5 = _4 + len_8(D);
./benchmarks/git/double_free_2/git_df_2.c:36:9: warning: use location
   36 |         strbuf_setlen(sb, sb->len + len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_2 = sb_7(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:35:28: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
_3 = _1 + _2;
./benchmarks/git/double_free_2/git_df_2.c:35:24: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# .MEM_13 = VDEF <.MEM_12>
memcpy (_3, data_10(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:35:9: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_12 = VDEF <.MEM_11(D)>
strbuf_grow (sb_7(D), len_8(D));
./benchmarks/git/double_free_2/git_df_2.c:34:9: warning: free in this location
   34 |         strbuf_grow(sb, len);
      |         ^

===== possiable asias =====
# VUSE <.MEM_12>
_1 = sb_7(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:35:18: warning: use location
   35 |         memcpy(sb->buf + sb->len, data, len);
      |                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:strbuf_add========= [0m
[40;44m =======node_fun:strbuf_reset========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path strbuf_reset  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre_check_funciton:strbuf_reset========= [0m
[40;42m =======start_check_funciton:strbuf_reset========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
strbuf_setlen (sb_4(D), 0);
strbuf_setlen (sb_4(D), 0);
In function ‘strbuf_reset’:
./benchmarks/git/double_free_2/git_df_2.c:29:17: warning: use location
   29 |                 strbuf_setlen(sb, 0);
      |                 ^
this stmt call this function :strbuf_setlen
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_4(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:28:15: warning: use location
   28 |         if (sb->len)
      |               ^
if (_1 != 0)
./benchmarks/git/double_free_2/git_df_2.c:28:12: warning: use location
   28 |         if (sb->len)
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3d798
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41000 sb>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7fd97dd25f00>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strbuf_reset========= [0m
[40;44m =======node_fun:strbuf_grow========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path strbuf_grow  function_call count: 5 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46948
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fd97dd04a80>
 <ssa_name 0x7fd97dd46948
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fd97dd04a80>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:strbuf_grow========= [0m
[40;42m =======start_check_funciton:strbuf_grow========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
if (_11 < _14)
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3daf8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version:9>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_nr 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>
is Other function alloc_nr
 
 Start check Pointer Collect  

======================================================================
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
if (_11 < _14)
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3db40
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _10 = alloc_nr (_9);
    version:10>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:2 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================

 Expand conflict 
 The same function may have multiple branches :alloc_nr
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dd80
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version:18>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>

 ================== pre trace ptable ================== 
trace fucntion name:alloc_nr 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
is Other function alloc_nr
 
 Start check Pointer Collect  

======================================================================
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
strbuf_release (&buf);
./benchmarks/git/double_free_2/git_df_2.c:228:9: warning: use location
  228 |         strbuf_release(&buf);
      |         ^
this stmt call this function :strbuf_release
trace fucntion name:strbuf_release 
[40;44m =======trace_function_path strbuf_release  function_call count: 2 level :0========  [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>
[40;36m ======= node_fun:strbuf_release========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:2 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

======================================================================

 Expand conflict 
 The same function may have multiple branches :alloc_nr
# .MEM_35 = VDEF <.MEM_34>
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
# .MEM_34 = VDEF <.MEM_33(D)>
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3ddc8
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _19 = alloc_nr (_18);
    version:19>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_38 = VDEF <.MEM_31>
_22 = st_mult (1, _21);
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3de58
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _21 = sb_29(D)->alloc;
    version:21>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>

 ================== pre trace ptable ================== 
trace fucntion name:st_mult 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
is Other function st_mult
 
 Start check Pointer Collect  

======================================================================
# .MEM_38 = VDEF <.MEM_31>
_22 = st_mult (1, _21);
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:0 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dea0
    type <integer_type 0x7fd97e20a5e8 int public SI
        size <integer_cst 0x7fd97e1f5df8 constant 32>
        unit-size <integer_cst 0x7fd97e1f5e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a5e8 precision:32 min <integer_cst 0x7fd97e1f5db0 -2147483648> max <integer_cst 0x7fd97e1f5dc8 2147483647>
        pointer_to_this <pointer_type 0x7fd97e2119d8>>
   
    def_stmt _22 = st_mult (1, _21);
    version:22>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3df30
    type <pointer_type 0x7fd97dd0d5e8
        type <integer_type 0x7fd97dd0d540 char public QI
            size <integer_cst 0x7fd97e1f5ca8 constant 8>
            unit-size <integer_cst 0x7fd97e1f5cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a3f0 precision:8 min <integer_cst 0x7fd97dd04720 -128> max <integer_cst 0x7fd97dd04708 127>
            pointer_to_this <pointer_type 0x7fd97dd0d5e8>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7fd97dd0d690>>
   
    def_stmt _24 = sb_29(D)->buf;
    version:24
    ptr-info 0x7fd97dd25f18>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3dee8
    type <integer_type 0x7fd97e20a7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97e20a738 precision:64 min <integer_cst 0x7fd97e1f5e88 0> max <integer_cst 0x7fd97e1f6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7fd97e2167e0>>
   
    def_stmt _23 = (long unsigned int) _22;
    version:23>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>

 ================== pre trace ptable ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# .MEM_33 = VDEF <.MEM_32>
exit (1);
./benchmarks/git/double_free_2/../git.h:422:25: warning: use location
  422 |                         die("Out of memory, realloc failed%s", "");
      |                         ^
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
some fucntion return value is heap-object and with Collection SSA_NAME alias relation

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
is Other function xrealloc
 
 Start check Pointer Collect  

======================================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :st_mult
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
this stmt call this function :alloc_nr
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:38: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |                                      ^
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:15: warning: use location
   21 |         if (sb->len + extra + 1 <= sb->len)
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd3df78
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
   
    def_stmt _25 = xrealloc (_24, _23);
    version:25
    ptr-info 0x7fd97dd25f30>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_39 = VDEF <.MEM_38>
_25 = xrealloc (_24, _23);
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: free in this location
   23 |         ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc);    /* allocation site */
      |         ^

===== possiable asias =====
# .MEM_40 = VDEF <.MEM_39>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:9: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;31m    this function with other function alias that other function return value is heap-object [0m
[40;31m  	possible double free :4 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:strbuf_grow========= [0m
[40;44m =======node_fun:strbuf_release========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path strbuf_release  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;33m =======POP node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:strbuf_release========= [0m
[40;42m =======start_check_funciton:strbuf_release========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46438
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fd97dd25f78>
 <ssa_name 0x7fd97dd46438
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fd97dd25f78>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd97dd46438
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fd97dd25f78>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
memset (sb_3(D), 0, 24);
In function ‘strbuf_release’:
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: use location
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^
this stmt call this function :memset
trace fucntion name:memset 

 ================== trace ================== 
trace fucntion free:0 
_1 = sb_3(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:15:12: warning: use location
   15 |     free(sb->buf);
      |            ^
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
   15 |     free(sb->buf);
      |     ^
this stmt call this function :free

 ================== find free stmt ================== 
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46438
    type <pointer_type 0x7fd97dd17e70
        type <record_type 0x7fd97dd17dc8 strbuf BLK
            size <integer_cst 0x7fd97e213078 constant 192>
            unit-size <integer_cst 0x7fd97e213048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd97dd17dc8 fields <field_decl 0x7fd97dd16428 alloc> context <translation_unit_decl 0x7fd97e200168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7fd97dd17e70>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fd97dd41180 sb>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7fd97dd25f78>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location

 ================== Start Use after free Check ================== 

============================================================
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: free in this location

===== possiable asias =====
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: use location
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_5 = VDEF <.MEM_4(D)>
free (_1);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: free in this location
   15 |     free(sb->buf);
      |     ^

===== possiable asias =====
# .MEM_6 = VDEF <.MEM_5>
memset (sb_3(D), 0, 24);
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: use location
   16 |     memset(sb, 0, sizeof(*sb));
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================
[40;33m =======POP node_fun stack:strbuf_release========= [0m
[40;44m =======node_fun:xrealloc========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘xrealloc’:
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46870
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fd97dd04b28>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd468b8
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fd97dd04a50>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt call this function :realloc

 ================== find free stmt ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fd97dd46900
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fd97dd04a68>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
if (ret_8 == 0B)
./benchmarks/git/double_free_2/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_4 = ret_21 == 0B;
./benchmarks/git/double_free_2/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
if (_6 != 0)
./benchmarks/git/double_free_2/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:420:31: warning: free in this location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

===== possiable asias =====
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_1 = ret_17 == 0B;
./benchmarks/git/double_free_2/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_3 = _1 & _2;
./benchmarks/git/double_free_2/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/double_free_2/../git.h:416:23: warning: free in this location
  416 |                 ret = realloc(ptr, 1);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:418:23: warning: free in this location
  418 |                 ret = realloc(ptr, size);
      |                       ^

===== possiable asias =====
_5 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/double_free_2/../git.h:414:15: warning: free in this location
  414 |         ret = realloc(ptr, size);
      |               ^

===== possiable asias =====
_2 = size_15(D) == 0;
./benchmarks/git/double_free_2/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:4 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd97dd46948
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fd97dd04a80>
 <ssa_name 0x7fd97dd46948
    type <pointer_type 0x7fd97e211000
        type <void_type 0x7fd97e20af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fd97e211000>>
        public unsigned DI
        size <integer_cst 0x7fd97e1f5bb8 constant 64>
        unit-size <integer_cst 0x7fd97e1f5bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fd97e2169d8>>
    var <var_decl 0x7fd97dd48240 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fd97dd04a80>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
read_index_info (line_2(D));
return 0;

=======Mapping node_fun:read_index_info=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 25231916]:
strbuf_init (&buf, 0);
strbuf_init (&uq, 0);
goto <bb 36>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 1052266986]:
_1 = __errno_location ();
*_1 = 0;
_2 = buf.buf;
ul_57 = strtoul (_2, &ptr, 8);
_3 = buf.buf;
_4 = ptr;
if (_3 == _4)
  goto <bb 7>; [0.04%]
else
  goto <bb 4>; [99.96%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1051846080]:
_5 = ptr;
_6 = *_5;
if (_6 != 32)
  goto <bb 7>; [0.04%]
else
  goto <bb 5>; [99.96%]

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 1051425343]:
_7 = __errno_location ();
_8 = *_7;
if (_8 != 0)
  goto <bb 7>; [0.04%]
else
  goto <bb 6>; [99.96%]

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 1051004773]:
_63 = ul_57 & 4294967295;
if (ul_57 != _63)
  goto <bb 7>; [0.04%]
else
  goto <bb 8>; [99.96%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 1682614]:
// predicted unlikely by goto predictor.
goto <bb 34>; [100.00%]

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 1050584373]:
mode_58 = (unsigned int) ul_57;
_9 = ptr;
tab_59 = strchr (_9, 9);
if (tab_59 == 0B)
  goto <bb 10>; [0.04%]
else
  goto <bb 9>; [99.96%]

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 1050164139]:
_10 = ptr;
_11 = tab_59 - _10;
if (_11 <= 40)
  goto <bb 10>; [0.04%]
else
  goto <bb 11>; [99.96%]

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 840298]:
// predicted unlikely by goto predictor.
goto <bb 34>; [100.00%]

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 1049744074]:
_12 = MEM[(char *)tab_59 + -2B];
if (_12 == 32)
  goto <bb 12>; [34.00%]
else
  goto <bb 15>; [66.00%]

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 356912989]:
_13 = MEM[(char *)tab_59 + -1B];
if (_13 > 47)
  goto <bb 13>; [50.00%]
else
  goto <bb 15>; [50.00%]

=======is loop:1=========

 bb index 13 
<bb 13> [local count: 178456494]:
_14 = MEM[(char *)tab_59 + -1B];
if (_14 <= 51)
  goto <bb 14>; [50.00%]
else
  goto <bb 15>; [50.00%]

=======is loop:1=========

 bb index 14 
<bb 14> [local count: 89228247]:
_15 = MEM[(char *)tab_59 + -1B];
_16 = (int) _15;
stage_60 = _16 + -48;
_17 = tab_59 + 1;
ptr = _17;
tab_62 = tab_59 + 18446744073709551614;
goto <bb 16>; [100.00%]

=======is loop:1=========

 bb index 15 
<bb 15> [local count: 960515828]:
_18 = tab_59 + 1;
ptr = _18;

=======is loop:1=========

 bb index 16 
<bb 16> [local count: 1049744075]:
# tab_36 = PHI <tab_62(14), tab_59(15)>
# stage_38 = PHI <stage_60(14), 0(15)>
_19 = tab_36 + 18446744073709551576;
_20 = get_sha1_hex (_19, &sha1);
if (_20 != 0)
  goto <bb 18>; [0.04%]
else
  goto <bb 17>; [99.96%]

=======is loop:1=========

 bb index 17 
<bb 17> [local count: 1049324178]:
_21 = MEM[(char *)tab_36 + -41B];
if (_21 != 32)
  goto <bb 18>; [0.04%]
else
  goto <bb 19>; [99.96%]

=======is loop:0=========

 bb index 18 
<bb 18> [local count: 839626]:
// predicted unlikely by goto predictor.
goto <bb 34>; [100.00%]

=======is loop:1=========

 bb index 19 
<bb 19> [local count: 1048904450]:
path_name_66 = ptr;
if (line_termination_49(D) != 0)
  goto <bb 20>; [67.00%]
else
  goto <bb 24>; [33.00%]

=======is loop:1=========

 bb index 20 
<bb 20> [local count: 702765983]:
_22 = *path_name_66;
if (_22 == 34)
  goto <bb 21>; [20.24%]
else
  goto <bb 24>; [79.76%]

=======is loop:1=========

 bb index 21 
<bb 21> [local count: 142239834]:
strbuf_reset (&uq);
_23 = unquote_c_style (&uq, path_name_66, 0B);
if (_23 != 0)
  goto <bb 22>; [0.04%]
else
  goto <bb 23>; [99.96%]

=======is loop:0=========

 bb index 22 
<bb 22> [local count: 56896]:
printf ("git-update-index: bad quoting of path name%s", "");
exit (1);

=======is loop:1=========

 bb index 23 
<bb 23> [local count: 142182938]:
path_name_69 = uq.buf;

=======is loop:1=========

 bb index 24 
<bb 24> [local count: 1048847554]:
# path_name_37 = PHI <path_name_66(19), path_name_66(20), path_name_69(23)>
_24 = verify_path (path_name_37);
if (_24 == 0)
  goto <bb 25>; [19.52%]
else
  goto <bb 26>; [80.48%]

=======is loop:1=========

 bb index 25 
<bb 25> [local count: 204735046]:
_25 = stderr;
fprintf (_25, "Ignoring path %s\n", path_name_37);
// predicted unlikely by continue predictor.
goto <bb 35>; [100.00%]

=======is loop:1=========

 bb index 26 
<bb 26> [local count: 844112509]:
if (mode_58 == 0)
  goto <bb 27>; [50.00%]
else
  goto <bb 29>; [50.00%]

=======is loop:1=========

 bb index 27 
<bb 27> [local count: 422056254]:
_26 = remove_file_from_cache (path_name_37);
if (_26 != 0)
  goto <bb 28>; [0.04%]
else
  goto <bb 31>; [99.96%]

=======is loop:0=========

 bb index 28 
<bb 28> [local count: 168822]:
_27 = ptr;
printf ("git-update-index: unable to remove %s", _27);
exit (1);

=======is loop:1=========

 bb index 29 
<bb 29> [local count: 422056254]:
_28 = ptr;
MEM[(char *)_28 + -1B] = 0;
_29 = ptr;
_30 = MEM[(char *)_28 + -1B];
MEM[(char *)_29 + -42B] = _30;
_31 = add_cacheinfo (mode_58, &sha1, path_name_37, stage_38);
if (_31 != 0)
  goto <bb 30>; [0.04%]
else
  goto <bb 31>; [99.96%]

=======is loop:0=========

 bb index 30 
<bb 30> [local count: 168822]:
printf ("git-update-index: unable to update %s", path_name_37);
exit (1);

=======is loop:1=========

 bb index 31 
<bb 31> [local count: 843774864]:
_32 = ptr;
if (_32 != path_name_37)
  goto <bb 32>; [53.47%]
else
  goto <bb 33>; [46.53%]

=======is loop:1=========

 bb index 32 
<bb 32> [local count: 451166418]:
free (path_name_37);

=======is loop:1=========

 bb index 33 
<bb 33> [local count: 843774864]:
// predicted unlikely by continue predictor.
goto <bb 35>; [100.00%]

=======is loop:0=========

 bb index 34 
<bb 34> [local count: 3362538]:
bad_line:
_33 = buf.buf;
printf ("malformed index info %s", _33);
exit (1);

=======is loop:1=========

 bb index 35 
<bb 35> [local count: 1048509911]:
ptr ={v} {CLOBBER};
sha1 ={v} {CLOBBER};

=======is loop:1=========

 bb index 36 
<bb 36> [local count: 1073741824]:
_34 = stdin;
_35 = strbuf_getline (&buf, _34, line_termination_49(D));
if (_35 != -1)
  goto <bb 3>; [98.00%]
else
  goto <bb 37>; [2.00%]

=======is loop:0=========

 bb index 37 
<bb 37> [local count: 21474840]:
strbuf_release (&buf);
strbuf_release (&uq);
buf ={v} {CLOBBER};
uq ={v} {CLOBBER};
return;

=======Mapping node_fun:unquote_c_style=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 769793699]:
oldlen_19 = sb_18(D)->len;
quoted_21 = quoted_20(D) + 1;
_1 = *quoted_20(D);
if (_1 != 34)
  goto <bb 25>; [2.00%]
else
  goto <bb 3>; [98.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 1073741824]:
# quoted_11 = PHI <quoted_21(2), quoted_12(23)>
len_22 = strcspn (quoted_11, "\"\\");
strbuf_add (sb_18(D), quoted_11, len_22);
quoted_24 = quoted_11 + len_22;
_2 = *quoted_24;
switch (_2) <default: <L1> [33.33%], case 34: <L0> [33.33%], case 92: <L2> [33.33%]>

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 357913944]:
<L0>:
if (endp_34(D) != 0B)
  goto <bb 5>; [70.00%]
else
  goto <bb 25>; [30.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 250539762]:
_3 = &MEM <const char> [(void *)quoted_24 + 2B];
*endp_34(D) = _3;
goto <bb 25>; [100.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 357913944]:
<L1>:
// predicted unlikely by goto predictor.
goto <bb 24>; [100.00%]

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 357913944]:
<L2>:
quoted_25 = &MEM <const char> [(void *)quoted_24 + 2B];
_4 = MEM[(const char *)quoted_24 + 1B];
ch_26 = (int) _4;
switch (_4) <default: <L11> [10.00%], case 34: <L12> [10.00%], case 48 ... 51: <L10> [10.00%], case 92: <L12> [10.00%], case 97: <L3> [10.00%], case 98: <L4> [10.00%], case 102: <L5> [10.00%], case 110: <L6> [10.00%], case 114: <L7> [10.00%], case 116: <L8> [10.00%], case 118: <L9> [10.00%]>

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 35791395]:
<L3>:
goto <bb 23>; [100.00%]

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 35791395]:
<L4>:
goto <bb 23>; [100.00%]

=======is loop:1=========

 bb index 10 
<bb 10> [local count: 35791395]:
<L5>:
goto <bb 23>; [100.00%]

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 35791395]:
<L6>:
goto <bb 23>; [100.00%]

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 35791395]:
<L7>:
goto <bb 23>; [100.00%]

=======is loop:1=========

 bb index 13 
<bb 13> [local count: 35791395]:
<L8>:
goto <bb 23>; [100.00%]

=======is loop:1=========

 bb index 14 
<bb 14> [local count: 35791395]:
<L9>:
goto <bb 23>; [100.00%]

=======is loop:1=========

 bb index 15 
<bb 15> [local count: 35791395]:
<L10>:
_5 = ch_26 + -48;
ac_27 = _5 << 6;
_6 = MEM[(const char *)quoted_24 + 2B];
ch_28 = (int) _6;
if (ch_28 <= 47)
  goto <bb 17>; [2.00%]
else
  goto <bb 16>; [98.00%]

=======is loop:1=========

 bb index 16 
<bb 16> [local count: 35075567]:
if (ch_28 > 55)
  goto <bb 17>; [2.00%]
else
  goto <bb 18>; [98.00%]

=======is loop:0=========

 bb index 17 
<bb 17> [local count: 1417339]:
// predicted unlikely by goto predictor.
goto <bb 24>; [100.00%]

=======is loop:1=========

 bb index 18 
<bb 18> [local count: 34374055]:
_7 = ch_28 + -48;
_8 = _7 << 3;
ac_29 = _8 | ac_27;
quoted_30 = &MEM <const char> [(void *)quoted_24 + 4B];
_9 = MEM[(const char *)quoted_24 + 3B];
ch_31 = (int) _9;
if (ch_31 <= 47)
  goto <bb 20>; [2.00%]
else
  goto <bb 19>; [98.00%]

=======is loop:1=========

 bb index 19 
<bb 19> [local count: 33686574]:
if (ch_31 > 55)
  goto <bb 20>; [2.00%]
else
  goto <bb 21>; [98.00%]

=======is loop:0=========

 bb index 20 
<bb 20> [local count: 1361213]:
// predicted unlikely by goto predictor.
goto <bb 24>; [100.00%]

=======is loop:1=========

 bb index 21 
<bb 21> [local count: 33012843]:
_10 = ch_31 + -48;
ac_32 = _10 | ac_29;
goto <bb 23>; [100.00%]

=======is loop:0=========

 bb index 22 
<bb 22> [local count: 35791395]:
<L11>:
// predicted unlikely by goto predictor.
goto <bb 24>; [100.00%]

=======is loop:1=========

 bb index 23 
<bb 23> [local count: 319344003]:
# quoted_12 = PHI <quoted_25(7), quoted_25(8), quoted_25(9), quoted_25(10), quoted_25(11), quoted_25(12), quoted_25(13), quoted_25(14), quoted_30(21)>
# ch_13 = PHI <ch_26(7), 7(8), 8(9), 12(10), 10(11), 13(12), 9(13), 11(14), ac_32(21)>
<L12>:
strbuf_addch (sb_18(D), ch_13);
goto <bb 3>; [100.00%]

=======is loop:0=========

 bb index 24 
<bb 24> [local count: 396483892]:
error:
strbuf_setlen (sb_18(D), oldlen_19);

=======is loop:0=========

 bb index 25 
<bb 25> [local count: 769793713]:
# _14 = PHI <-1(2), 0(4), 0(5), -1(24)>
return _14;

=======Mapping node_fun:strtoul=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = (sizetype) base_3(D);
_2 = str_4(D) + _1;
*endptr_6(D) = _2;
_8 = (long unsigned int) base_3(D);
return _8;

=======Mapping node_fun:strbuf_getline=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 117315423]:
strbuf_grow (sb_15(D), 0);
_1 = feof (fp_17(D));
if (_1 != 0)
  goto <bb 10>; [2.09%]
else
  goto <bb 3>; [97.91%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 114863530]:
strbuf_reset (sb_15(D));
goto <bb 6>; [100.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1014686025]:
if (ch_21 == term_22(D))
  goto <bb 7>; [5.50%]
else
  goto <bb 5>; [94.50%]

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 958878294]:
strbuf_grow (sb_15(D), 1);
_2 = sb_15(D)->buf;
_3 = sb_15(D)->len;
_4 = _3 + 1;
sb_15(D)->len = _4;
_5 = _2 + _3;
_6 = (char) ch_21;
*_5 = _6;

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 1073741824]:
ch_21 = fgetc (fp_17(D));
if (ch_21 != -1)
  goto <bb 4>; [94.50%]
else
  goto <bb 7>; [5.50%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 114863531]:
if (ch_21 == -1)
  goto <bb 8>; [34.00%]
else
  goto <bb 9>; [66.00%]

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 39053601]:
_7 = sb_15(D)->len;
if (_7 == 0)
  goto <bb 10>; [1.04%]
else
  goto <bb 9>; [98.96%]

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 114457374]:
_8 = sb_15(D)->buf;
_9 = sb_15(D)->len;
_10 = _8 + _9;
*_10 = 0;

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 117315424]:
# _11 = PHI <-1(2), -1(8), 0(9)>
return _11;

=======Mapping node_fun:strbuf_add=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
strbuf_grow (sb_7(D), len_8(D));
_1 = sb_7(D)->buf;
_2 = sb_7(D)->len;
_3 = _1 + _2;
memcpy (_3, data_10(D), len_8(D));
_4 = sb_7(D)->len;
_5 = _4 + len_8(D);
strbuf_setlen (sb_7(D), _5);
return;

=======Mapping node_fun:strbuf_reset=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = sb_4(D)->len;
if (_1 != 0)
  goto <bb 3>; [33.00%]
else
  goto <bb 4>; [67.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 354334800]:
strbuf_setlen (sb_4(D), 0);

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
return;

=======Mapping node_fun:strbuf_grow=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = sb_29(D)->len;
_2 = _1 + extra_30(D);
_3 = _2 + 1;
_4 = sb_29(D)->len;
if (_3 <= _4)
  goto <bb 3>; [0.04%]
else
  goto <bb 4>; [99.96%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 429496]:
printf ("you want to use way too much memory %s", "");
exit (1);

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073312329]:
_5 = sb_29(D)->len;
_6 = _5 + extra_30(D);
_7 = _6 + 1;
_8 = sb_29(D)->alloc;
if (_7 > _8)
  goto <bb 5>; [33.00%]
else
  goto <bb 9>; [67.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 354193067]:
_9 = sb_29(D)->alloc;
_10 = alloc_nr (_9);
_11 = (long unsigned int) _10;
_12 = sb_29(D)->len;
_13 = _12 + extra_30(D);
_14 = _13 + 1;
if (_11 < _14)
  goto <bb 6>; [67.00%]
else
  goto <bb 7>; [33.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 237309355]:
_15 = sb_29(D)->len;
_16 = _15 + extra_30(D);
_17 = _16 + 1;
sb_29(D)->alloc = _17;
goto <bb 8>; [100.00%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 116883711]:
_18 = sb_29(D)->alloc;
_19 = alloc_nr (_18);
_20 = (long unsigned int) _19;
sb_29(D)->alloc = _20;

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 354193067]:
_21 = sb_29(D)->alloc;
_22 = st_mult (1, _21);
_23 = (long unsigned int) _22;
_24 = sb_29(D)->buf;
_25 = xrealloc (_24, _23);
sb_29(D)->buf = _25;

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 1073312330]:
return;

=======Mapping node_fun:strbuf_release=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = sb_3(D)->buf;
free (_1);
memset (sb_3(D), 0, 24);
return;

=======Mapping node_fun:xrealloc=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
ret_17 = realloc (ptr_14(D), size_15(D));
_1 = ret_17 == 0B;
_2 = size_15(D) == 0;
_3 = _1 & _2;
if (_3 != 0)
  goto <bb 3>; [33.00%]
else
  goto <bb 4>; [67.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 354334800]:
ret_19 = realloc (ptr_14(D), 1);

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# ret_7 = PHI <ret_17(2), ret_19(3)>
if (ret_7 == 0B)
  goto <bb 5>; [0.04%]
else
  goto <bb 9>; [99.96%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 429496]:
ret_21 = realloc (ptr_14(D), size_15(D));
_4 = ret_21 == 0B;
_5 = size_15(D) == 0;
_6 = _4 & _5;
if (_6 != 0)
  goto <bb 6>; [33.00%]
else
  goto <bb 7>; [67.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 141734]:
ret_23 = realloc (ptr_14(D), 1);

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 429496]:
# ret_8 = PHI <ret_21(5), ret_23(6)>
if (ret_8 == 0B)
  goto <bb 8>; [0.04%]
else
  goto <bb 9>; [99.96%]

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 172]:
printf ("Out of memory, realloc failed%s", "");
exit (1);

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 1073741653]:
# ret_9 = PHI <ret_7(4), ret_8(7)>
return ret_9;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 4 [0m
[40;34m    gimple free   count : 2 [0m
[40;34m    all ptable point : 59 [0m
[40;34m    analyzable ptable point : 55 [0m
[40;34m    used_stmt array stack totalsize of : 0.012248 mb[0m
[40;34m    collect time: : 0.017836 s [0m
[40;34m    algorithm time: 0.571193 s [0m
[40;34m    gimple stmt count : : 245 [0m
[40;34m    this report analysis in Fri Feb 18 12:19:07 2022
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 (  2%)  2157k ( 69%)
 phase opt and generate             :   0.26 (100%)   0.37 (100%)   0.62 ( 98%)   909k ( 29%)
 callgraph functions expansion      :   0.03 ( 12%)   0.01 (  3%)   0.05 (  8%)   711k ( 23%)
 out of ssa                         :   0.00 (  0%)   0.00 (  0%)   0.01 (  2%)  2464  (  0%)
 jump                               :   0.01 (  4%)   0.00 (  0%)   0.00 (  0%)     0  (  0%)
 integrated RA                      :   0.00 (  0%)   0.00 (  0%)   0.01 (  2%)   250k (  8%)
 plugin execution                   :   0.23 ( 88%)   0.37 (100%)   0.59 ( 94%)  4344  (  0%)
 initialize rtl                     :   0.00 (  0%)   0.00 (  0%)   0.01 (  2%)    12k (  0%)
 rest of compilation                :   0.01 (  4%)   0.00 (  0%)   0.00 (  0%)    29k (  1%)
 repair loop structures             :   0.01 (  4%)   0.00 (  0%)   0.00 (  0%)     0  (  0%)
 TOTAL                              :   0.26          0.37          0.63         3138k
/usr/bin/ld: /tmp/cc97YWkh.ltrans0.ltrans.o: in function `strbuf_grow':
<artificial>:(.text+0xe4): undefined reference to `alloc_nr'
/usr/bin/ld: <artificial>:(.text+0x104): undefined reference to `st_mult'
/usr/bin/ld: <artificial>:(.text+0x123): undefined reference to `alloc_nr'
/usr/bin/ld: /tmp/cc97YWkh.ltrans0.ltrans.o: in function `strbuf_reset':
<artificial>:(.text+0x143): undefined reference to `strbuf_setlen'
/usr/bin/ld: /tmp/cc97YWkh.ltrans0.ltrans.o: in function `strbuf_add':
<artificial>:(.text+0x184): undefined reference to `strbuf_setlen'
/usr/bin/ld: /tmp/cc97YWkh.ltrans0.ltrans.o: in function `unquote_c_style':
<artificial>:(.text+0x2ad): undefined reference to `strbuf_addch'
/usr/bin/ld: <artificial>:(.text+0x313): undefined reference to `strbuf_setlen'
/usr/bin/ld: /tmp/cc97YWkh.ltrans0.ltrans.o: in function `read_index_info':
<artificial>:(.text+0x35e): undefined reference to `strbuf_init'
/usr/bin/ld: <artificial>:(.text+0x372): undefined reference to `strbuf_init'
/usr/bin/ld: <artificial>:(.text+0x42a): undefined reference to `add_cacheinfo'
/usr/bin/ld: <artificial>:(.text+0x4fc): undefined reference to `get_sha1_hex'
/usr/bin/ld: <artificial>:(.text+0x532): undefined reference to `verify_path'
/usr/bin/ld: <artificial>:(.text+0x54f): undefined reference to `remove_file_from_cache'
collect2: error: ld returned 1 exit status
