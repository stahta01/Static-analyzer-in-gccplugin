In file included from ./benchmarks/git/double_free_2/git_df_2.c:11:0:
./benchmarks/git/double_free_2/../git.h: In function ‘copy_array’:
./benchmarks/git/double_free_2/../git.h:161:3: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
   memcpy(dst, src, st_mult(size, n));
   ^~~~~~
./benchmarks/git/double_free_2/../git.h:161:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
./benchmarks/git/double_free_2/../git.h:161:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_2/../git.h:161:20: warning: implicit declaration of function ‘st_mult’; did you mean ‘stdout’? [-Wimplicit-function-declaration]
   memcpy(dst, src, st_mult(size, n));
                    ^~~~~~~
                    stdout
./benchmarks/git/double_free_2/../git.h: In function ‘move_array’:
./benchmarks/git/double_free_2/../git.h:169:3: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
   memmove(dst, src, st_mult(size, n));
   ^~~~~~~
./benchmarks/git/double_free_2/../git.h:169:3: warning: incompatible implicit declaration of built-in function ‘memmove’
./benchmarks/git/double_free_2/../git.h:169:3: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
In file included from ./benchmarks/git/double_free_2/git_df_2.c:10:0:
./benchmarks/git/double_free_2/../git.h: In function ‘xstrdup_or_null’:
./benchmarks/git/double_free_2/../stdio.h:138:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
 #define xstrdup(a) strdup(a)
                    ^
./benchmarks/git/double_free_2/../git.h:174:15: note: in expansion of macro ‘xstrdup’
  return str ? xstrdup(str) : NULL;
               ^~~~~~~
./benchmarks/git/double_free_2/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’
 #define xstrdup(a) strdup(a)
                    ^
./benchmarks/git/double_free_2/../git.h:174:15: note: in expansion of macro ‘xstrdup’
  return str ? xstrdup(str) : NULL;
               ^~~~~~~
In file included from ./benchmarks/git/double_free_2/git_df_2.c:11:0:
./benchmarks/git/double_free_2/../git.h: At top level:
./benchmarks/git/double_free_2/../git.h:236:55: warning: ‘struct archiver_args’ declared inside parameter list will not be visible outside of this definition or declaration
  int (*write_archive)(const struct archiver *, struct archiver_args *);
                                                       ^~~~~~~~~~~~~
./benchmarks/git/double_free_2/../git.h: In function ‘strbuf_swap’:
./benchmarks/git/double_free_2/../git.h:126:2: warning: incompatible implicit declaration of built-in function ‘memcpy’
  memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));  \
  ^
./benchmarks/git/double_free_2/../git.h:407:2: note: in expansion of macro ‘SWAP’
  SWAP(*a, *b);
  ^~~~
./benchmarks/git/double_free_2/../git.h:126:2: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));  \
  ^
./benchmarks/git/double_free_2/../git.h:407:2: note: in expansion of macro ‘SWAP’
  SWAP(*a, *b);
  ^~~~
./benchmarks/git/double_free_2/git_df_2.c: In function ‘strbuf_release’:
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: implicit declaration of function ‘memset’ [-Wimplicit-function-declaration]
     memset(sb, 0, sizeof(*sb));
     ^~~~~~
./benchmarks/git/double_free_2/git_df_2.c:16:5: warning: incompatible implicit declaration of built-in function ‘memset’
./benchmarks/git/double_free_2/git_df_2.c:16:5: note: include ‘<string.h>’ or provide a declaration of ‘memset’
In file included from ./benchmarks/git/double_free_2/git_df_2.c:11:0:
./benchmarks/git/double_free_2/git_df_2.c: In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:112:8: warning: implicit declaration of function ‘alloc_nr’; did you mean ‘alloca’? [-Wimplicit-function-declaration]
    if (alloc_nr(alloc) < (nr)) \
        ^
./benchmarks/git/double_free_2/git_df_2.c:23:2: note: in expansion of macro ‘ALLOC_GROW’
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^~~~~~~~~~
./benchmarks/git/double_free_2/git_df_2.c: In function ‘strbuf_reset’:
./benchmarks/git/double_free_2/git_df_2.c:29:3: warning: implicit declaration of function ‘strbuf_setlen’; did you mean ‘strbuf_reset’? [-Wimplicit-function-declaration]
   strbuf_setlen(sb, 0);
   ^~~~~~~~~~~~~
   strbuf_reset
./benchmarks/git/double_free_2/git_df_2.c: In function ‘strbuf_add’:
./benchmarks/git/double_free_2/git_df_2.c:35:2: warning: incompatible implicit declaration of built-in function ‘memcpy’
  memcpy(sb->buf + sb->len, data, len);
  ^~~~~~
./benchmarks/git/double_free_2/git_df_2.c:35:2: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/double_free_2/git_df_2.c: In function ‘strtoul’:
./benchmarks/git/double_free_2/git_df_2.c:62:13: warning: assignment discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
     *endptr = str + base;
             ^
./benchmarks/git/double_free_2/git_df_2.c: In function ‘unquote_c_style’:
./benchmarks/git/double_free_2/git_df_2.c:87:9: warning: implicit declaration of function ‘strcspn’ [-Wimplicit-function-declaration]
   len = strcspn(quoted, "\"\\");
         ^~~~~~~
./benchmarks/git/double_free_2/git_df_2.c:87:9: warning: incompatible implicit declaration of built-in function ‘strcspn’
./benchmarks/git/double_free_2/git_df_2.c:87:9: note: include ‘<string.h>’ or provide a declaration of ‘strcspn’
./benchmarks/git/double_free_2/git_df_2.c:128:3: warning: implicit declaration of function ‘strbuf_addch’; did you mean ‘strbuf_add’? [-Wimplicit-function-declaration]
   strbuf_addch(sb, ch);
   ^~~~~~~~~~~~
   strbuf_add
./benchmarks/git/double_free_2/git_df_2.c: In function ‘read_index_info’:
./benchmarks/git/double_free_2/git_df_2.c:141:2: warning: implicit declaration of function ‘strbuf_init’; did you mean ‘strbuf_add’? [-Wimplicit-function-declaration]
  strbuf_init(&buf, 0);
  ^~~~~~~~~~~
  strbuf_add
./benchmarks/git/double_free_2/git_df_2.c:174:9: warning: implicit declaration of function ‘strchr’ [-Wimplicit-function-declaration]
   tab = strchr(ptr, '\t');
         ^~~~~~
./benchmarks/git/double_free_2/git_df_2.c:174:9: warning: incompatible implicit declaration of built-in function ‘strchr’
./benchmarks/git/double_free_2/git_df_2.c:174:9: note: include ‘<string.h>’ or provide a declaration of ‘strchr’
./benchmarks/git/double_free_2/git_df_2.c:188:7: warning: implicit declaration of function ‘get_sha1_hex’ [-Wimplicit-function-declaration]
   if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
       ^~~~~~~~~~~~
./benchmarks/git/double_free_2/git_df_2.c:200:8: warning: implicit declaration of function ‘verify_path’ [-Wimplicit-function-declaration]
   if (!verify_path(path_name)) {
        ^~~~~~~~~~~
./benchmarks/git/double_free_2/git_df_2.c:207:8: warning: implicit declaration of function ‘remove_file_from_cache’ [-Wimplicit-function-declaration]
    if (remove_file_from_cache(path_name))
        ^~~~~~~~~~~~~~~~~~~~~~
./benchmarks/git/double_free_2/git_df_2.c:217:8: warning: implicit declaration of function ‘add_cacheinfo’ [-Wimplicit-function-declaration]
    if (add_cacheinfo(mode, sha1, path_name, stage))
        ^~~~~~~~~~~~~
=======ipa_pta=========
===============The first stage : Point of interest stmt collect=================
--------GIMPLE Cond -------
succs:= 2
succs:= 2
--------GIMPLE Cond -------
succs:= 4
--------GIMPLE Cond -------
succs:= 5
succs:= 5
--------GIMPLE Cond -------
succs:= 8
--------GIMPLE Cond -------
succs:= 8
succs:= 10
--------GIMPLE Cond -------
succs:= 11
--------GIMPLE Cond -------
succs:= 11
succs:= 13
succs:= 10
succs:= 13
succs:= 4
--------GIMPLE Cond -------
succs:= 3
--------GIMPLE Cond -------
succs:= 4
--------GIMPLE Cond -------
succs:= 5
--------GIMPLE Cond -------
succs:= 6
--------GIMPLE Cond -------
succs:= 7
--------GIMPLE Cond -------
succs:= 8
--------GIMPLE Cond -------
succs:= 9
--------GIMPLE Cond -------
succs:= 10
--------GIMPLE Cond -------
succs:= 11
succs:= 9
succs:= 10
succs:= 11
--------GIMPLE Cond -------
succs:= 14
--------GIMPLE Cond -------
succs:= 15
--------GIMPLE Cond -------
succs:= 16
--------GIMPLE Cond -------
succs:= 17
--------GIMPLE Cond -------
succs:= 18
succs:= 18
--------GIMPLE Cond -------
succs:= 20
--------GIMPLE_SWITCH -------
--------GIMPLE_SWITCH -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 30
succs:= 31
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 32
succs:= 33
succs:= 30
succs:= 31
succs:= 32
succs:= 33
succs:= 20
--------GIMPLE Cond -------
succs:= 37
succs:= 37
succs:= 16
succs:= 17
--------GIMPLE Cond -------
succs:= 40
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 40
succs:= 41
succs:= 42
--------GIMPLE Cond -------
succs:= 43
succs:= 42
--------GIMPLE Cond -------
succs:= 45
succs:= 43
succs:= 45
--------GIMPLE Cond -------
succs:= 47
--------GIMPLE Cond -------
succs:= 47
succs:= 49
succs:= 3
succs:= 4
succs:= 5
succs:= 6
succs:= 7
succs:= 8
succs:= 14
succs:= 15
succs:= 41
succs:= 49
--------GIMPLE Cond -------
succs:= 52
--------GIMPLE Cond -------
succs:= 53
--------GIMPLE Cond -------
succs:= 53
succs:= 55
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 55
succs:= 57
succs:= 58
--------GIMPLE Cond -------
succs:= 58
succs:= 59
succs:= 52
succs:= 59
--------GIMPLE Cond -------
succs:= 61
===============The first stage : Point of interest stmt collect=================
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
===============The second stage : Mapping stmt=================
# .MEM_50 = VDEF <.MEM_42(D)>
_39 = __printf_chk (1, "you want to use way too much memory %s", "");
# .MEM_43 = VDEF <.MEM_42(D)>
_10 = alloc_nr (_9);
# .MEM_44 = VDEF <.MEM_43>
_19 = alloc_nr (_18);
# .MEM_47 = VDEF <.MEM_40>
_22 = st_mult (1, _21);
# .MEM_74 = VDEF <.MEM_68>
_64 = __printf_chk (1, "Out of memory, realloc failed%s", "");
# .MEM_124 = VDEF <.MEM_3(D)>
strbuf_init (&buf, 0);
# .MEM_125 = VDEF <.MEM_124>
strbuf_init (&uq, 0);
_5 = __errno_location ();
_12 = __errno_location ();
# VUSE <.MEM_141>
tab_19 = strchr (_18, 9);
# .MEM_146 = VDEF <.MEM_112>
_35 = get_sha1_hex (_34, &sha1);
# .MEM_147 = VDEF <.MEM_146>
strbuf_setlen (&uq, 0);
# VUSE <.MEM_114>
len_68 = strcspn (quoted_67, "\"\\");
# .MEM_148 = VDEF <.MEM_114>
strbuf_grow (&uq, len_68);
# .MEM_149 = VDEF <.MEM_148>
memcpy (_94, quoted_67, len_68);
# .MEM_150 = VDEF <.MEM_149>
strbuf_setlen (&uq, _96);
# .MEM_151 = VDEF <.MEM_150>
strbuf_addch (&uq, ch_88);
# .MEM_152 = VDEF <.MEM_150>
strbuf_setlen (&uq, oldlen_64);
# .MEM_154 = VDEF <.MEM_115>
_40 = __printf_chk (1, "git-update-index: bad quoting of path name%s", "");
# .MEM_156 = VDEF <.MEM_116>
_43 = verify_path (path_name_42);
# .MEM_166 = VDEF <.MEM_156>
_45 = __fprintf_chk (_44, 1, "Ignoring path %s\n", path_name_42);
# .MEM_162 = VDEF <.MEM_156>
_46 = remove_file_from_cache (path_name_42);
# .MEM_163 = VDEF <.MEM_162>
_48 = __printf_chk (1, "git-update-index: unable to remove %s", _47);
# .MEM_159 = VDEF <.MEM_158>
_54 = add_cacheinfo (mode_17, &sha1, path_name_42, stage_53);
# .MEM_160 = VDEF <.MEM_159>
_55 = __printf_chk (1, "git-update-index: unable to update %s", path_name_42);
# .MEM_169 = VDEF <.MEM_119>
_58 = __printf_chk (1, "malformed index info %s", _57);
# .MEM_126 = VDEF <.MEM_121>
strbuf_grow (&buf, 0);
# .MEM_127 = VDEF <.MEM_126>
_97 = feof (_59);
# .MEM_128 = VDEF <.MEM_127>
strbuf_setlen (&buf, 0);
# .MEM_130 = VDEF <.MEM_129>
strbuf_grow (&buf, 1);
# .MEM_129 = VDEF <.MEM_122>
ch_98 = fgetc (_59);
# .MEM_136 = VDEF <.MEM_135>
memset (&buf, 0, 24);
# .MEM_138 = VDEF <.MEM_137>
memset (&uq, 0, 24);
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
===============The second stage : record fucntion =================

=============== The third stage : Start detection  =================
[40;44m =======node_fun:strbuf_grow========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path strbuf_grow  function_call count: 5 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre_check_funciton:strbuf_grow========= [0m
[40;42m =======start_check_funciton:strbuf_grow========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f6cfecfcc60
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_52 = realloc (_24, _23);
    version 52
    ptr-info 0x7f6cfed124c8>
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_62 = realloc (_24, 1);
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
[40;32m    FIND realloc STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_65 = PHI <ret_57(10), ret_63(13)>
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_76 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_76 = ret_65;
lto1: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
_25 = _76;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfcc60
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_52 = realloc (_24, _23);
    version 52
    ptr-info 0x7f6cfed124c8>
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:1 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^
if (_61 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
Cond in fucntion strbuf_grow basic block 11
 ================== possible direct basic block ================= 
from strbuf_grow basic block 12
 ================== possible direct basic block ================= 
from strbuf_grow basic block 13
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
[40;32m    FIND realloc STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
[40;32m    FIND realloc STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location
this stmt have mutiple branch --------
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^
if (ret_57 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
Cond in fucntion strbuf_grow basic block 10
 ================== possible direct basic block ================= 
from strbuf_grow basic block 11
 ================== possible direct basic block ================= 
from strbuf_grow basic block 15
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfcc60
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_52 = realloc (_24, _23);
    version 52
    ptr-info 0x7f6cfed124c8>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:3 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_43>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfcc60
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_52 = realloc (_24, _23);
    version 52
    ptr-info 0x7f6cfed124c8>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:31: warning: use location
  if (sb->len + extra + 1 <= sb->len)
                               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:8: warning: use location
  if (sb->len + extra + 1 <= sb->len)
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_66 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
[40;32m    FIND realloc STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cfecfcc60
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_52 = realloc (_24, _23);
    version 52
    ptr-info 0x7f6cfed124c8>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free :4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f6cfecfcd80
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_56 = realloc (_24, 1);
    version 56
    ptr-info 0x7f6cfed124e0>
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
[40;32m    FIND realloc STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_65 = PHI <ret_57(10), ret_63(13)>
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_76 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_76 = ret_65;
lto1: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
_25 = _76;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfcd80
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_56 = realloc (_24, 1);
    version 56
    ptr-info 0x7f6cfed124e0>
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:1 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^
if (_61 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
Cond in fucntion strbuf_grow basic block 11
 ================== possible direct basic block ================= 
from strbuf_grow basic block 12
 ================== possible direct basic block ================= 
from strbuf_grow basic block 13
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
[40;32m    FIND realloc STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
[40;32m    FIND realloc STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfcd80
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_56 = realloc (_24, 1);
    version 56
    ptr-info 0x7f6cfed124e0>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:3 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_43>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfcd80
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_56 = realloc (_24, 1);
    version 56
    ptr-info 0x7f6cfed124e0>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:31: warning: use location
  if (sb->len + extra + 1 <= sb->len)
                               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:8: warning: use location
  if (sb->len + extra + 1 <= sb->len)
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_66 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^
if (ret_63 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
Cond in fucntion strbuf_grow basic block 13
 ================== possible direct basic block ================= 
from strbuf_grow basic block 14
 ================== possible direct basic block ================= 
from strbuf_grow basic block 15
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
[40;32m    FIND realloc STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location
this stmt have mutiple branch --------

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cfecfcd80
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_56 = realloc (_24, 1);
    version 56
    ptr-info 0x7f6cfed124e0>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free :4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f6cfecfce10
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_58 = realloc (_24, _23);
    version 58
    ptr-info 0x7f6cfed12510>
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
this stmt is child function---realloc-----

 ================== find ================== 
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
[40;32m    FIND realloc STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_65 = PHI <ret_57(10), ret_63(13)>
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_76 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_76 = ret_65;
lto1: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
_25 = _76;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfce10
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_58 = realloc (_24, _23);
    version 58
    ptr-info 0x7f6cfed12510>
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:1 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^
if (_61 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
Cond in fucntion strbuf_grow basic block 11
 ================== possible direct basic block ================= 
from strbuf_grow basic block 12
 ================== possible direct basic block ================= 
from strbuf_grow basic block 13
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
[40;32m    FIND realloc STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
[40;32m    FIND realloc STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location
this stmt have mutiple branch --------
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^
if (ret_57 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
Cond in fucntion strbuf_grow basic block 10
 ================== possible direct basic block ================= 
from strbuf_grow basic block 11
 ================== possible direct basic block ================= 
from strbuf_grow basic block 15
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfce10
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_58 = realloc (_24, _23);
    version 58
    ptr-info 0x7f6cfed12510>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:3 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_43>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfce10
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_58 = realloc (_24, _23);
    version 58
    ptr-info 0x7f6cfed12510>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:31: warning: use location
  if (sb->len + extra + 1 <= sb->len)
                               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:8: warning: use location
  if (sb->len + extra + 1 <= sb->len)
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_66 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
[40;32m    FIND realloc STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cfecfce10
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_58 = realloc (_24, _23);
    version 58
    ptr-info 0x7f6cfed12510>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free :4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f6cfecfcf30
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_62 = realloc (_24, 1);
    version 62
    ptr-info 0x7f6cfed12528>
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
[40;32m    FIND realloc STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_65 = PHI <ret_57(10), ret_63(13)>
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_76 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_76 = ret_65;
lto1: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
_25 = _76;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfcf30
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_62 = realloc (_24, 1);
    version 62
    ptr-info 0x7f6cfed12528>
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:1 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^
if (_61 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
Cond in fucntion strbuf_grow basic block 11
 ================== possible direct basic block ================= 
from strbuf_grow basic block 12
 ================== possible direct basic block ================= 
from strbuf_grow basic block 13
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
[40;32m    FIND realloc STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
[40;32m    FIND realloc STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location
this stmt have mutiple branch --------
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^
if (ret_57 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
Cond in fucntion strbuf_grow basic block 10
 ================== possible direct basic block ================= 
from strbuf_grow basic block 11
 ================== possible direct basic block ================= 
from strbuf_grow basic block 15
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfcf30
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_62 = realloc (_24, 1);
    version 62
    ptr-info 0x7f6cfed12528>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:3 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_43>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfcf30
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_62 = realloc (_24, 1);
    version 62
    ptr-info 0x7f6cfed12528>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:31: warning: use location
  if (sb->len + extra + 1 <= sb->len)
                               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:8: warning: use location
  if (sb->len + extra + 1 <= sb->len)
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_66 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
[40;32m    FIND realloc STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cfecfcf30
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_62 = realloc (_24, 1);
    version 62
    ptr-info 0x7f6cfed12528>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free :4 [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f6cff1b4f90 type <integer_type 0x7f6cff1c85e8 int> constant 1>

dot graph START

======================================================================
 <ssa_name 0x7f6cff1bcb88
    type <integer_type 0x7f6cff1c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f6cff1c8738 precision 64 min <integer_cst 0x7f6cff1b4eb8 0> max <integer_cst 0x7f6cff1b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f6cff1d49d8>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version 9>
# VUSE <.MEM_42(D)>
_9 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cff1bcb88
    type <integer_type 0x7f6cff1c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f6cff1c8738 precision 64 min <integer_cst 0x7f6cff1b4eb8 0> max <integer_cst 0x7f6cff1b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f6cff1d49d8>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version 9>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
if (_11 < _14)
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
if (_11 < _14)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
Cond in fucntion strbuf_grow basic block 5
 ================== possible direct basic block ================= 
from strbuf_grow basic block 6
 ================== possible direct basic block ================= 
from strbuf_grow basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cff1bcb88
    type <integer_type 0x7f6cff1c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f6cff1c8738 precision 64 min <integer_cst 0x7f6cff1b4eb8 0> max <integer_cst 0x7f6cff1b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f6cff1d49d8>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version 9>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f6cff1bce10
    type <integer_type 0x7f6cff1c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f6cff1c8738 precision 64 min <integer_cst 0x7f6cff1b4eb8 0> max <integer_cst 0x7f6cff1b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f6cff1d49d8>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version 18>
# VUSE <.MEM_43>
_18 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cff1bce10
    type <integer_type 0x7f6cff1c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f6cff1c8738 precision 64 min <integer_cst 0x7f6cff1b4eb8 0> max <integer_cst 0x7f6cff1b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f6cff1d49d8>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version 18>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
[40;32m    FIND realloc STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_65 = PHI <ret_57(10), ret_63(13)>
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_76 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_76 = ret_65;
lto1: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
_66 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^
if (ret_63 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
Cond in fucntion strbuf_grow basic block 13
 ================== possible direct basic block ================= 
from strbuf_grow basic block 14
 ================== possible direct basic block ================= 
from strbuf_grow basic block 15
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
[40;32m    FIND realloc STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^
if (_61 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
Cond in fucntion strbuf_grow basic block 11
 ================== possible direct basic block ================= 
from strbuf_grow basic block 12
 ================== possible direct basic block ================= 
from strbuf_grow basic block 13
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
[40;32m    FIND realloc STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location
this stmt have mutiple branch --------
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
[40;32m    FIND realloc STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
 <ssa_name 0x7f6cff1bce10
    type <integer_type 0x7f6cff1c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f6cff1c8738 precision 64 min <integer_cst 0x7f6cff1b4eb8 0> max <integer_cst 0x7f6cff1b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f6cff1d49d8>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version 18>
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_43>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_12 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_13 = _12 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_9 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_10 = alloc_nr (_9);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cff1bce10
    type <integer_type 0x7f6cff1c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f6cff1c8738 precision 64 min <integer_cst 0x7f6cff1b4eb8 0> max <integer_cst 0x7f6cff1b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f6cff1d49d8>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version 18>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_11 = (long unsigned int) _10;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_8 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_5 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_4 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:31: warning: use location
  if (sb->len + extra + 1 <= sb->len)
                               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_1 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:21:8: warning: use location
  if (sb->len + extra + 1 <= sb->len)
        ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cff1bce10
    type <integer_type 0x7f6cff1c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f6cff1c8738 precision 64 min <integer_cst 0x7f6cff1b4eb8 0> max <integer_cst 0x7f6cff1b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f6cff1d49d8>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version 18>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f6cfece1e40 type <integer_type 0x7f6cff1c87e0 long unsigned int> constant 1>
[40;33m =======POP node_fun stack:strbuf_grow========= [0m
[40;44m =======node_fun:strtoul========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path strtoul  function_call count: 0 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:strtoul========= [0m
[40;42m =======start_check_funciton:strtoul========= [0m
[40;33m =======POP node_fun stack:strtoul========= [0m
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 19 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;33m =======POP node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:fgetc========= [0m
[40;33m =======POP node_fun stack:fgetc========= [0m
[40;42m =======pre add _ fucntion:strbuf_grow========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path strbuf_grow  function_call count: 5 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;33m =======POP node_fun stack:alloc_nr========= [0m
[40;42m =======pre_check_funciton:strbuf_grow========= [0m
[40;42m =======start_check_funciton:strbuf_grow========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f6cfecfcc60
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_52 = realloc (_24, _23);
    version 52
    ptr-info 0x7f6cfed124c8>
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_62 = realloc (_24, 1);
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
[40;32m    FIND realloc STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_65 = PHI <ret_57(10), ret_63(13)>
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
ret_65 = PHI <ret_57(10), ret_63(13)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_76 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_76 = ret_65;
In function ‘main’:
lto1: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
_25 = _76;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_25 = _76;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
sb_29(D)->buf = _25;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfcc60
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_52 = realloc (_24, _23);
    version 52
    ptr-info 0x7f6cfed124c8>
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:1 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^
if (_61 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
Cond in fucntion strbuf_grow basic block 11
 ================== possible direct basic block ================= 
from strbuf_grow basic block 12
 ================== possible direct basic block ================= 
from strbuf_grow basic block 13
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
[40;32m    FIND realloc STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
[40;32m    FIND realloc STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location
this stmt have mutiple branch --------
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^
if (ret_57 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
Cond in fucntion strbuf_grow basic block 10
 ================== possible direct basic block ================= 
from strbuf_grow basic block 11
 ================== possible direct basic block ================= 
from strbuf_grow basic block 15
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfcc60
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_52 = realloc (_24, _23);
    version 52
    ptr-info 0x7f6cfed124c8>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:3 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_43>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_12 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_13 = _12 + extra_30(D);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_9 = sb_29(D)->alloc;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_10 = alloc_nr (_9);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfcc60
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_52 = realloc (_24, _23);
    version 52
    ptr-info 0x7f6cfed124c8>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_11 = (long unsigned int) _10;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_8 = sb_29(D)->alloc;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_5 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_4 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:21:31: warning: use location
  if (sb->len + extra + 1 <= sb->len)
                               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_1 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:21:8: warning: use location
  if (sb->len + extra + 1 <= sb->len)
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_66 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_66 = ret_65;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
[40;32m    FIND realloc STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cfecfcc60
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_52 = realloc (_24, _23);
    version 52
    ptr-info 0x7f6cfed124c8>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free :4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f6cfecfcd80
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_56 = realloc (_24, 1);
    version 56
    ptr-info 0x7f6cfed124e0>
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
[40;32m    FIND realloc STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_65 = PHI <ret_57(10), ret_63(13)>
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
ret_65 = PHI <ret_57(10), ret_63(13)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_76 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_76 = ret_65;
In function ‘main’:
lto1: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
_25 = _76;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_25 = _76;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
sb_29(D)->buf = _25;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfcd80
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_56 = realloc (_24, 1);
    version 56
    ptr-info 0x7f6cfed124e0>
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:1 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^
if (_61 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
Cond in fucntion strbuf_grow basic block 11
 ================== possible direct basic block ================= 
from strbuf_grow basic block 12
 ================== possible direct basic block ================= 
from strbuf_grow basic block 13
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
[40;32m    FIND realloc STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
[40;32m    FIND realloc STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfcd80
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_56 = realloc (_24, 1);
    version 56
    ptr-info 0x7f6cfed124e0>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:3 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_43>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_12 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_13 = _12 + extra_30(D);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_9 = sb_29(D)->alloc;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_10 = alloc_nr (_9);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfcd80
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_56 = realloc (_24, 1);
    version 56
    ptr-info 0x7f6cfed124e0>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_11 = (long unsigned int) _10;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_8 = sb_29(D)->alloc;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_5 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_4 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:21:31: warning: use location
  if (sb->len + extra + 1 <= sb->len)
                               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_1 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:21:8: warning: use location
  if (sb->len + extra + 1 <= sb->len)
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_66 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_66 = ret_65;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^
if (ret_63 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
Cond in fucntion strbuf_grow basic block 13
 ================== possible direct basic block ================= 
from strbuf_grow basic block 14
 ================== possible direct basic block ================= 
from strbuf_grow basic block 15
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
[40;32m    FIND realloc STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location
this stmt have mutiple branch --------

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cfecfcd80
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_56 = realloc (_24, 1);
    version 56
    ptr-info 0x7f6cfed124e0>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free :4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f6cfecfce10
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_58 = realloc (_24, _23);
    version 58
    ptr-info 0x7f6cfed12510>
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
this stmt is child function---realloc-----

 ================== find ================== 
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
[40;32m    FIND realloc STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_65 = PHI <ret_57(10), ret_63(13)>
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
ret_65 = PHI <ret_57(10), ret_63(13)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_76 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_76 = ret_65;
In function ‘main’:
lto1: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
_25 = _76;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_25 = _76;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
sb_29(D)->buf = _25;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfce10
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_58 = realloc (_24, _23);
    version 58
    ptr-info 0x7f6cfed12510>
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:1 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^
if (_61 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
Cond in fucntion strbuf_grow basic block 11
 ================== possible direct basic block ================= 
from strbuf_grow basic block 12
 ================== possible direct basic block ================= 
from strbuf_grow basic block 13
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
[40;32m    FIND realloc STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
[40;32m    FIND realloc STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location
this stmt have mutiple branch --------
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^
if (ret_57 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
Cond in fucntion strbuf_grow basic block 10
 ================== possible direct basic block ================= 
from strbuf_grow basic block 11
 ================== possible direct basic block ================= 
from strbuf_grow basic block 15
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfce10
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_58 = realloc (_24, _23);
    version 58
    ptr-info 0x7f6cfed12510>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:3 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_43>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_12 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_13 = _12 + extra_30(D);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_9 = sb_29(D)->alloc;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_10 = alloc_nr (_9);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfce10
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_58 = realloc (_24, _23);
    version 58
    ptr-info 0x7f6cfed12510>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_11 = (long unsigned int) _10;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_8 = sb_29(D)->alloc;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_5 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_4 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:21:31: warning: use location
  if (sb->len + extra + 1 <= sb->len)
                               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_1 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:21:8: warning: use location
  if (sb->len + extra + 1 <= sb->len)
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_66 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_66 = ret_65;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
[40;32m    FIND realloc STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cfecfce10
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_58 = realloc (_24, _23);
    version 58
    ptr-info 0x7f6cfed12510>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free :4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f6cfecfcf30
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_62 = realloc (_24, 1);
    version 62
    ptr-info 0x7f6cfed12528>
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
[40;32m    FIND realloc STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_65 = PHI <ret_57(10), ret_63(13)>
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
ret_65 = PHI <ret_57(10), ret_63(13)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_76 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_76 = ret_65;
In function ‘main’:
lto1: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
_25 = _76;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_25 = _76;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
sb_29(D)->buf = _25;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfcf30
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_62 = realloc (_24, 1);
    version 62
    ptr-info 0x7f6cfed12528>
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:1 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^
if (_61 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
Cond in fucntion strbuf_grow basic block 11
 ================== possible direct basic block ================= 
from strbuf_grow basic block 12
 ================== possible direct basic block ================= 
from strbuf_grow basic block 13
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
[40;32m    FIND realloc STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
[40;32m    FIND realloc STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location
this stmt have mutiple branch --------
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^
if (ret_57 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
Cond in fucntion strbuf_grow basic block 10
 ================== possible direct basic block ================= 
from strbuf_grow basic block 11
 ================== possible direct basic block ================= 
from strbuf_grow basic block 15
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfcf30
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_62 = realloc (_24, 1);
    version 62
    ptr-info 0x7f6cfed12528>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:3 
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_43>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_12 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_13 = _12 + extra_30(D);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_9 = sb_29(D)->alloc;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_10 = alloc_nr (_9);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cfecfcf30
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_62 = realloc (_24, 1);
    version 62
    ptr-info 0x7f6cfed12528>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:3 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_11 = (long unsigned int) _10;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_8 = sb_29(D)->alloc;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_5 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_4 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:21:31: warning: use location
  if (sb->len + extra + 1 <= sb->len)
                               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_1 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:21:8: warning: use location
  if (sb->len + extra + 1 <= sb->len)
        ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_66 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_66 = ret_65;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
[40;32m    FIND realloc STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cfecfcf30
    type <pointer_type 0x7f6cff1cf0a8
        type <void_type 0x7f6cff1c8f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f6cff1cf0a8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cff1d4bd0>>
    var <var_decl 0x7f6cfed01510 ret>
    def_stmt ret_62 = realloc (_24, 1);
    version 62
    ptr-info 0x7f6cfed12528>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_25 = _76;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_57 == 0B)
./benchmarks/git/double_free_2/../git.h:417:5: warning: use location
  if (!ret) {
     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free :4 [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f6cff1b4f90 type <integer_type 0x7f6cff1c85e8 int> constant 1>

dot graph START

======================================================================
 <ssa_name 0x7f6cff1bcb88
    type <integer_type 0x7f6cff1c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f6cff1c8738 precision 64 min <integer_cst 0x7f6cff1b4eb8 0> max <integer_cst 0x7f6cff1b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f6cff1d49d8>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version 9>
# VUSE <.MEM_42(D)>
_9 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_10 = alloc_nr (_9);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cff1bcb88
    type <integer_type 0x7f6cff1c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f6cff1c8738 precision 64 min <integer_cst 0x7f6cff1b4eb8 0> max <integer_cst 0x7f6cff1b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f6cff1d49d8>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version 9>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_11 = (long unsigned int) _10;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_11 < _14)
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
if (_11 < _14)
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
if (_11 < _14)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
Cond in fucntion strbuf_grow basic block 5
 ================== possible direct basic block ================= 
from strbuf_grow basic block 6
 ================== possible direct basic block ================= 
from strbuf_grow basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cff1bcb88
    type <integer_type 0x7f6cff1c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f6cff1c8738 precision 64 min <integer_cst 0x7f6cff1b4eb8 0> max <integer_cst 0x7f6cff1b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f6cff1d49d8>>
   
    def_stmt _9 = sb_29(D)->alloc;
    version 9>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f6cff1bce10
    type <integer_type 0x7f6cff1c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f6cff1c8738 precision 64 min <integer_cst 0x7f6cff1b4eb8 0> max <integer_cst 0x7f6cff1b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f6cff1d49d8>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version 18>
# VUSE <.MEM_43>
_18 = sb_29(D)->alloc;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_19 = alloc_nr (_18);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cff1bce10
    type <integer_type 0x7f6cff1c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f6cff1c8738 precision 64 min <integer_cst 0x7f6cff1b4eb8 0> max <integer_cst 0x7f6cff1b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f6cff1d49d8>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version 18>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:0 
_20 = (long unsigned int) _19;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
sb_29(D)->alloc = _20;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
sb_29(D)->buf = _25;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
sb_29(D)->buf = _25;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
_24 = sb_29(D)->buf;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
[40;32m    FIND realloc STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_65 = PHI <ret_57(10), ret_63(13)>
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
ret_65 = PHI <ret_57(10), ret_63(13)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_76 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_76 = ret_65;
In function ‘main’:
lto1: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
_66 = ret_65;
bb index := 15
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 15 ,possiable got to succ := 16

======================================================================
_66 = ret_65;
In function ‘main’:
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^
if (ret_63 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
Cond in fucntion strbuf_grow basic block 13
 ================== possible direct basic block ================= 
from strbuf_grow basic block 14
 ================== possible direct basic block ================= 
from strbuf_grow basic block 15
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
[40;32m    FIND realloc STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^
if (_61 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
Cond in fucntion strbuf_grow basic block 11
 ================== possible direct basic block ================= 
from strbuf_grow basic block 12
 ================== possible direct basic block ================= 
from strbuf_grow basic block 13
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
[40;32m    FIND realloc STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location
this stmt have mutiple branch --------
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
[40;32m    FIND realloc STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^
_21 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
_22 = st_mult (1, _21);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
this stmt is child function---st_mult-----

 ================== trace ================== 
 <ssa_name 0x7f6cff1bce10
    type <integer_type 0x7f6cff1c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f6cff1c8738 precision 64 min <integer_cst 0x7f6cff1b4eb8 0> max <integer_cst 0x7f6cff1b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f6cff1d49d8>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version 18>
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 
_23 = (long unsigned int) _22;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^
_18 = sb_29(D)->alloc;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
sb_29(D)->alloc = _17;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_15 = sb_29(D)->len;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
_16 = _15 + extra_30(D);
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_43>
_12 = sb_29(D)->len;
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_12 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_13 = _12 + extra_30(D);
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_13 = _12 + extra_30(D);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_9 = sb_29(D)->alloc;
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_9 = sb_29(D)->alloc;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_10 = alloc_nr (_9);
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_10 = alloc_nr (_9);
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^
this stmt is child function---alloc_nr-----

 ================== trace ================== 
 <ssa_name 0x7f6cff1bce10
    type <integer_type 0x7f6cff1c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f6cff1c8738 precision 64 min <integer_cst 0x7f6cff1b4eb8 0> max <integer_cst 0x7f6cff1b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f6cff1d49d8>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version 18>
trace fucntion name:alloc_nr 

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_11 = (long unsigned int) _10;
bb index := 5
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 5 ,possiable got to succ := 16

======================================================================
_11 = (long unsigned int) _10;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_8 = sb_29(D)->alloc;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_8 = sb_29(D)->alloc;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_5 = sb_29(D)->len;
bb index := 4
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 4 ,possiable got to succ := 62

======================================================================
_5 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_4 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_4 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:21:31: warning: use location
  if (sb->len + extra + 1 <= sb->len)
                               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
In function ‘strbuf_grow’:
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
_1 = sb_29(D)->len;
bb index := 2
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 2 ,possiable got to succ := 62

======================================================================
_1 = sb_29(D)->len;
In function ‘main’:
./benchmarks/git/double_free_2/git_df_2.c:21:8: warning: use location
  if (sb->len + extra + 1 <= sb->len)
        ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cff1bce10
    type <integer_type 0x7f6cff1c87e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f6cff1c8738 precision 64 min <integer_cst 0x7f6cff1b4eb8 0> max <integer_cst 0x7f6cff1b6500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f6cff1d49d8>>
   
    def_stmt _18 = sb_29(D)->alloc;
    version 18>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
# .MEM_49 = VDEF <.MEM_69>
sb_29(D)->buf = _25;
./benchmarks/git/double_free_2/git_df_2.c:23:2: warning: use location
  ALLOC_GROW(sb->buf, sb->len + extra + 1, sb->alloc); /* allocation site */
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_63 = PHI <ret_58(11), ret_62(12)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_65 = PHI <ret_57(10), ret_63(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_76 = ret_65;
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
_66 = ret_65;
./benchmarks/git/double_free_2/../git.h:424:9: warning: use location
  return ret;
         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
if (ret_63 == 0B)
./benchmarks/git/double_free_2/../git.h:421:6: warning: use location
   if (!ret)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_59 = ret_58 == 0B;
./benchmarks/git/double_free_2/../git.h:419:7: warning: use location
   if (!ret && !size)
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_61 = _59 & _60;
./benchmarks/git/double_free_2/../git.h:419:12: warning: use location
   if (!ret && !size)
            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
if (_61 != 0)
./benchmarks/git/double_free_2/../git.h:419:6: warning: use location
   if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: Use after free error!: free location 
    ret = realloc(ptr, 1);
        ^
ret_57 = PHI <ret_52(8), ret_56(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_53 = ret_52 == 0B;
./benchmarks/git/double_free_2/../git.h:415:6: warning: use location
  if (!ret && !size)
      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_55 = _53 & _54;
./benchmarks/git/double_free_2/../git.h:415:11: warning: use location
  if (!ret && !size)
           ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: Use after free error!: free location 
   ret = realloc(ptr, 1);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: Use after free error!: free location 
   ret = realloc(ptr, size);
       ^
_60 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:419:15: warning: use location
   if (!ret && !size)
               ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: Use after free error!: free location 
  ret = realloc(ptr, size);
      ^
_54 = _23 == 0;
./benchmarks/git/double_free_2/../git.h:415:14: warning: use location
  if (!ret && !size)
              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f6cfece1e40 type <integer_type 0x7f6cff1c87e0 long unsigned int> constant 1>
[40;33m =======POP node_fun stack:strbuf_grow========= [0m
[40;42m =======pre add _ fucntion:strbuf_setlen========= [0m
[40;33m =======POP node_fun stack:strbuf_setlen========= [0m
[40;42m =======pre add _ fucntion:feof========= [0m
[40;33m =======POP node_fun stack:feof========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:add_cacheinfo========= [0m
[40;33m =======POP node_fun stack:add_cacheinfo========= [0m
[40;42m =======pre add _ fucntion:remove_file_from_cache========= [0m
[40;33m =======POP node_fun stack:remove_file_from_cache========= [0m
[40;42m =======pre add _ fucntion:__fprintf_chk========= [0m
[40;33m =======POP node_fun stack:__fprintf_chk========= [0m
[40;42m =======pre add _ fucntion:verify_path========= [0m
[40;33m =======POP node_fun stack:verify_path========= [0m
[40;42m =======pre add _ fucntion:strbuf_addch========= [0m
[40;33m =======POP node_fun stack:strbuf_addch========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strcspn========= [0m
[40;33m =======POP node_fun stack:strcspn========= [0m
[40;42m =======pre add _ fucntion:get_sha1_hex========= [0m
[40;33m =======POP node_fun stack:get_sha1_hex========= [0m
[40;42m =======pre add _ fucntion:strchr========= [0m
[40;33m =======POP node_fun stack:strchr========= [0m
[40;42m =======pre add _ fucntion:__errno_location========= [0m
[40;33m =======POP node_fun stack:__errno_location========= [0m
[40;42m =======pre add _ fucntion:strbuf_init========= [0m
[40;33m =======POP node_fun stack:strbuf_init========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f6cfed105e0
    type <pointer_type 0x7f6cfecdebd0
        type <record_type 0x7f6cfecdeb28 strbuf BLK
            size <integer_cst 0x7f6cff1d00a8 constant 192>
            unit size <integer_cst 0x7f6cff1d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfecdeb28 fields <field_decl 0x7f6cfece0390 alloc> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfecdebd0> chain <type_decl 0x7f6cfece0428 D.3992>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f6cfed09990 buf type <record_type 0x7f6cfecdeb28 strbuf>
        addressable used BLK file ./benchmarks/git/double_free_2/git_df_2.c line 138 col 16 size <integer_cst 0x7f6cff1d00a8 192> unit size <integer_cst 0x7f6cff1d0078 24>
        align 128 context <function_decl 0x7f6cfecdfb00 main> abstract_origin <var_decl 0x7f6cfed01c60 buf>
        chain <var_decl 0x7f6cfed09a20 uq type <record_type 0x7f6cfecdeb28 strbuf>
            addressable used BLK file ./benchmarks/git/double_free_2/git_df_2.c line 139 col 16 size <integer_cst 0x7f6cff1d00a8 192> unit size <integer_cst 0x7f6cff1d0078 24>
            align 128 context <function_decl 0x7f6cfecdfb00 main> abstract_origin <var_decl 0x7f6cfed01bd0 uq> chain <label_decl 0x7f6cfecedf00 bad_line>>>
    ./benchmarks/git/double_free_2/git_df_2.c:141:2 start: ./benchmarks/git/double_free_2/git_df_2.c:141:2 finish: ./benchmarks/git/double_free_2/git_df_2.c:141:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f6cfed10660
    type <pointer_type 0x7f6cfecdebd0
        type <record_type 0x7f6cfecdeb28 strbuf BLK
            size <integer_cst 0x7f6cff1d00a8 constant 192>
            unit size <integer_cst 0x7f6cff1d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfecdeb28 fields <field_decl 0x7f6cfece0390 alloc> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfecdebd0> chain <type_decl 0x7f6cfece0428 D.3992>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f6cfed09a20 uq type <record_type 0x7f6cfecdeb28 strbuf>
        addressable used BLK file ./benchmarks/git/double_free_2/git_df_2.c line 139 col 16 size <integer_cst 0x7f6cff1d00a8 192> unit size <integer_cst 0x7f6cff1d0078 24>
        align 128 context <function_decl 0x7f6cfecdfb00 main> abstract_origin <var_decl 0x7f6cfed01bd0 uq>
        chain <label_decl 0x7f6cfecedf00 bad_line type <void_type 0x7f6cff1c8f18 void>
            used VOID file ./benchmarks/git/double_free_2/git_df_2.c line 225 col 2
            align 1 context <function_decl 0x7f6cfecdfb00 main> initial <error_mark 0x7f6cff1b4bd0> abstract_origin <label_decl 0x7f6cfeced000 bad_line>>>
    ./benchmarks/git/double_free_2/git_df_2.c:142:2 start: ./benchmarks/git/double_free_2/git_df_2.c:142:2 finish: ./benchmarks/git/double_free_2/git_df_2.c:142:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f6cff1bc678
    type <pointer_type 0x7f6cff1cfa80
        type <integer_type 0x7f6cff1c85e8 int public SI
            size <integer_cst 0x7f6cff1b4e28 constant 32>
            unit size <integer_cst 0x7f6cff1b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f6cff1c85e8 precision 32 min <integer_cst 0x7f6cff1b4de0 -2147483648> max <integer_cst 0x7f6cff1b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f6cff1cfa80>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _5 = __errno_location ();
    version 5
    ptr-info 0x7f6cfed125e8>
_5 = __errno_location ();

 ================== trace ptable================== 
trace fucntion name:__errno_location 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---__errno_location-----
this other function ------__errno_location-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_141 = VDEF <.MEM_123>
*_5 = 0;
bb index := 3
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_5 = 0;
./benchmarks/git/double_free_2/git_df_2.c:167:9: warning: use location
   errno = 0;
         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = __errno_location ();
bb index := 3
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 3 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_5 = __errno_location ();
./benchmarks/git/double_free_2/git_df_2.c:167:3: warning: use location
   errno = 0;
   ^
this stmt is child function---__errno_location-----

 ================== trace ================== 
 <ssa_name 0x7f6cff1bc678
    type <pointer_type 0x7f6cff1cfa80
        type <integer_type 0x7f6cff1c85e8 int public SI
            size <integer_cst 0x7f6cff1b4e28 constant 32>
            unit size <integer_cst 0x7f6cff1b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f6cff1c85e8 precision 32 min <integer_cst 0x7f6cff1b4de0 -2147483648> max <integer_cst 0x7f6cff1b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f6cff1cfa80>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _5 = __errno_location ();
    version 5
    ptr-info 0x7f6cfed125e8>
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cff1bc678
    type <pointer_type 0x7f6cff1cfa80
        type <integer_type 0x7f6cff1c85e8 int public SI
            size <integer_cst 0x7f6cff1b4e28 constant 32>
            unit size <integer_cst 0x7f6cff1b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f6cff1c85e8 precision 32 min <integer_cst 0x7f6cff1b4de0 -2147483648> max <integer_cst 0x7f6cff1b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f6cff1cfa80>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _5 = __errno_location ();
    version 5
    ptr-info 0x7f6cfed125e8>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: use location
    free(path_name);
    ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_135 = VDEF <.MEM_123>
free (_111);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_137 = VDEF <.MEM_136>
free (_110);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f6cfed166c0
    type <pointer_type 0x7f6cff1cfa80
        type <integer_type 0x7f6cff1c85e8 int public SI
            size <integer_cst 0x7f6cff1b4e28 constant 32>
            unit size <integer_cst 0x7f6cff1b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f6cff1c85e8 precision 32 min <integer_cst 0x7f6cff1b4de0 -2147483648> max <integer_cst 0x7f6cff1b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f6cff1cfa80>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = __errno_location ();
    version 12
    ptr-info 0x7f6cfed12660>
_12 = __errno_location ();

 ================== trace ptable================== 
trace fucntion name:__errno_location 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---__errno_location-----
this other function ------__errno_location-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_13 = *_12;
./benchmarks/git/double_free_2/git_df_2.c:170:10: warning: use location
       || errno || (unsigned int) ul != ul)
          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_13 != 0)
./benchmarks/git/double_free_2/git_df_2.c:170:7: warning: use location
       || errno || (unsigned int) ul != ul)
       ^
if (_13 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:170:7: warning: use location
Cond in fucntion main basic block 5
 ================== possible direct basic block ================= 
from main basic block 50
 ================== possible direct basic block ================= 
from main basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_12 = __errno_location ();
./benchmarks/git/double_free_2/git_df_2.c:170:10: warning: use location
       || errno || (unsigned int) ul != ul)
          ^
this stmt is child function---__errno_location-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed166c0
    type <pointer_type 0x7f6cff1cfa80
        type <integer_type 0x7f6cff1c85e8 int public SI
            size <integer_cst 0x7f6cff1b4e28 constant 32>
            unit size <integer_cst 0x7f6cff1b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f6cff1c85e8 precision 32 min <integer_cst 0x7f6cff1b4de0 -2147483648> max <integer_cst 0x7f6cff1b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f6cff1cfa80>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = __errno_location ();
    version 12
    ptr-info 0x7f6cfed12660>
trace fucntion name:__errno_location 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cfed166c0
    type <pointer_type 0x7f6cff1cfa80
        type <integer_type 0x7f6cff1c85e8 int public SI
            size <integer_cst 0x7f6cff1b4e28 constant 32>
            unit size <integer_cst 0x7f6cff1b4e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f6cff1c85e8 precision 32 min <integer_cst 0x7f6cff1b4de0 -2147483648> max <integer_cst 0x7f6cff1b4df8 2147483647>
            pointer_to_this <pointer_type 0x7f6cff1cfa80>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _12 = __errno_location ();
    version 12
    ptr-info 0x7f6cfed12660>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: use location
    free(path_name);
    ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_135 = VDEF <.MEM_123>
free (_111);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_137 = VDEF <.MEM_136>
free (_110);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f6cfed16870
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
   
    def_stmt _18 = ptr_172;
    version 18
    ptr-info 0x7f6cfed12678>
_18 = ptr_172;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_19 = strchr (_18, 9);
./benchmarks/git/double_free_2/git_df_2.c:174:7: warning: use location
   tab = strchr(ptr, '\t');
       ^
this stmt is child function---strchr-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed16870
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
   
    def_stmt _18 = ptr_172;
    version 18
    ptr-info 0x7f6cfed12678>
trace fucntion name:strchr 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_27 = MEM[(char *)tab_19 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:179:15: warning: use location
    stage = tab[-1] - '0';
               ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_28 = (int) _27;
./benchmarks/git/double_free_2/git_df_2.c:179:15: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
stage_29 = _28 + -48;
./benchmarks/git/double_free_2/git_df_2.c:179:10: warning: use location
    stage = tab[-1] - '0';
          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
stage_53 = PHI <stage_29(12), 0(13)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_54 = add_cacheinfo (mode_17, &sha1, path_name_42, stage_53);
./benchmarks/git/double_free_2/git_df_2.c:217:8: warning: use location
    if (add_cacheinfo(mode, sha1, path_name, stage))
        ^
this stmt is child function---add_cacheinfo-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed16870
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
   
    def_stmt _18 = ptr_172;
    version 18
    ptr-info 0x7f6cfed12678>
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_54 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:7: warning: use location
    if (add_cacheinfo(mode, sha1, path_name, stage))
       ^
if (_54 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:217:7: warning: use location
Cond in fucntion main basic block 45
 ================== possible direct basic block ================= 
from main basic block 46
 ================== possible direct basic block ================= 
from main basic block 47
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_17 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:6: warning: use location
   if (!mode) {
      ^
if (mode_17 == 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:205:6: warning: use location
Cond in fucntion main basic block 42
 ================== possible direct basic block ================= 
from main basic block 43
 ================== possible direct basic block ================= 
from main basic block 45
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: use location
    free(path_name);
    ^
this stmt is child function---free-----

 ================== find ================== 
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
_55 = __printf_chk (1, "git-update-index: unable to update %s", path_name_42);
this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed16870
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
   
    def_stmt _18 = ptr_172;
    version 18
    ptr-info 0x7f6cfed12678>
trace fucntion name:__printf_chk 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_46 = remove_file_from_cache (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:207:8: warning: use location
    if (remove_file_from_cache(path_name))
        ^
this stmt is child function---remove_file_from_cache-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed16870
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
   
    def_stmt _18 = ptr_172;
    version 18
    ptr-info 0x7f6cfed12678>
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_45 = __fprintf_chk (_44, 1, "Ignoring path %s\n", path_name_42);
this stmt is child function---__fprintf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed16870
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
   
    def_stmt _18 = ptr_172;
    version 18
    ptr-info 0x7f6cfed12678>
trace fucntion name:__fprintf_chk 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_43 = verify_path (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:200:8: warning: use location
   if (!verify_path(path_name)) {
        ^
this stmt is child function---verify_path-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed16870
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
   
    def_stmt _18 = ptr_172;
    version 18
    ptr-info 0x7f6cfed12678>
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (path_name_42 != _56)
./benchmarks/git/double_free_2/git_df_2.c:221:6: warning: use location
   if (path_name != ptr)
      ^
if (path_name_42 != _56)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:221:6: warning: use location
Cond in fucntion main basic block 47
 ================== possible direct basic block ================= 
from main basic block 48
 ================== possible direct basic block ================= 
from main basic block 49
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_26 = MEM[(char *)tab_19 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:178:46: warning: use location
   if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
                                              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_26 <= 51)
./benchmarks/git/double_free_2/git_df_2.c:178:40: warning: use location
   if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
                                        ^
if (_26 <= 51)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:178:40: warning: use location
Cond in fucntion main basic block 11
 ================== possible direct basic block ================= 
from main basic block 12
 ================== possible direct basic block ================= 
from main basic block 13
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_25 = MEM[(char *)tab_19 + -1B];
./benchmarks/git/double_free_2/git_df_2.c:178:35: warning: use location
   if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
                                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_25 > 47)
./benchmarks/git/double_free_2/git_df_2.c:178:22: warning: use location
   if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
                      ^
if (_25 > 47)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:178:22: warning: use location
Cond in fucntion main basic block 10
 ================== possible direct basic block ================= 
from main basic block 11
 ================== possible direct basic block ================= 
from main basic block 13
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_24 = MEM[(char *)tab_19 + -2B];
./benchmarks/git/double_free_2/git_df_2.c:178:10: warning: use location
   if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_24 == 32)
./benchmarks/git/double_free_2/git_df_2.c:178:6: warning: use location
   if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
      ^
if (_24 == 32)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:178:6: warning: use location
Cond in fucntion main basic block 9
 ================== possible direct basic block ================= 
from main basic block 10
 ================== possible direct basic block ================= 
from main basic block 13
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_33 = PHI <tab_31(12), tab_19(13)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_36 = MEM[(char *)tab_33 + -41B];
./benchmarks/git/double_free_2/git_df_2.c:188:42: warning: use location
   if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
                                          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_34 = tab_33 + 18446744073709551576;
./benchmarks/git/double_free_2/git_df_2.c:188:7: warning: use location
   if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
       ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_35 = get_sha1_hex (_34, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:7: warning: use location
this stmt is child function---get_sha1_hex-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed16870
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
   
    def_stmt _18 = ptr_172;
    version 18
    ptr-info 0x7f6cfed12678>
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_32 = tab_19 + 1;
./benchmarks/git/double_free_2/git_df_2.c:185:14: warning: use location
    ptr = tab + 1; /* point at the head of path */
              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
tab_31 = tab_19 + 18446744073709551614;
./benchmarks/git/double_free_2/git_df_2.c:181:8: warning: use location
    tab = tab - 2; /* point at tail of sha1 */
        ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_20 = (long int) tab_19;
./benchmarks/git/double_free_2/git_df_2.c:175:19: warning: use location
   if (!tab || tab - ptr < 41)
                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (tab_19 == 0B)
./benchmarks/git/double_free_2/git_df_2.c:175:6: warning: use location
   if (!tab || tab - ptr < 41)
      ^
if (tab_19 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:175:6: warning: use location
Cond in fucntion main basic block 7
 ================== possible direct basic block ================= 
from main basic block 50
 ================== possible direct basic block ================= 
from main basic block 8
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cfed16870
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
   
    def_stmt _18 = ptr_172;
    version 18
    ptr-info 0x7f6cfed12678>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: use location
    free(path_name);
    ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_135 = VDEF <.MEM_123>
free (_111);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_137 = VDEF <.MEM_136>
free (_110);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: Use after free error!: free location 
    free(path_name);
    ^
stage_53 = PHI <stage_29(12), 0(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: Use after free error!: free location 
stage_53 = PHI <stage_29(12), 0(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_135 = VDEF <.MEM_123>
free (_111);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: Use after free error!: free location 
     free(sb->buf);
     ^
stage_53 = PHI <stage_29(12), 0(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_137 = VDEF <.MEM_136>
free (_110);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: Use after free error!: free location 
     free(sb->buf);
     ^
stage_53 = PHI <stage_29(12), 0(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: Use after free error!: free location 
    free(path_name);
    ^
tab_33 = PHI <tab_31(12), tab_19(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: Use after free error!: free location 
tab_33 = PHI <tab_31(12), tab_19(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_135 = VDEF <.MEM_123>
free (_111);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: Use after free error!: free location 
     free(sb->buf);
     ^
tab_33 = PHI <tab_31(12), tab_19(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_137 = VDEF <.MEM_136>
free (_110);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: Use after free error!: free location 
     free(sb->buf);
     ^
tab_33 = PHI <tab_31(12), tab_19(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f6cfed16cf0
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
   
    def_stmt _34 = tab_33 + 18446744073709551576;
    version 34
    ptr-info 0x7f6cfed12720>
_34 = tab_33 + 18446744073709551576;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_35 = get_sha1_hex (_34, &sha1);
./benchmarks/git/double_free_2/git_df_2.c:188:7: warning: use location
   if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
       ^
this stmt is child function---get_sha1_hex-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed16cf0
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
   
    def_stmt _34 = tab_33 + 18446744073709551576;
    version 34
    ptr-info 0x7f6cfed12720>
trace fucntion name:get_sha1_hex 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_35 != 0)
./benchmarks/git/double_free_2/git_df_2.c:188:6: warning: use location
   if (get_sha1_hex(tab - 40, sha1) || tab[-41] != ' ')
      ^
if (_35 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:188:6: warning: use location
Cond in fucntion main basic block 14
 ================== possible direct basic block ================= 
from main basic block 50
 ================== possible direct basic block ================= 
from main basic block 15
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cfed16cf0
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
   
    def_stmt _34 = tab_33 + 18446744073709551576;
    version 34
    ptr-info 0x7f6cfed12720>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: use location
    free(path_name);
    ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_135 = VDEF <.MEM_123>
free (_111);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_137 = VDEF <.MEM_136>
free (_110);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f6cfed20460
    type <pointer_type 0x7f6cfecdebd0
        type <record_type 0x7f6cfecdeb28 strbuf BLK
            size <integer_cst 0x7f6cff1d00a8 constant 192>
            unit size <integer_cst 0x7f6cff1d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfecdeb28 fields <field_decl 0x7f6cfece0390 alloc> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfecdebd0> chain <type_decl 0x7f6cfece0428 D.3992>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f6cfed09a20 uq type <record_type 0x7f6cfecdeb28 strbuf>
        addressable used BLK file ./benchmarks/git/double_free_2/git_df_2.c line 139 col 16 size <integer_cst 0x7f6cff1d00a8 192> unit size <integer_cst 0x7f6cff1d0078 24>
        align 128 context <function_decl 0x7f6cfecdfb00 main> abstract_origin <var_decl 0x7f6cfed01bd0 uq>
        chain <label_decl 0x7f6cfecedf00 bad_line type <void_type 0x7f6cff1c8f18 void>
            used VOID file ./benchmarks/git/double_free_2/git_df_2.c line 225 col 2
            align 1 context <function_decl 0x7f6cfecdfb00 main> initial <error_mark 0x7f6cff1b4bd0> abstract_origin <label_decl 0x7f6cfeced000 bad_line>>>
    ./benchmarks/git/double_free_2/git_df_2.c:193:4 start: ./benchmarks/git/double_free_2/git_df_2.c:193:4 finish: ./benchmarks/git/double_free_2/git_df_2.c:193:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f6cfed231b0
    type <pointer_type 0x7f6cfece6498
        type <integer_type 0x7f6cfece63f0 char readonly public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfece6498>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cfece6540>>
    var <var_decl 0x7f6cfed24090 quoted>
    def_stmt quoted_67 = PHI <quoted_65(20), quoted_90(35)>
    version 67
    ptr-info 0x7f6cfed12870>
quoted_67 = PHI <quoted_65(20), quoted_90(35)>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
memcpy (_94, quoted_67, len_68);
./benchmarks/git/double_free_2/git_df_2.c:35:2: warning: use location
  memcpy(sb->buf + sb->len, data, len);
  ^
this stmt is child function---memcpy-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed231b0
    type <pointer_type 0x7f6cfece6498
        type <integer_type 0x7f6cfece63f0 char readonly public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfece6498>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cfece6540>>
    var <var_decl 0x7f6cfed24090 quoted>
    def_stmt quoted_67 = PHI <quoted_65(20), quoted_90(35)>
    version 67
    ptr-info 0x7f6cfed12870>
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
len_68 = strcspn (quoted_67, "\"\\");
./benchmarks/git/double_free_2/git_df_2.c:87:7: warning: use location
   len = strcspn(quoted, "\"\\");
       ^
this stmt is child function---strcspn-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed231b0
    type <pointer_type 0x7f6cfece6498
        type <integer_type 0x7f6cfece63f0 char readonly public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfece6498>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cfece6540>>
    var <var_decl 0x7f6cfed24090 quoted>
    def_stmt quoted_67 = PHI <quoted_65(20), quoted_90(35)>
    version 67
    ptr-info 0x7f6cfed12870>
trace fucntion name:strcspn 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_grow (&uq, len_68);
./benchmarks/git/double_free_2/git_df_2.c:34:2: warning: use location
  strbuf_grow(sb, len);
  ^
this stmt is child function---strbuf_grow-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed231b0
    type <pointer_type 0x7f6cfece6498
        type <integer_type 0x7f6cfece63f0 char readonly public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfece6498>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cfece6540>>
    var <var_decl 0x7f6cfed24090 quoted>
    def_stmt quoted_67 = PHI <quoted_65(20), quoted_90(35)>
    version 67
    ptr-info 0x7f6cfed12870>
trace fucntion name:strbuf_grow 
[40;44m =======trace_function_path strbuf_grow  function_call count: 5 level :0========  [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
[40;31m  find free stmt free same pointer [0m
# .MEM_70 = VDEF <.MEM_47>
ret_52 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:414:6: warning: use location
  ret = realloc(ptr, size);
      ^
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_71 = VDEF <.MEM_70>
ret_56 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:416:7: warning: use location
   ret = realloc(ptr, 1);
       ^
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
[40;31m  find free stmt free same pointer [0m
# .MEM_72 = VDEF <.MEM_67>
ret_58 = realloc (_24, _23);
./benchmarks/git/double_free_2/../git.h:418:7: warning: use location
   ret = realloc(ptr, size);
       ^
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_73 = VDEF <.MEM_72>
ret_62 = realloc (_24, 1);
./benchmarks/git/double_free_2/../git.h:420:8: warning: use location
    ret = realloc(ptr, 1);
        ^
[40;36m ======= node_fun:strbuf_grow========= [0m
[40;36m ======= find relate stmt with quoted ========= [0m
[40;36m ======= relate stmt argument:quoted ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m
[40;42m =======pre add _ fucntion:alloc_nr========= [0m
[40;46m =======add node_fun stack:alloc_nr========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_96 = len_68 + _95;
./benchmarks/git/double_free_2/git_df_2.c:36:2: warning: use location
  strbuf_setlen(sb, sb->len + len);
  ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
strbuf_setlen (&uq, _96);
./benchmarks/git/double_free_2/git_df_2.c:36:2: warning: use location
this stmt is child function---strbuf_setlen-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed231b0
    type <pointer_type 0x7f6cfece6498
        type <integer_type 0x7f6cfece63f0 char readonly public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfece6498>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cfece6540>>
    var <var_decl 0x7f6cfed24090 quoted>
    def_stmt quoted_67 = PHI <quoted_65(20), quoted_90(35)>
    version 67
    ptr-info 0x7f6cfed12870>
trace fucntion name:strbuf_setlen 

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_69 = quoted_67 + len_68;
./benchmarks/git/double_free_2/git_df_2.c:89:10: warning: use location
   quoted += len;
          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_84 = MEM[(const char *)quoted_69 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:14: warning: use location
    if ((ch = *quoted++) < '0' || '7' < ch)
              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_85 = (int) _84;
./benchmarks/git/double_free_2/git_df_2.c:120:12: warning: use location
    if ((ch = *quoted++) < '0' || '7' < ch)
            ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_85 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:31: warning: use location
    if ((ch = *quoted++) < '0' || '7' < ch)
                               ^
if (ch_85 > 55)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:120:31: warning: use location
Cond in fucntion main basic block 33
 ================== possible direct basic block ================= 
from main basic block 36
 ================== possible direct basic block ================= 
from main basic block 34
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_85 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:7: warning: use location
    if ((ch = *quoted++) < '0' || '7' < ch)
       ^
if (ch_85 <= 47)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:120:7: warning: use location
Cond in fucntion main basic block 32
 ================== possible direct basic block ================= 
from main basic block 36
 ================== possible direct basic block ================= 
from main basic block 33
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_78 = MEM[(const char *)quoted_69 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:14: warning: use location
    if ((ch = *quoted++) < '0' || '7' < ch)
              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_74 = MEM[(const char *)quoted_69 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:17: warning: use location
   switch ((ch = *quoted++)) {
                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_70 = *quoted_69;
./benchmarks/git/double_free_2/git_df_2.c:91:11: warning: use location
   switch (*quoted++) {
           ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_71 = (int) _70;
./benchmarks/git/double_free_2/git_df_2.c:91:11: warning: use location

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_83 = &MEM[(void *)quoted_69 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:21: warning: use location
    if ((ch = *quoted++) < '0' || '7' < ch)
                     ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_90 = PHI <quoted_73(22), quoted_73(23), quoted_73(24), quoted_73(25), quoted_73(26), quoted_73(27), quoted_73(28), quoted_73(29), quoted_83(34)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_67 = PHI <quoted_65(20), quoted_90(35)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
quoted_73 = &MEM[(void *)quoted_69 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:24: warning: use location
   switch ((ch = *quoted++)) {
                        ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cfed231b0
    type <pointer_type 0x7f6cfece6498
        type <integer_type 0x7f6cfece63f0 char readonly public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfece6498>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cfece6540>>
    var <var_decl 0x7f6cfed24090 quoted>
    def_stmt quoted_67 = PHI <quoted_65(20), quoted_90(35)>
    version 67
    ptr-info 0x7f6cfed12870>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: use location
    free(path_name);
    ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_135 = VDEF <.MEM_123>
free (_111);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_137 = VDEF <.MEM_136>
free (_110);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_148 = VDEF <.MEM_114>
strbuf_grow (&uq, len_68);
./benchmarks/git/double_free_2/git_df_2.c:34:2: warning: Use after free error!: free location 
  strbuf_grow(sb, len);
  ^
# .MEM_149 = VDEF <.MEM_148>
memcpy (_94, quoted_67, len_68);
./benchmarks/git/double_free_2/git_df_2.c:35:2: warning: use location
  memcpy(sb->buf + sb->len, data, len);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_148 = VDEF <.MEM_114>
strbuf_grow (&uq, len_68);
./benchmarks/git/double_free_2/git_df_2.c:34:2: warning: Use after free error!: free location 
  strbuf_grow(sb, len);
  ^
_96 = len_68 + _95;
./benchmarks/git/double_free_2/git_df_2.c:36:2: warning: use location
  strbuf_setlen(sb, sb->len + len);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_148 = VDEF <.MEM_114>
strbuf_grow (&uq, len_68);
./benchmarks/git/double_free_2/git_df_2.c:34:2: warning: Use after free error!: free location 
  strbuf_grow(sb, len);
  ^
# .MEM_150 = VDEF <.MEM_149>
strbuf_setlen (&uq, _96);
./benchmarks/git/double_free_2/git_df_2.c:36:2: warning: use location
  strbuf_setlen(sb, sb->len + len);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_148 = VDEF <.MEM_114>
strbuf_grow (&uq, len_68);
./benchmarks/git/double_free_2/git_df_2.c:34:2: warning: Use after free error!: free location 
  strbuf_grow(sb, len);
  ^
quoted_69 = quoted_67 + len_68;
./benchmarks/git/double_free_2/git_df_2.c:89:10: warning: use location
   quoted += len;
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_148 = VDEF <.MEM_114>
strbuf_grow (&uq, len_68);
./benchmarks/git/double_free_2/git_df_2.c:34:2: warning: Use after free error!: free location 
  strbuf_grow(sb, len);
  ^
# VUSE <.MEM_150>
_84 = MEM[(const char *)quoted_69 + 3B];
./benchmarks/git/double_free_2/git_df_2.c:120:14: warning: use location
    if ((ch = *quoted++) < '0' || '7' < ch)
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_148 = VDEF <.MEM_114>
strbuf_grow (&uq, len_68);
./benchmarks/git/double_free_2/git_df_2.c:34:2: warning: Use after free error!: free location 
  strbuf_grow(sb, len);
  ^
ch_85 = (int) _84;
./benchmarks/git/double_free_2/git_df_2.c:120:12: warning: use location
    if ((ch = *quoted++) < '0' || '7' < ch)
            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_148 = VDEF <.MEM_114>
strbuf_grow (&uq, len_68);
./benchmarks/git/double_free_2/git_df_2.c:34:2: warning: Use after free error!: free location 
  strbuf_grow(sb, len);
  ^
if (ch_85 > 55)
./benchmarks/git/double_free_2/git_df_2.c:120:31: warning: use location
    if ((ch = *quoted++) < '0' || '7' < ch)
                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_148 = VDEF <.MEM_114>
strbuf_grow (&uq, len_68);
./benchmarks/git/double_free_2/git_df_2.c:34:2: warning: Use after free error!: free location 
  strbuf_grow(sb, len);
  ^
if (ch_85 <= 47)
./benchmarks/git/double_free_2/git_df_2.c:120:7: warning: use location
    if ((ch = *quoted++) < '0' || '7' < ch)
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_148 = VDEF <.MEM_114>
strbuf_grow (&uq, len_68);
./benchmarks/git/double_free_2/git_df_2.c:34:2: warning: Use after free error!: free location 
  strbuf_grow(sb, len);
  ^
# VUSE <.MEM_150>
_78 = MEM[(const char *)quoted_69 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:117:14: warning: use location
    if ((ch = *quoted++) < '0' || '7' < ch)
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_148 = VDEF <.MEM_114>
strbuf_grow (&uq, len_68);
./benchmarks/git/double_free_2/git_df_2.c:34:2: warning: Use after free error!: free location 
  strbuf_grow(sb, len);
  ^
# VUSE <.MEM_150>
_74 = MEM[(const char *)quoted_69 + 1B];
./benchmarks/git/double_free_2/git_df_2.c:102:17: warning: use location
   switch ((ch = *quoted++)) {
                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_148 = VDEF <.MEM_114>
strbuf_grow (&uq, len_68);
./benchmarks/git/double_free_2/git_df_2.c:34:2: warning: Use after free error!: free location 
  strbuf_grow(sb, len);
  ^
# VUSE <.MEM_150>
_70 = *quoted_69;
./benchmarks/git/double_free_2/git_df_2.c:91:11: warning: use location
   switch (*quoted++) {
           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_148 = VDEF <.MEM_114>
strbuf_grow (&uq, len_68);
./benchmarks/git/double_free_2/git_df_2.c:34:2: warning: Use after free error!: free location 
  strbuf_grow(sb, len);
  ^
_71 = (int) _70;
./benchmarks/git/double_free_2/git_df_2.c:91:11: warning: use location
   switch (*quoted++) {
           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_148 = VDEF <.MEM_114>
strbuf_grow (&uq, len_68);
./benchmarks/git/double_free_2/git_df_2.c:34:2: warning: Use after free error!: free location 
  strbuf_grow(sb, len);
  ^
quoted_83 = &MEM[(void *)quoted_69 + 4B];
./benchmarks/git/double_free_2/git_df_2.c:120:21: warning: use location
    if ((ch = *quoted++) < '0' || '7' < ch)
                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_148 = VDEF <.MEM_114>
strbuf_grow (&uq, len_68);
./benchmarks/git/double_free_2/git_df_2.c:34:2: warning: Use after free error!: free location 
  strbuf_grow(sb, len);
  ^
quoted_90 = PHI <quoted_73(22), quoted_73(23), quoted_73(24), quoted_73(25), quoted_73(26), quoted_73(27), quoted_73(28), quoted_73(29), quoted_83(34)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: Use after free error!: free location 
    free(path_name);
    ^
quoted_90 = PHI <quoted_73(22), quoted_73(23), quoted_73(24), quoted_73(25), quoted_73(26), quoted_73(27), quoted_73(28), quoted_73(29), quoted_83(34)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_135 = VDEF <.MEM_123>
free (_111);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: Use after free error!: free location 
     free(sb->buf);
     ^
quoted_90 = PHI <quoted_73(22), quoted_73(23), quoted_73(24), quoted_73(25), quoted_73(26), quoted_73(27), quoted_73(28), quoted_73(29), quoted_83(34)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_137 = VDEF <.MEM_136>
free (_110);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: Use after free error!: free location 
     free(sb->buf);
     ^
quoted_90 = PHI <quoted_73(22), quoted_73(23), quoted_73(24), quoted_73(25), quoted_73(26), quoted_73(27), quoted_73(28), quoted_73(29), quoted_83(34)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_148 = VDEF <.MEM_114>
strbuf_grow (&uq, len_68);
./benchmarks/git/double_free_2/git_df_2.c:34:2: warning: Use after free error!: free location 
  strbuf_grow(sb, len);
  ^
quoted_67 = PHI <quoted_65(20), quoted_90(35)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: Use after free error!: free location 
    free(path_name);
    ^
quoted_67 = PHI <quoted_65(20), quoted_90(35)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_135 = VDEF <.MEM_123>
free (_111);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: Use after free error!: free location 
     free(sb->buf);
     ^
quoted_67 = PHI <quoted_65(20), quoted_90(35)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_137 = VDEF <.MEM_136>
free (_110);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: Use after free error!: free location 
     free(sb->buf);
     ^
quoted_67 = PHI <quoted_65(20), quoted_90(35)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_148 = VDEF <.MEM_114>
strbuf_grow (&uq, len_68);
./benchmarks/git/double_free_2/git_df_2.c:34:2: warning: Use after free error!: free location 
  strbuf_grow(sb, len);
  ^
quoted_73 = &MEM[(void *)quoted_69 + 2B];
./benchmarks/git/double_free_2/git_df_2.c:102:24: warning: use location
   switch ((ch = *quoted++)) {
                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f6cfed20560
    type <pointer_type 0x7f6cfecdebd0
        type <record_type 0x7f6cfecdeb28 strbuf BLK
            size <integer_cst 0x7f6cff1d00a8 constant 192>
            unit size <integer_cst 0x7f6cff1d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfecdeb28 fields <field_decl 0x7f6cfece0390 alloc> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfecdebd0> chain <type_decl 0x7f6cfece0428 D.3992>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f6cfed09a20 uq type <record_type 0x7f6cfecdeb28 strbuf>
        addressable used BLK file ./benchmarks/git/double_free_2/git_df_2.c line 139 col 16 size <integer_cst 0x7f6cff1d00a8 192> unit size <integer_cst 0x7f6cff1d0078 24>
        align 128 context <function_decl 0x7f6cfecdfb00 main> abstract_origin <var_decl 0x7f6cfed01bd0 uq>
        chain <label_decl 0x7f6cfecedf00 bad_line type <void_type 0x7f6cff1c8f18 void>
            used VOID file ./benchmarks/git/double_free_2/git_df_2.c line 225 col 2
            align 1 context <function_decl 0x7f6cfecdfb00 main> initial <error_mark 0x7f6cff1b4bd0> abstract_origin <label_decl 0x7f6cfeced000 bad_line>>>
    ./benchmarks/git/double_free_2/git_df_2.c:194:8 start: ./benchmarks/git/double_free_2/git_df_2.c:194:8 finish: ./benchmarks/git/double_free_2/git_df_2.c:194:8>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f6cfed23ee8
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
   
    def_stmt _94 = _92 + _93;
    version 94
    ptr-info 0x7f6cfed12900>
_94 = _92 + _93;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_149 = VDEF <.MEM_148>
memcpy (_94, quoted_67, len_68);
memcpy (_94, quoted_67, len_68);
./benchmarks/git/double_free_2/git_df_2.c:35:2: warning: use location
  memcpy(sb->buf + sb->len, data, len);
  ^
this stmt is child function---memcpy-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed23ee8
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
   
    def_stmt _94 = _92 + _93;
    version 94
    ptr-info 0x7f6cfed12900>
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_149 = VDEF <.MEM_148>
memcpy (_94, quoted_67, len_68);
memcpy (_94, quoted_67, len_68);
./benchmarks/git/double_free_2/git_df_2.c:35:2: warning: use location
this stmt is child function---memcpy-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed23ee8
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
   
    def_stmt _94 = _92 + _93;
    version 94
    ptr-info 0x7f6cfed12900>
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cfed23ee8
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
   
    def_stmt _94 = _92 + _93;
    version 94
    ptr-info 0x7f6cfed12900>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: use location
    free(path_name);
    ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_135 = VDEF <.MEM_123>
free (_111);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_137 = VDEF <.MEM_136>
free (_110);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f6cfed20660
    type <pointer_type 0x7f6cfecdebd0
        type <record_type 0x7f6cfecdeb28 strbuf BLK
            size <integer_cst 0x7f6cff1d00a8 constant 192>
            unit size <integer_cst 0x7f6cff1d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfecdeb28 fields <field_decl 0x7f6cfece0390 alloc> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfecdebd0> chain <type_decl 0x7f6cfece0428 D.3992>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f6cfed09a20 uq type <record_type 0x7f6cfecdeb28 strbuf>
        addressable used BLK file ./benchmarks/git/double_free_2/git_df_2.c line 139 col 16 size <integer_cst 0x7f6cff1d00a8 192> unit size <integer_cst 0x7f6cff1d0078 24>
        align 128 context <function_decl 0x7f6cfecdfb00 main> abstract_origin <var_decl 0x7f6cfed01bd0 uq>
        chain <label_decl 0x7f6cfecedf00 bad_line type <void_type 0x7f6cff1c8f18 void>
            used VOID file ./benchmarks/git/double_free_2/git_df_2.c line 225 col 2
            align 1 context <function_decl 0x7f6cfecdfb00 main> initial <error_mark 0x7f6cff1b4bd0> abstract_origin <label_decl 0x7f6cfeced000 bad_line>>>
    ./benchmarks/git/double_free_2/git_df_2.c:194:8 start: ./benchmarks/git/double_free_2/git_df_2.c:194:8 finish: ./benchmarks/git/double_free_2/git_df_2.c:194:8>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f6cfed20300
    type <pointer_type 0x7f6cfecdebd0
        type <record_type 0x7f6cfecdeb28 strbuf BLK
            size <integer_cst 0x7f6cff1d00a8 constant 192>
            unit size <integer_cst 0x7f6cff1d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfecdeb28 fields <field_decl 0x7f6cfece0390 alloc> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfecdebd0> chain <type_decl 0x7f6cfece0428 D.3992>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f6cfed09a20 uq type <record_type 0x7f6cfecdeb28 strbuf>
        addressable used BLK file ./benchmarks/git/double_free_2/git_df_2.c line 139 col 16 size <integer_cst 0x7f6cff1d00a8 192> unit size <integer_cst 0x7f6cff1d0078 24>
        align 128 context <function_decl 0x7f6cfecdfb00 main> abstract_origin <var_decl 0x7f6cfed01bd0 uq>
        chain <label_decl 0x7f6cfecedf00 bad_line type <void_type 0x7f6cff1c8f18 void>
            used VOID file ./benchmarks/git/double_free_2/git_df_2.c line 225 col 2
            align 1 context <function_decl 0x7f6cfecdfb00 main> initial <error_mark 0x7f6cff1b4bd0> abstract_origin <label_decl 0x7f6cfeced000 bad_line>>>
    ./benchmarks/git/double_free_2/git_df_2.c:194:8 start: ./benchmarks/git/double_free_2/git_df_2.c:194:8 finish: ./benchmarks/git/double_free_2/git_df_2.c:194:8>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f6cfed20360
    type <pointer_type 0x7f6cfecdebd0
        type <record_type 0x7f6cfecdeb28 strbuf BLK
            size <integer_cst 0x7f6cff1d00a8 constant 192>
            unit size <integer_cst 0x7f6cff1d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfecdeb28 fields <field_decl 0x7f6cfece0390 alloc> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfecdebd0> chain <type_decl 0x7f6cfece0428 D.3992>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f6cfed09a20 uq type <record_type 0x7f6cfecdeb28 strbuf>
        addressable used BLK file ./benchmarks/git/double_free_2/git_df_2.c line 139 col 16 size <integer_cst 0x7f6cff1d00a8 192> unit size <integer_cst 0x7f6cff1d0078 24>
        align 128 context <function_decl 0x7f6cfecdfb00 main> abstract_origin <var_decl 0x7f6cfed01bd0 uq>
        chain <label_decl 0x7f6cfecedf00 bad_line type <void_type 0x7f6cff1c8f18 void>
            used VOID file ./benchmarks/git/double_free_2/git_df_2.c line 225 col 2
            align 1 context <function_decl 0x7f6cfecdfb00 main> initial <error_mark 0x7f6cff1b4bd0> abstract_origin <label_decl 0x7f6cfeced000 bad_line>>>
    ./benchmarks/git/double_free_2/git_df_2.c:194:8 start: ./benchmarks/git/double_free_2/git_df_2.c:194:8 finish: ./benchmarks/git/double_free_2/git_df_2.c:194:8>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f6cfed16f30
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
    var <var_decl 0x7f6cfed09bd0 path_name>
    def_stmt path_name_42 = PHI <path_name_37(16), path_name_37(17), path_name_41(39)>
    version 42
    ptr-info 0x7f6cfed12768>
path_name_42 = PHI <path_name_37(16), path_name_37(17), path_name_41(39)>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: use location
    free(path_name);
    ^
this stmt is child function---free-----

 ================== find ================== 
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
_55 = __printf_chk (1, "git-update-index: unable to update %s", path_name_42);
this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed16f30
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
    var <var_decl 0x7f6cfed09bd0 path_name>
    def_stmt path_name_42 = PHI <path_name_37(16), path_name_37(17), path_name_41(39)>
    version 42
    ptr-info 0x7f6cfed12768>
trace fucntion name:__printf_chk 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_54 = add_cacheinfo (mode_17, &sha1, path_name_42, stage_53);
./benchmarks/git/double_free_2/git_df_2.c:217:8: warning: use location
    if (add_cacheinfo(mode, sha1, path_name, stage))
        ^
this stmt is child function---add_cacheinfo-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed16f30
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
    var <var_decl 0x7f6cfed09bd0 path_name>
    def_stmt path_name_42 = PHI <path_name_37(16), path_name_37(17), path_name_41(39)>
    version 42
    ptr-info 0x7f6cfed12768>
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_54 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:7: warning: use location
    if (add_cacheinfo(mode, sha1, path_name, stage))
       ^
if (_54 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:217:7: warning: use location
Cond in fucntion main basic block 45
 ================== possible direct basic block ================= 
from main basic block 46
 ================== possible direct basic block ================= 
from main basic block 47
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_17 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:6: warning: use location
   if (!mode) {
      ^
if (mode_17 == 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:205:6: warning: use location
Cond in fucntion main basic block 42
 ================== possible direct basic block ================= 
from main basic block 43
 ================== possible direct basic block ================= 
from main basic block 45
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_46 = remove_file_from_cache (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:207:8: warning: use location
    if (remove_file_from_cache(path_name))
        ^
this stmt is child function---remove_file_from_cache-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed16f30
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
    var <var_decl 0x7f6cfed09bd0 path_name>
    def_stmt path_name_42 = PHI <path_name_37(16), path_name_37(17), path_name_41(39)>
    version 42
    ptr-info 0x7f6cfed12768>
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_45 = __fprintf_chk (_44, 1, "Ignoring path %s\n", path_name_42);
this stmt is child function---__fprintf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed16f30
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
    var <var_decl 0x7f6cfed09bd0 path_name>
    def_stmt path_name_42 = PHI <path_name_37(16), path_name_37(17), path_name_41(39)>
    version 42
    ptr-info 0x7f6cfed12768>
trace fucntion name:__fprintf_chk 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_43 = verify_path (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:200:8: warning: use location
   if (!verify_path(path_name)) {
        ^
this stmt is child function---verify_path-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed16f30
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
    var <var_decl 0x7f6cfed09bd0 path_name>
    def_stmt path_name_42 = PHI <path_name_37(16), path_name_37(17), path_name_41(39)>
    version 42
    ptr-info 0x7f6cfed12768>
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (path_name_42 != _56)
./benchmarks/git/double_free_2/git_df_2.c:221:6: warning: use location
   if (path_name != ptr)
      ^
if (path_name_42 != _56)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:221:6: warning: use location
Cond in fucntion main basic block 47
 ================== possible direct basic block ================= 
from main basic block 48
 ================== possible direct basic block ================= 
from main basic block 49
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cfed16f30
    type <pointer_type 0x7f6cfecde9d8
        type <integer_type 0x7f6cfecde930 char public string-flag QI
            size <integer_cst 0x7f6cff1b4cd8 constant 8>
            unit size <integer_cst 0x7f6cff1b4cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6cff1c83f0 precision 8 min <integer_cst 0x7f6cfece1180 -128> max <integer_cst 0x7f6cfece1168 127>
            pointer_to_this <pointer_type 0x7f6cfecde9d8>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
        pointer_to_this <pointer_type 0x7f6cfece6738>>
    var <var_decl 0x7f6cfed09bd0 path_name>
    def_stmt path_name_42 = PHI <path_name_37(16), path_name_37(17), path_name_41(39)>
    version 42
    ptr-info 0x7f6cfed12768>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: use location
    free(path_name);
    ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_135 = VDEF <.MEM_123>
free (_111);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_137 = VDEF <.MEM_136>
free (_110);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f6cfed1b000
    type <pointer_type 0x7f6cfece62a0
        type <record_type 0x7f6cfece61f8 FILE BLK
            size <integer_cst 0x7f6cff26dc30 constant 1728>
            unit size <integer_cst 0x7f6cfece12a0 constant 216>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfece60a8 fields <field_decl 0x7f6cfece7980 _flags> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfece62a0> chain <type_decl 0x7f6cfece7a18 D.4029>>
        unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cfeceae70>>
   
    def_stmt _44 = stderr;
    version 44
    ptr-info 0x7f6cfed12780>
# VUSE <.MEM_156>
_44 = stderr;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_45 = __fprintf_chk (_44, 1, "Ignoring path %s\n", path_name_42);
this stmt is child function---__fprintf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed1b000
    type <pointer_type 0x7f6cfece62a0
        type <record_type 0x7f6cfece61f8 FILE BLK
            size <integer_cst 0x7f6cff26dc30 constant 1728>
            unit size <integer_cst 0x7f6cfece12a0 constant 216>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfece60a8 fields <field_decl 0x7f6cfece7980 _flags> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfece62a0> chain <type_decl 0x7f6cfece7a18 D.4029>>
        unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cfeceae70>>
   
    def_stmt _44 = stderr;
    version 44
    ptr-info 0x7f6cfed12780>
trace fucntion name:__fprintf_chk 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: use location
    free(path_name);
    ^
this stmt is child function---free-----

 ================== find ================== 
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
_55 = __printf_chk (1, "git-update-index: unable to update %s", path_name_42);
this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed1b000
    type <pointer_type 0x7f6cfece62a0
        type <record_type 0x7f6cfece61f8 FILE BLK
            size <integer_cst 0x7f6cff26dc30 constant 1728>
            unit size <integer_cst 0x7f6cfece12a0 constant 216>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfece60a8 fields <field_decl 0x7f6cfece7980 _flags> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfece62a0> chain <type_decl 0x7f6cfece7a18 D.4029>>
        unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cfeceae70>>
   
    def_stmt _44 = stderr;
    version 44
    ptr-info 0x7f6cfed12780>
trace fucntion name:__printf_chk 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_54 = add_cacheinfo (mode_17, &sha1, path_name_42, stage_53);
./benchmarks/git/double_free_2/git_df_2.c:217:8: warning: use location
    if (add_cacheinfo(mode, sha1, path_name, stage))
        ^
this stmt is child function---add_cacheinfo-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed1b000
    type <pointer_type 0x7f6cfece62a0
        type <record_type 0x7f6cfece61f8 FILE BLK
            size <integer_cst 0x7f6cff26dc30 constant 1728>
            unit size <integer_cst 0x7f6cfece12a0 constant 216>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfece60a8 fields <field_decl 0x7f6cfece7980 _flags> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfece62a0> chain <type_decl 0x7f6cfece7a18 D.4029>>
        unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cfeceae70>>
   
    def_stmt _44 = stderr;
    version 44
    ptr-info 0x7f6cfed12780>
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_54 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:7: warning: use location
    if (add_cacheinfo(mode, sha1, path_name, stage))
       ^
if (_54 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:217:7: warning: use location
Cond in fucntion main basic block 45
 ================== possible direct basic block ================= 
from main basic block 46
 ================== possible direct basic block ================= 
from main basic block 47
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_17 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:6: warning: use location
   if (!mode) {
      ^
if (mode_17 == 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:205:6: warning: use location
Cond in fucntion main basic block 42
 ================== possible direct basic block ================= 
from main basic block 43
 ================== possible direct basic block ================= 
from main basic block 45
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_46 = remove_file_from_cache (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:207:8: warning: use location
    if (remove_file_from_cache(path_name))
        ^
this stmt is child function---remove_file_from_cache-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed1b000
    type <pointer_type 0x7f6cfece62a0
        type <record_type 0x7f6cfece61f8 FILE BLK
            size <integer_cst 0x7f6cff26dc30 constant 1728>
            unit size <integer_cst 0x7f6cfece12a0 constant 216>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfece60a8 fields <field_decl 0x7f6cfece7980 _flags> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfece62a0> chain <type_decl 0x7f6cfece7a18 D.4029>>
        unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cfeceae70>>
   
    def_stmt _44 = stderr;
    version 44
    ptr-info 0x7f6cfed12780>
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_43 = verify_path (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:200:8: warning: use location
   if (!verify_path(path_name)) {
        ^
this stmt is child function---verify_path-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed1b000
    type <pointer_type 0x7f6cfece62a0
        type <record_type 0x7f6cfece61f8 FILE BLK
            size <integer_cst 0x7f6cff26dc30 constant 1728>
            unit size <integer_cst 0x7f6cfece12a0 constant 216>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfece60a8 fields <field_decl 0x7f6cfece7980 _flags> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfece62a0> chain <type_decl 0x7f6cfece7a18 D.4029>>
        unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cfeceae70>>
   
    def_stmt _44 = stderr;
    version 44
    ptr-info 0x7f6cfed12780>
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (path_name_42 != _56)
./benchmarks/git/double_free_2/git_df_2.c:221:6: warning: use location
   if (path_name != ptr)
      ^
if (path_name_42 != _56)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:221:6: warning: use location
Cond in fucntion main basic block 47
 ================== possible direct basic block ================= 
from main basic block 48
 ================== possible direct basic block ================= 
from main basic block 49
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cfed1b000
    type <pointer_type 0x7f6cfece62a0
        type <record_type 0x7f6cfece61f8 FILE BLK
            size <integer_cst 0x7f6cff26dc30 constant 1728>
            unit size <integer_cst 0x7f6cfece12a0 constant 216>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfece60a8 fields <field_decl 0x7f6cfece7980 _flags> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfece62a0> chain <type_decl 0x7f6cfece7a18 D.4029>>
        unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cfeceae70>>
   
    def_stmt _44 = stderr;
    version 44
    ptr-info 0x7f6cfed12780>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: use location
    free(path_name);
    ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_135 = VDEF <.MEM_123>
free (_111);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_137 = VDEF <.MEM_136>
free (_110);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f6cfed16828
    type <integer_type 0x7f6cff1c8690 unsigned int public unsigned SI
        size <integer_cst 0x7f6cff1b4e28 constant 32>
        unit size <integer_cst 0x7f6cff1b4e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f6cff1c8690 precision 32 min <integer_cst 0x7f6cff1b4e58 0> max <integer_cst 0x7f6cff1b4e10 4294967295>
        pointer_to_this <pointer_type 0x7f6cff1d4888>>
    var <var_decl 0x7f6cfed09cf0 mode>
    def_stmt mode_17 = (unsigned int) ul_7;
    version 17>
mode_17 = (unsigned int) ul_7;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_54 = add_cacheinfo (mode_17, &sha1, path_name_42, stage_53);
./benchmarks/git/double_free_2/git_df_2.c:217:8: warning: use location
    if (add_cacheinfo(mode, sha1, path_name, stage))
        ^
this stmt is child function---add_cacheinfo-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed16828
    type <integer_type 0x7f6cff1c8690 unsigned int public unsigned SI
        size <integer_cst 0x7f6cff1b4e28 constant 32>
        unit size <integer_cst 0x7f6cff1b4e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f6cff1c8690 precision 32 min <integer_cst 0x7f6cff1b4e58 0> max <integer_cst 0x7f6cff1b4e10 4294967295>
        pointer_to_this <pointer_type 0x7f6cff1d4888>>
    var <var_decl 0x7f6cfed09cf0 mode>
    def_stmt mode_17 = (unsigned int) ul_7;
    version 17>
trace fucntion name:add_cacheinfo 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_54 != 0)
./benchmarks/git/double_free_2/git_df_2.c:217:7: warning: use location
    if (add_cacheinfo(mode, sha1, path_name, stage))
       ^
if (_54 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:217:7: warning: use location
Cond in fucntion main basic block 45
 ================== possible direct basic block ================= 
from main basic block 46
 ================== possible direct basic block ================= 
from main basic block 47
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: use location
    free(path_name);
    ^
this stmt is child function---free-----

 ================== find ================== 
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
_55 = __printf_chk (1, "git-update-index: unable to update %s", path_name_42);
this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed16828
    type <integer_type 0x7f6cff1c8690 unsigned int public unsigned SI
        size <integer_cst 0x7f6cff1b4e28 constant 32>
        unit size <integer_cst 0x7f6cff1b4e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f6cff1c8690 precision 32 min <integer_cst 0x7f6cff1b4e58 0> max <integer_cst 0x7f6cff1b4e10 4294967295>
        pointer_to_this <pointer_type 0x7f6cff1d4888>>
    var <var_decl 0x7f6cfed09cf0 mode>
    def_stmt mode_17 = (unsigned int) ul_7;
    version 17>
trace fucntion name:__printf_chk 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_46 = remove_file_from_cache (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:207:8: warning: use location
    if (remove_file_from_cache(path_name))
        ^
this stmt is child function---remove_file_from_cache-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed16828
    type <integer_type 0x7f6cff1c8690 unsigned int public unsigned SI
        size <integer_cst 0x7f6cff1b4e28 constant 32>
        unit size <integer_cst 0x7f6cff1b4e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f6cff1c8690 precision 32 min <integer_cst 0x7f6cff1b4e58 0> max <integer_cst 0x7f6cff1b4e10 4294967295>
        pointer_to_this <pointer_type 0x7f6cff1d4888>>
    var <var_decl 0x7f6cfed09cf0 mode>
    def_stmt mode_17 = (unsigned int) ul_7;
    version 17>
trace fucntion name:remove_file_from_cache 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_45 = __fprintf_chk (_44, 1, "Ignoring path %s\n", path_name_42);
this stmt is child function---__fprintf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed16828
    type <integer_type 0x7f6cff1c8690 unsigned int public unsigned SI
        size <integer_cst 0x7f6cff1b4e28 constant 32>
        unit size <integer_cst 0x7f6cff1b4e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f6cff1c8690 precision 32 min <integer_cst 0x7f6cff1b4e58 0> max <integer_cst 0x7f6cff1b4e10 4294967295>
        pointer_to_this <pointer_type 0x7f6cff1d4888>>
    var <var_decl 0x7f6cfed09cf0 mode>
    def_stmt mode_17 = (unsigned int) ul_7;
    version 17>
trace fucntion name:__fprintf_chk 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_43 = verify_path (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:200:8: warning: use location
   if (!verify_path(path_name)) {
        ^
this stmt is child function---verify_path-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed16828
    type <integer_type 0x7f6cff1c8690 unsigned int public unsigned SI
        size <integer_cst 0x7f6cff1b4e28 constant 32>
        unit size <integer_cst 0x7f6cff1b4e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f6cff1c8690 precision 32 min <integer_cst 0x7f6cff1b4e58 0> max <integer_cst 0x7f6cff1b4e10 4294967295>
        pointer_to_this <pointer_type 0x7f6cff1d4888>>
    var <var_decl 0x7f6cfed09cf0 mode>
    def_stmt mode_17 = (unsigned int) ul_7;
    version 17>
trace fucntion name:verify_path 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (path_name_42 != _56)
./benchmarks/git/double_free_2/git_df_2.c:221:6: warning: use location
   if (path_name != ptr)
      ^
if (path_name_42 != _56)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:221:6: warning: use location
Cond in fucntion main basic block 47
 ================== possible direct basic block ================= 
from main basic block 48
 ================== possible direct basic block ================= 
from main basic block 49
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (mode_17 == 0)
./benchmarks/git/double_free_2/git_df_2.c:205:6: warning: use location
   if (!mode) {
      ^
if (mode_17 == 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:205:6: warning: use location
Cond in fucntion main basic block 42
 ================== possible direct basic block ================= 
from main basic block 43
 ================== possible direct basic block ================= 
from main basic block 45
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cfed16828
    type <integer_type 0x7f6cff1c8690 unsigned int public unsigned SI
        size <integer_cst 0x7f6cff1b4e28 constant 32>
        unit size <integer_cst 0x7f6cff1b4e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f6cff1c8690 precision 32 min <integer_cst 0x7f6cff1b4e58 0> max <integer_cst 0x7f6cff1b4e10 4294967295>
        pointer_to_this <pointer_type 0x7f6cff1d4888>>
    var <var_decl 0x7f6cfed09cf0 mode>
    def_stmt mode_17 = (unsigned int) ul_7;
    version 17>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: use location
    free(path_name);
    ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_135 = VDEF <.MEM_123>
free (_111);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_137 = VDEF <.MEM_136>
free (_110);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f6cfed207c0
    type <pointer_type 0x7f6cfecdebd0
        type <record_type 0x7f6cfecdeb28 strbuf BLK
            size <integer_cst 0x7f6cff1d00a8 constant 192>
            unit size <integer_cst 0x7f6cff1d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfecdeb28 fields <field_decl 0x7f6cfece0390 alloc> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfecdebd0> chain <type_decl 0x7f6cfece0428 D.3992>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f6cfed09990 buf type <record_type 0x7f6cfecdeb28 strbuf>
        addressable used BLK file ./benchmarks/git/double_free_2/git_df_2.c line 138 col 16 size <integer_cst 0x7f6cff1d00a8 192> unit size <integer_cst 0x7f6cff1d0078 24>
        align 128 context <function_decl 0x7f6cfecdfb00 main> abstract_origin <var_decl 0x7f6cfed01c60 buf>
        chain <var_decl 0x7f6cfed09a20 uq type <record_type 0x7f6cfecdeb28 strbuf>
            addressable used BLK file ./benchmarks/git/double_free_2/git_df_2.c line 139 col 16 size <integer_cst 0x7f6cff1d00a8 192> unit size <integer_cst 0x7f6cff1d0078 24>
            align 128 context <function_decl 0x7f6cfecdfb00 main> abstract_origin <var_decl 0x7f6cfed01bd0 uq> chain <label_decl 0x7f6cfecedf00 bad_line>>>
    ./benchmarks/git/double_free_2/git_df_2.c:143:9 start: ./benchmarks/git/double_free_2/git_df_2.c:143:9 finish: ./benchmarks/git/double_free_2/git_df_2.c:143:9>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f6cfed1b438
    type <pointer_type 0x7f6cfece62a0
        type <record_type 0x7f6cfece61f8 FILE BLK
            size <integer_cst 0x7f6cff26dc30 constant 1728>
            unit size <integer_cst 0x7f6cfece12a0 constant 216>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfece60a8 fields <field_decl 0x7f6cfece7980 _flags> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfece62a0> chain <type_decl 0x7f6cfece7a18 D.4029>>
        unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cfeceae70>>
   
    def_stmt _59 = stdin;
    version 59
    ptr-info 0x7f6cfed12828>
# VUSE <.MEM_121>
_59 = stdin;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ch_98 = fgetc (_59);
./benchmarks/git/double_free_2/git_df_2.c:47:8: warning: use location
  while ((ch = fgetc(fp)) != EOF) {
        ^
this stmt is child function---fgetc-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed1b438
    type <pointer_type 0x7f6cfece62a0
        type <record_type 0x7f6cfece61f8 FILE BLK
            size <integer_cst 0x7f6cff26dc30 constant 1728>
            unit size <integer_cst 0x7f6cfece12a0 constant 216>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfece60a8 fields <field_decl 0x7f6cfece7980 _flags> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfece62a0> chain <type_decl 0x7f6cfece7a18 D.4029>>
        unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cfeceae70>>
   
    def_stmt _59 = stdin;
    version 59
    ptr-info 0x7f6cfed12828>
trace fucntion name:fgetc 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (ch_98 == -1)
./benchmarks/git/double_free_2/git_df_2.c:53:5: warning: use location
  if (ch == EOF && sb->len == 0)
     ^
if (ch_98 == -1)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:53:5: warning: use location
Cond in fucntion main basic block 58
 ================== possible direct basic block ================= 
from main basic block 59
 ================== possible direct basic block ================= 
from main basic block 60
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_103 = (char) ch_98;
./benchmarks/git/double_free_2/git_df_2.c:51:22: warning: use location
   sb->buf[sb->len++] = ch;
                      ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
*_102 = _103;
./benchmarks/git/double_free_2/git_df_2.c:51:22: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_127 = VDEF <.MEM_126>
_97 = feof (_59);
bb index := 52
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 52 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_127 = VDEF <.MEM_126>
_97 = feof (_59);
bb index := 52
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 52 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_127 = VDEF <.MEM_126>
_97 = feof (_59);
bb index := 52
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 52 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_127 = VDEF <.MEM_126>
_97 = feof (_59);
bb index := 52
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 52 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_127 = VDEF <.MEM_126>
_97 = feof (_59);
bb index := 52
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 52 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_127 = VDEF <.MEM_126>
_97 = feof (_59);
bb index := 52
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 52 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_127 = VDEF <.MEM_126>
_97 = feof (_59);
bb index := 52
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 52 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_127 = VDEF <.MEM_126>
_97 = feof (_59);
bb index := 52
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 52 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_97 = feof (_59);
./benchmarks/git/double_free_2/git_df_2.c:43:6: warning: use location
  if (feof(fp))
      ^
this stmt is child function---feof-----

 ================== trace ================== 
 <ssa_name 0x7f6cfed1b438
    type <pointer_type 0x7f6cfece62a0
        type <record_type 0x7f6cfece61f8 FILE BLK
            size <integer_cst 0x7f6cff26dc30 constant 1728>
            unit size <integer_cst 0x7f6cfece12a0 constant 216>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfece60a8 fields <field_decl 0x7f6cfece7980 _flags> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfece62a0> chain <type_decl 0x7f6cfece7a18 D.4029>>
        unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cfeceae70>>
   
    def_stmt _59 = stdin;
    version 59
    ptr-info 0x7f6cfed12828>
trace fucntion name:feof 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_97 != 0)
bb index := 52
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
 }
 ^
beacuse in succ := 16 have return or exit
gimple stmt in succ := 52 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_97 != 0)
bb index := 52
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 52 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_97 != 0)
bb index := 52
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 52 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_97 != 0)
bb index := 52
# VUSE <.MEM_41>
return;
./benchmarks/git/double_free_2/git_df_2.c:24:1: warning: use location
beacuse in succ := 16 have return or exit
gimple stmt in succ := 52 ,possiable got to succ := 16

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_97 != 0)
bb index := 52
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 52 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_97 != 0)
bb index := 52
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 52 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_97 != 0)
bb index := 52
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 52 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_97 != 0)
bb index := 52
# VUSE <.MEM_140>
return 0;
lto1: warning: use location
beacuse in succ := 62 have return or exit
gimple stmt in succ := 52 ,possiable got to succ := 62

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_97 != 0)
./benchmarks/git/double_free_2/git_df_2.c:43:5: warning: use location
  if (feof(fp))
     ^
if (_97 != 0)

 ================== find cond branch ================= 
./benchmarks/git/double_free_2/git_df_2.c:43:5: warning: use location
Cond in fucntion main basic block 52
 ================== possible direct basic block ================= 
from main basic block 61
 ================== possible direct basic block ================= 
from main basic block 53
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f6cfed1b438
    type <pointer_type 0x7f6cfece62a0
        type <record_type 0x7f6cfece61f8 FILE BLK
            size <integer_cst 0x7f6cff26dc30 constant 1728>
            unit size <integer_cst 0x7f6cfece12a0 constant 216>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfece60a8 fields <field_decl 0x7f6cfece7980 _flags> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfece62a0> chain <type_decl 0x7f6cfece7a18 D.4029>>
        unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f6cfeceae70>>
   
    def_stmt _59 = stdin;
    version 59
    ptr-info 0x7f6cfed12828>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: use location
    free(path_name);
    ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_135 = VDEF <.MEM_123>
free (_111);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_137 = VDEF <.MEM_136>
free (_110);
./benchmarks/git/double_free_2/git_df_2.c:15:5: warning: use location
     free(sb->buf);
     ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: Use after free error!: free location 
    free(path_name);
    ^
# .MEM_129 = VDEF <.MEM_122>
ch_98 = fgetc (_59);
./benchmarks/git/double_free_2/git_df_2.c:47:8: warning: use location
  while ((ch = fgetc(fp)) != EOF) {
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: Use after free error!: free location 
    free(path_name);
    ^
if (ch_98 == -1)
./benchmarks/git/double_free_2/git_df_2.c:53:5: warning: use location
  if (ch == EOF && sb->len == 0)
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: Use after free error!: free location 
    free(path_name);
    ^
_103 = (char) ch_98;
./benchmarks/git/double_free_2/git_df_2.c:51:22: warning: use location
   sb->buf[sb->len++] = ch;
                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: Use after free error!: free location 
    free(path_name);
    ^
# .MEM_132 = VDEF <.MEM_131>
*_102 = _103;
./benchmarks/git/double_free_2/git_df_2.c:51:22: warning: use location
   sb->buf[sb->len++] = ch;
                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: Use after free error!: free location 
    free(path_name);
    ^
# .MEM_127 = VDEF <.MEM_126>
_97 = feof (_59);
./benchmarks/git/double_free_2/git_df_2.c:43:6: warning: use location
  if (feof(fp))
      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_165 = VDEF <.MEM_117>
free (path_name_42);
./benchmarks/git/double_free_2/git_df_2.c:222:4: warning: Use after free error!: free location 
    free(path_name);
    ^
if (_97 != 0)
./benchmarks/git/double_free_2/git_df_2.c:43:5: warning: use location
  if (feof(fp))
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f6cfed20a60
    type <pointer_type 0x7f6cfecdebd0
        type <record_type 0x7f6cfecdeb28 strbuf BLK
            size <integer_cst 0x7f6cff1d00a8 constant 192>
            unit size <integer_cst 0x7f6cff1d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfecdeb28 fields <field_decl 0x7f6cfece0390 alloc> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfecdebd0> chain <type_decl 0x7f6cfece0428 D.3992>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f6cfed09990 buf type <record_type 0x7f6cfecdeb28 strbuf>
        addressable used BLK file ./benchmarks/git/double_free_2/git_df_2.c line 138 col 16 size <integer_cst 0x7f6cff1d00a8 192> unit size <integer_cst 0x7f6cff1d0078 24>
        align 128 context <function_decl 0x7f6cfecdfb00 main> abstract_origin <var_decl 0x7f6cfed01c60 buf>
        chain <var_decl 0x7f6cfed09a20 uq type <record_type 0x7f6cfecdeb28 strbuf>
            addressable used BLK file ./benchmarks/git/double_free_2/git_df_2.c line 139 col 16 size <integer_cst 0x7f6cff1d00a8 192> unit size <integer_cst 0x7f6cff1d0078 24>
            align 128 context <function_decl 0x7f6cfecdfb00 main> abstract_origin <var_decl 0x7f6cfed01bd0 uq> chain <label_decl 0x7f6cfecedf00 bad_line>>>
    ./benchmarks/git/double_free_2/git_df_2.c:143:9 start: ./benchmarks/git/double_free_2/git_df_2.c:143:9 finish: ./benchmarks/git/double_free_2/git_df_2.c:143:9>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f6cfed208c0
    type <pointer_type 0x7f6cfecdebd0
        type <record_type 0x7f6cfecdeb28 strbuf BLK
            size <integer_cst 0x7f6cff1d00a8 constant 192>
            unit size <integer_cst 0x7f6cff1d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfecdeb28 fields <field_decl 0x7f6cfece0390 alloc> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfecdebd0> chain <type_decl 0x7f6cfece0428 D.3992>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f6cfed09990 buf type <record_type 0x7f6cfecdeb28 strbuf>
        addressable used BLK file ./benchmarks/git/double_free_2/git_df_2.c line 138 col 16 size <integer_cst 0x7f6cff1d00a8 192> unit size <integer_cst 0x7f6cff1d0078 24>
        align 128 context <function_decl 0x7f6cfecdfb00 main> abstract_origin <var_decl 0x7f6cfed01c60 buf>
        chain <var_decl 0x7f6cfed09a20 uq type <record_type 0x7f6cfecdeb28 strbuf>
            addressable used BLK file ./benchmarks/git/double_free_2/git_df_2.c line 139 col 16 size <integer_cst 0x7f6cff1d00a8 192> unit size <integer_cst 0x7f6cff1d0078 24>
            align 128 context <function_decl 0x7f6cfecdfb00 main> abstract_origin <var_decl 0x7f6cfed01bd0 uq> chain <label_decl 0x7f6cfecedf00 bad_line>>>
    ./benchmarks/git/double_free_2/git_df_2.c:143:9 start: ./benchmarks/git/double_free_2/git_df_2.c:143:9 finish: ./benchmarks/git/double_free_2/git_df_2.c:143:9>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f6cfed20c60
    type <pointer_type 0x7f6cfecdebd0
        type <record_type 0x7f6cfecdeb28 strbuf BLK
            size <integer_cst 0x7f6cff1d00a8 constant 192>
            unit size <integer_cst 0x7f6cff1d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfecdeb28 fields <field_decl 0x7f6cfece0390 alloc> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfecdebd0> chain <type_decl 0x7f6cfece0428 D.3992>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f6cfed09990 buf type <record_type 0x7f6cfecdeb28 strbuf>
        addressable used BLK file ./benchmarks/git/double_free_2/git_df_2.c line 138 col 16 size <integer_cst 0x7f6cff1d00a8 192> unit size <integer_cst 0x7f6cff1d0078 24>
        align 128 context <function_decl 0x7f6cfecdfb00 main> abstract_origin <var_decl 0x7f6cfed01c60 buf>
        chain <var_decl 0x7f6cfed09a20 uq type <record_type 0x7f6cfecdeb28 strbuf>
            addressable used BLK file ./benchmarks/git/double_free_2/git_df_2.c line 139 col 16 size <integer_cst 0x7f6cff1d00a8 192> unit size <integer_cst 0x7f6cff1d0078 24>
            align 128 context <function_decl 0x7f6cfecdfb00 main> abstract_origin <var_decl 0x7f6cfed01bd0 uq> chain <label_decl 0x7f6cfecedf00 bad_line>>>
    ./benchmarks/git/double_free_2/git_df_2.c:228:2 start: ./benchmarks/git/double_free_2/git_df_2.c:228:2 finish: ./benchmarks/git/double_free_2/git_df_2.c:228:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f6cfed20ba0
    type <pointer_type 0x7f6cfecdebd0
        type <record_type 0x7f6cfecdeb28 strbuf BLK
            size <integer_cst 0x7f6cff1d00a8 constant 192>
            unit size <integer_cst 0x7f6cff1d0078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f6cfecdeb28 fields <field_decl 0x7f6cfece0390 alloc> context <translation_unit_decl 0x7f6cff1bf168 ./benchmarks/git/double_free_2/git_df_2.c>
            pointer_to_this <pointer_type 0x7f6cfecdebd0> chain <type_decl 0x7f6cfece0428 D.3992>>
        public unsigned DI
        size <integer_cst 0x7f6cff1b4be8 constant 64>
        unit size <integer_cst 0x7f6cff1b4c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f6cfed09a20 uq type <record_type 0x7f6cfecdeb28 strbuf>
        addressable used BLK file ./benchmarks/git/double_free_2/git_df_2.c line 139 col 16 size <integer_cst 0x7f6cff1d00a8 192> unit size <integer_cst 0x7f6cff1d0078 24>
        align 128 context <function_decl 0x7f6cfecdfb00 main> abstract_origin <var_decl 0x7f6cfed01bd0 uq>
        chain <label_decl 0x7f6cfecedf00 bad_line type <void_type 0x7f6cff1c8f18 void>
            used VOID file ./benchmarks/git/double_free_2/git_df_2.c line 225 col 2
            align 1 context <function_decl 0x7f6cfecdfb00 main> initial <error_mark 0x7f6cff1b4bd0> abstract_origin <label_decl 0x7f6cfeced000 bad_line>>>
    ./benchmarks/git/double_free_2/git_df_2.c:229:2 start: ./benchmarks/git/double_free_2/git_df_2.c:229:2 finish: ./benchmarks/git/double_free_2/git_df_2.c:229:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:strbuf_grow=========
=======is loop:0=========

 bb index 2 
<bb 2> [100.00%]:
_1 = sb_29(D)->len;
_2 = _1 + extra_30(D);
_3 = _2 + 1;
_4 = sb_29(D)->len;
if (_3 <= _4)
  goto <bb 3>; [0.04%]
else
  goto <bb 4>; [99.96%]

=======is loop:0=========

 bb index 3 
<bb 3> [0.04%]:
_39 = __printf_chk (1, "you want to use way too much memory %s", "");
exit (1);

=======is loop:0=========

 bb index 4 
<bb 4> [99.96%]:
_5 = sb_29(D)->len;
_6 = _5 + extra_30(D);
_7 = _6 + 1;
_8 = sb_29(D)->alloc;
if (_7 > _8)
  goto <bb 5>; [36.64%]
else
  goto <bb 16>; [63.36%]

=======is loop:0=========

 bb index 5 
<bb 5> [36.63%]:
_9 = sb_29(D)->alloc;
_10 = alloc_nr (_9);
_11 = (long unsigned int) _10;
_12 = sb_29(D)->len;
_13 = _12 + extra_30(D);
_14 = _13 + 1;
if (_11 < _14)
  goto <bb 6>; [67.00%]
else
  goto <bb 7>; [33.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [24.54%]:
_15 = sb_29(D)->len;
_16 = _15 + extra_30(D);
_17 = _16 + 1;
sb_29(D)->alloc = _17;
goto <bb 8>; [100.00%]

=======is loop:0=========

 bb index 7 
<bb 7> [12.09%]:
_18 = sb_29(D)->alloc;
_19 = alloc_nr (_18);
_20 = (long unsigned int) _19;
sb_29(D)->alloc = _20;

=======is loop:0=========

 bb index 8 
<bb 8> [36.63%]:
_21 = sb_29(D)->alloc;
_22 = st_mult (1, _21);
_23 = (long unsigned int) _22;
_24 = sb_29(D)->buf;
ret_52 = realloc (_24, _23);
_53 = ret_52 == 0B;
_54 = _23 == 0;
_55 = _53 & _54;
if (_55 != 0)
  goto <bb 9>; [33.00%]
else
  goto <bb 10>; [67.00%]

=======is loop:0=========

 bb index 9 
<bb 9> [12.09%]:
ret_56 = realloc (_24, 1);

=======is loop:0=========

 bb index 10 
<bb 10> [36.63%]:
# ret_57 = PHI <ret_52(8), ret_56(9)>
if (ret_57 == 0B)
  goto <bb 11>; [19.86%]
else
  goto <bb 15>; [80.14%]

=======is loop:0=========

 bb index 11 
<bb 11> [7.27%]:
ret_58 = realloc (_24, _23);
_59 = ret_58 == 0B;
_60 = _23 == 0;
_61 = _59 & _60;
if (_61 != 0)
  goto <bb 12>; [33.00%]
else
  goto <bb 13>; [67.00%]

=======is loop:0=========

 bb index 12 
<bb 12> [2.40%]:
ret_62 = realloc (_24, 1);

=======is loop:0=========

 bb index 13 
<bb 13> [7.27%]:
# ret_63 = PHI <ret_58(11), ret_62(12)>
if (ret_63 == 0B)
  goto <bb 14>; [0.04%]
else
  goto <bb 15>; [99.96%]

=======is loop:0=========

 bb index 14 
<bb 14> [0.00%]:
_64 = __printf_chk (1, "Out of memory, realloc failed%s", "");
exit (1);

=======is loop:0=========

 bb index 15 
<bb 15> [36.62%]:
# ret_65 = PHI <ret_57(10), ret_63(13)>
_66 = ret_65;
_76 = ret_65;
_25 = _76;
sb_29(D)->buf = _25;

=======is loop:0=========

 bb index 16 
<bb 16> [99.96%]:
return;

=======Mapping node_fun:strtoul=========
=======is loop:0=========

 bb index 2 
<bb 2> [100.00%]:
_1 = (sizetype) base_3(D);
_2 = str_4(D) + _1;
*endptr_6(D) = _2;
_8 = (long unsigned int) base_3(D);
return _8;

=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [0.35%]:
strbuf_init (&buf, 0);
strbuf_init (&uq, 0);
goto <bb 52>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [14.74%]:
_5 = __errno_location ();
*_5 = 0;
_6 = buf.buf;
_61 = 8;
_62 = _6 + _61;
ptr_172 = _62;
_63 = 8;
_143 = _63;
ul_7 = _143;
_8 = buf.buf;
_9 = ptr_172;
if (_8 == _9)
  goto <bb 50> (bad_line); [0.04%]
else
  goto <bb 4>; [99.96%]

=======is loop:1=========

 bb index 4 
<bb 4> [14.73%]:
_10 = ptr_172;
_11 = *_10;
if (_11 != 32)
  goto <bb 50> (bad_line); [0.04%]
else
  goto <bb 5>; [99.96%]

=======is loop:1=========

 bb index 5 
<bb 5> [14.72%]:
_12 = __errno_location ();
_13 = *_12;
if (_13 != 0)
  goto <bb 50> (bad_line); [0.04%]
else
  goto <bb 6>; [99.96%]

=======is loop:1=========

 bb index 6 
<bb 6> [14.72%]:
_14 = (unsigned int) ul_7;
_15 = ul_7 & 4294967295;
_16 = _15;
if (ul_7 != _15)
  goto <bb 50> (bad_line); [0.04%]
else
  goto <bb 7>; [99.96%]

=======is loop:1=========

 bb index 7 
<bb 7> [14.71%]:
mode_17 = (unsigned int) ul_7;
_18 = ptr_172;
tab_19 = strchr (_18, 9);
if (tab_19 == 0B)
  goto <bb 50> (bad_line); [0.04%]
else
  goto <bb 8>; [99.96%]

=======is loop:1=========

 bb index 8 
<bb 8> [14.71%]:
_20 = (long int) tab_19;
_21 = ptr_172;
_22 = (long int) _21;
_23 = _20 - _22;
if (_23 <= 40)
  goto <bb 50> (bad_line); [0.04%]
else
  goto <bb 9>; [99.96%]

=======is loop:1=========

 bb index 9 
<bb 9> [14.70%]:
_24 = MEM[(char *)tab_19 + -2B];
if (_24 == 32)
  goto <bb 10>; [34.00%]
else
  goto <bb 13>; [66.00%]

=======is loop:1=========

 bb index 10 
<bb 10> [5.00%]:
_25 = MEM[(char *)tab_19 + -1B];
if (_25 > 47)
  goto <bb 11>; [50.00%]
else
  goto <bb 13>; [50.00%]

=======is loop:1=========

 bb index 11 
<bb 11> [2.50%]:
_26 = MEM[(char *)tab_19 + -1B];
if (_26 <= 51)
  goto <bb 12>; [50.00%]
else
  goto <bb 13>; [50.00%]

=======is loop:1=========

 bb index 12 
<bb 12> [1.25%]:
_27 = MEM[(char *)tab_19 + -1B];
_28 = (int) _27;
stage_29 = _28 + -48;
_30 = tab_19 + 1;
ptr_173 = _30;
tab_31 = tab_19 + 18446744073709551614;
goto <bb 14>; [100.00%]

=======is loop:1=========

 bb index 13 
<bb 13> [13.45%]:
_32 = tab_19 + 1;
ptr_174 = _32;

=======is loop:1=========

 bb index 14 
<bb 14> [14.70%]:
# tab_33 = PHI <tab_31(12), tab_19(13)>
# stage_53 = PHI <stage_29(12), 0(13)>
# ptr_171 = PHI <ptr_173(12), ptr_174(13)>
_34 = tab_33 + 18446744073709551576;
_35 = get_sha1_hex (_34, &sha1);
if (_35 != 0)
  goto <bb 50> (bad_line); [0.04%]
else
  goto <bb 15>; [99.96%]

=======is loop:1=========

 bb index 15 
<bb 15> [14.69%]:
_36 = MEM[(char *)tab_33 + -41B];
if (_36 != 32)
  goto <bb 50> (bad_line); [0.04%]
else
  goto <bb 16>; [99.96%]

=======is loop:1=========

 bb index 16 
<bb 16> [14.69%]:
path_name_37 = ptr_171;
if (line_2(D) != 0)
  goto <bb 17>; [67.00%]
else
  goto <bb 40>; [33.00%]

=======is loop:1=========

 bb index 17 
<bb 17> [9.84%]:
_38 = *path_name_37;
if (_38 == 34)
  goto <bb 18>; [20.24%]
else
  goto <bb 40>; [79.76%]

=======is loop:1=========

 bb index 18 
<bb 18> [1.99%]:
_91 = uq.len;
if (_91 != 0)
  goto <bb 19>; [36.64%]
else
  goto <bb 20>; [63.36%]

=======is loop:1=========

 bb index 19 
<bb 19> [0.73%]:
strbuf_setlen (&uq, 0);

=======is loop:1=========

 bb index 20 
<bb 20> [1.99%]:
oldlen_64 = uq.len;
quoted_65 = path_name_37 + 1;
_66 = MEM[(const char *)path_name_37];
if (_66 != 34)
  goto <bb 37> (<L13>); [3.81%]
else
  goto <bb 21>; [96.19%]

=======is loop:1=========

 bb index 21 
<bb 21> [2.73%]:
# quoted_67 = PHI <quoted_65(20), quoted_90(35)>
len_68 = strcspn (quoted_67, "\"\\");
strbuf_grow (&uq, len_68);
_92 = uq.buf;
_93 = uq.len;
_94 = _92 + _93;
memcpy (_94, quoted_67, len_68);
_95 = uq.len;
_96 = len_68 + _95;
strbuf_setlen (&uq, _96);
quoted_69 = quoted_67 + len_68;
_70 = *quoted_69;
_71 = (int) _70;
switch (_70) <default: error [33.33%], case 34: <L13> [33.33%], case 92: <L2> [33.33%]>

=======is loop:1=========

 bb index 22 
<L2> [0.91%]:
quoted_73 = &MEM[(void *)quoted_69 + 2B];
_74 = MEM[(const char *)quoted_69 + 1B];
ch_75 = (int) _74;
switch (_74) <default: error [10.00%], case 34: <L11> [10.00%], case 48 ... 51: <L10> [10.00%], case 92: <L11> [10.00%], case 97: <L3> [10.00%], case 98: <L4> [10.00%], case 102: <L5> [10.00%], case 110: <L6> [10.00%], case 114: <L7> [10.00%], case 116: <L8> [10.00%], case 118: <L9> [10.00%]>

=======is loop:1=========

 bb index 23 
<L3> [0.09%]:
goto <bb 35> (<L11>); [100.00%]

=======is loop:1=========

 bb index 24 
<L4> [0.09%]:
goto <bb 35> (<L11>); [100.00%]

=======is loop:1=========

 bb index 25 
<L5> [0.09%]:
goto <bb 35> (<L11>); [100.00%]

=======is loop:1=========

 bb index 26 
<L6> [0.09%]:
goto <bb 35> (<L11>); [100.00%]

=======is loop:1=========

 bb index 27 
<L7> [0.09%]:
goto <bb 35> (<L11>); [100.00%]

=======is loop:1=========

 bb index 28 
<L8> [0.09%]:
goto <bb 35> (<L11>); [100.00%]

=======is loop:1=========

 bb index 29 
<L9> [0.09%]:
goto <bb 35> (<L11>); [100.00%]

=======is loop:1=========

 bb index 30 
<L10> [0.09%]:
_76 = ch_75 + -48;
ac_77 = _76 << 6;
_78 = MEM[(const char *)quoted_69 + 2B];
ch_79 = (int) _78;
if (ch_79 <= 47)
  goto <bb 36> (error); [2.14%]
else
  goto <bb 31>; [97.86%]

=======is loop:1=========

 bb index 31 
<bb 31> [0.09%]:
if (ch_79 > 55)
  goto <bb 36> (error); [2.14%]
else
  goto <bb 32>; [97.86%]

=======is loop:1=========

 bb index 32 
<bb 32> [0.09%]:
_80 = ch_79 + -48;
_81 = _80 << 3;
ac_82 = ac_77 | _81;
quoted_83 = &MEM[(void *)quoted_69 + 4B];
_84 = MEM[(const char *)quoted_69 + 3B];
ch_85 = (int) _84;
if (ch_85 <= 47)
  goto <bb 36> (error); [2.14%]
else
  goto <bb 33>; [97.86%]

=======is loop:1=========

 bb index 33 
<bb 33> [0.09%]:
if (ch_85 > 55)
  goto <bb 36> (error); [2.14%]
else
  goto <bb 34>; [97.86%]

=======is loop:1=========

 bb index 34 
<bb 34> [0.08%]:
_86 = ch_85 + -48;
ac_87 = ac_82 | _86;

=======is loop:1=========

 bb index 35 
# quoted_90 = PHI <quoted_73(22), quoted_73(23), quoted_73(24), quoted_73(25), quoted_73(26), quoted_73(27), quoted_73(28), quoted_73(29), quoted_83(34)>
# ch_88 = PHI <ch_75(22), 7(23), 8(24), 12(25), 10(26), 13(27), 9(28), 11(29), ac_87(34)>
<L11> [0.81%]:
strbuf_addch (&uq, ch_88);
goto <bb 21>; [100.00%]

=======is loop:1=========

 bb index 36 
error [1.01%]:
strbuf_setlen (&uq, oldlen_64);

=======is loop:1=========

 bb index 37 
# _89 = PHI <-1(20), 0(21), -1(36)>
<L13> [1.99%]:
_153 = _89;
_39 = _153;
if (_39 != 0)
  goto <bb 38>; [0.04%]
else
  goto <bb 39>; [99.96%]

=======is loop:0=========

 bb index 38 
<bb 38> [0.00%]:
_40 = __printf_chk (1, "git-update-index: bad quoting of path name%s", "");
exit (1);

=======is loop:1=========

 bb index 39 
<bb 39> [1.99%]:
path_name_41 = uq.buf;

=======is loop:1=========

 bb index 40 
<bb 40> [14.69%]:
# path_name_42 = PHI <path_name_37(16), path_name_37(17), path_name_41(39)>
_43 = verify_path (path_name_42);
if (_43 == 0)
  goto <bb 41>; [19.52%]
else
  goto <bb 42>; [80.48%]

=======is loop:1=========

 bb index 41 
<bb 41> [2.87%]:
_44 = stderr;
_45 = __fprintf_chk (_44, 1, "Ignoring path %s\n", path_name_42);
// predicted unlikely by continue predictor.
goto <bb 51>; [100.00%]

=======is loop:1=========

 bb index 42 
<bb 42> [11.82%]:
if (mode_17 == 0)
  goto <bb 43>; [50.00%]
else
  goto <bb 45>; [50.00%]

=======is loop:1=========

 bb index 43 
<bb 43> [5.91%]:
_46 = remove_file_from_cache (path_name_42);
if (_46 != 0)
  goto <bb 44>; [0.04%]
else
  goto <bb 47>; [99.96%]

=======is loop:0=========

 bb index 44 
<bb 44> [0.00%]:
_47 = ptr_171;
_48 = __printf_chk (1, "git-update-index: unable to remove %s", _47);
exit (1);

=======is loop:1=========

 bb index 45 
<bb 45> [5.91%]:
_49 = ptr_171;
_50 = _49 + 18446744073709551615;
MEM[(char *)_49 + -1B] = 0;
_51 = ptr_171;
_52 = MEM[(char *)_49 + -1B];
MEM[(char *)_51 + -42B] = _52;
_54 = add_cacheinfo (mode_17, &sha1, path_name_42, stage_53);
if (_54 != 0)
  goto <bb 46>; [0.04%]
else
  goto <bb 47>; [99.96%]

=======is loop:0=========

 bb index 46 
<bb 46> [0.00%]:
_55 = __printf_chk (1, "git-update-index: unable to update %s", path_name_42);
exit (1);

=======is loop:1=========

 bb index 47 
<bb 47> [11.82%]:
_56 = ptr_171;
if (path_name_42 != _56)
  goto <bb 48>; [53.47%]
else
  goto <bb 49>; [46.53%]

=======is loop:1=========

 bb index 48 
<bb 48> [6.32%]:
free (path_name_42);

=======is loop:1=========

 bb index 49 
<bb 49> [11.82%]:
// predicted unlikely by continue predictor.
goto <bb 51>; [100.00%]

=======is loop:0=========

 bb index 50 
bad_line [0.05%]:
_57 = buf.buf;
_58 = __printf_chk (1, "malformed index info %s", _57);
exit (1);

=======is loop:1=========

 bb index 51 
<bb 51> [14.68%]:
sha1 ={v} {CLOBBER};

=======is loop:1=========

 bb index 52 
<bb 52> [15.04%]:
_59 = stdin;
strbuf_grow (&buf, 0);
_97 = feof (_59);
if (_97 != 0)
  goto <bb 61>; [3.98%]
else
  goto <bb 53>; [96.02%]

=======is loop:1=========

 bb index 53 
<bb 53> [14.44%]:
_109 = buf.len;
if (_109 != 0)
  goto <bb 54>; [36.64%]
else
  goto <bb 57>; [63.36%]

=======is loop:1=========

 bb index 54 
<bb 54> [5.29%]:
strbuf_setlen (&buf, 0);
goto <bb 57>; [100.00%]

=======is loop:1=========

 bb index 55 
<bb 55> [92.50%]:
if (line_2(D) == ch_98)
  goto <bb 58>; [7.50%]
else
  goto <bb 56>; [92.50%]

=======is loop:1=========

 bb index 56 
<bb 56> [85.56%]:
strbuf_grow (&buf, 1);
_99 = buf.buf;
_100 = buf.len;
_101 = _100 + 1;
buf.len = _101;
_102 = _99 + _100;
_103 = (char) ch_98;
*_102 = _103;

=======is loop:1=========

 bb index 57 
<bb 57> [100.00%]:
ch_98 = fgetc (_59);
if (ch_98 != -1)
  goto <bb 55>; [92.50%]
else
  goto <bb 58>; [7.50%]

=======is loop:1=========

 bb index 58 
<bb 58> [14.44%]:
if (ch_98 == -1)
  goto <bb 59>; [34.00%]
else
  goto <bb 60>; [66.00%]

=======is loop:1=========

 bb index 59 
<bb 59> [4.91%]:
_104 = buf.len;
if (_104 == 0)
  goto <bb 61>; [2.00%]
else
  goto <bb 60>; [98.00%]

=======is loop:1=========

 bb index 60 
<bb 60> [14.34%]:
_105 = buf.buf;
_106 = buf.len;
_107 = _105 + _106;
*_107 = 0;

=======is loop:1=========

 bb index 61 
<bb 61> [15.04%]:
# _108 = PHI <-1(52), -1(59), 0(60)>
_134 = _108;
_60 = _134;
if (_60 != -1)
  goto <bb 3>; [98.00%]
else
  goto <bb 62>; [2.00%]

=======is loop:0=========

 bb index 62 
<bb 62> [0.30%]:
_111 = buf.buf;
free (_111);
memset (&buf, 0, 24);
_110 = uq.buf;
free (_110);
memset (&uq, 0, 24);
buf ={v} {CLOBBER};
uq ={v} {CLOBBER};
return 0;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    find Entry point : 16 [0m
[40;34m    used_stmt array stack totalsize of : 9008 [0m
[40;34m    collect time: : 0.000562 s [0m
[40;34m    algorithm time: 0.089082 s [0m
[40;34m    gimple stmt count : : 240 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
/usr/bin/ld: /tmp/ccTESCWM.ltrans0.ltrans.o: in function `strbuf_grow':
<artificial>:(.text+0x5e): undefined reference to `alloc_nr'
/usr/bin/ld: <artificial>:(.text+0x80): undefined reference to `st_mult'
/usr/bin/ld: <artificial>:(.text+0xbf): undefined reference to `alloc_nr'
/usr/bin/ld: /tmp/ccTESCWM.ltrans0.ltrans.o: in function `main':
<artificial>:(.text+0x14a): undefined reference to `strbuf_init'
/usr/bin/ld: <artificial>:(.text+0x15e): undefined reference to `strbuf_init'
/usr/bin/ld: <artificial>:(.text+0x20a): undefined reference to `strbuf_setlen'
/usr/bin/ld: <artificial>:(.text+0x288): undefined reference to `get_sha1_hex'
/usr/bin/ld: <artificial>:(.text+0x2a2): undefined reference to `verify_path'
/usr/bin/ld: <artificial>:(.text+0x2ca): undefined reference to `add_cacheinfo'
collect2: error: ld returned 1 exit status
