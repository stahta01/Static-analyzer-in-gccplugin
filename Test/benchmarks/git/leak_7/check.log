In file included from ./benchmarks/git/leak_7/git_leak_7.c:10:
./benchmarks/git/leak_7/../git.h: In function ‘copy_array’:
./benchmarks/git/leak_7/../git.h:161:17: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/leak_7/../git.h:1:1: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  +++ |+#include <string.h>
    1 | #define STRING_LIST_INIT_NODUP { NULL, 0, 0, 0, NULL }
./benchmarks/git/leak_7/../git.h:161:17: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/leak_7/../git.h:161:17: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/leak_7/../git.h:161:34: warning: implicit declaration of function ‘st_mult’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                                  ^~~~~~~
./benchmarks/git/leak_7/../git.h: In function ‘move_array’:
./benchmarks/git/leak_7/../git.h:169:17: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
  169 |                 memmove(dst, src, st_mult(size, n));
      |                 ^~~~~~~
./benchmarks/git/leak_7/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
./benchmarks/git/leak_7/../git.h:169:17: warning: incompatible implicit declaration of built-in function ‘memmove’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/leak_7/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
In file included from ./benchmarks/git/leak_7/git_leak_7.c:9:
./benchmarks/git/leak_7/../git.h: In function ‘xstrdup_or_null’:
./benchmarks/git/leak_7/../stdio.h:138:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/leak_7/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
./benchmarks/git/leak_7/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/leak_7/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
In file included from ./benchmarks/git/leak_7/git_leak_7.c:10:
./benchmarks/git/leak_7/../git.h: At top level:
./benchmarks/git/leak_7/../git.h:236:62: warning: ‘struct archiver_args’ declared inside parameter list will not be visible outside of this definition or declaration
  236 |         int (*write_archive)(const struct archiver *, struct archiver_args *);
      |                                                              ^~~~~~~~~~~~~
./benchmarks/git/leak_7/../git.h: In function ‘strbuf_swap’:
./benchmarks/git/leak_7/../git.h:126:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/leak_7/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/leak_7/../git.h:126:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/leak_7/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
In file included from ./benchmarks/git/leak_7/git_leak_7.c:9:
./benchmarks/git/leak_7/git_leak_7.c: In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/leak_7/git_leak_7.c:47:31: note: in expansion of macro ‘xstrdup’
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                               ^~~~~~~
./benchmarks/git/leak_7/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/leak_7/git_leak_7.c:50:31: note: in expansion of macro ‘xstrdup’
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                               ^~~~~~~
./benchmarks/git/leak_7/git_leak_7.c: In function ‘commit_is_complete’:
./benchmarks/git/leak_7/git_leak_7.c:80:9: warning: implicit declaration of function ‘memset’ [-Wimplicit-function-declaration]
   80 |         memset(&study, 0, sizeof(study));
      |         ^~~~~~
./benchmarks/git/leak_7/git_leak_7.c:11:1: note: include ‘<string.h>’ or provide a declaration of ‘memset’
   10 | #include "../git.h"
  +++ |+#include <string.h>
   11 | 
./benchmarks/git/leak_7/git_leak_7.c:80:9: warning: incompatible implicit declaration of built-in function ‘memset’ [-Wbuiltin-declaration-mismatch]
   80 |         memset(&study, 0, sizeof(study));
      |         ^~~~~~
./benchmarks/git/leak_7/git_leak_7.c:80:9: note: include ‘<string.h>’ or provide a declaration of ‘memset’
./benchmarks/git/leak_7/git_leak_7.c:90:43: warning: implicit declaration of function ‘parse_object’ [-Wimplicit-function-declaration]
   90 |                 if (!c->object.parsed && !parse_object(&c->object.oid))
      |                                           ^~~~~~~~~~~~
./benchmarks/git/leak_7/git_leak_7.c:116:30: warning: implicit declaration of function ‘tree_is_complete’; did you mean ‘commit_is_complete’? [-Wimplicit-function-declaration]
  116 |                         if (!tree_is_complete(&c->tree->object.oid)) {
      |                              ^~~~~~~~~~~~~~~~
      |                              commit_is_complete
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cfg                  ------------|      |      |      |      |          |          |
ompexp                           |      |      |      |      |   +100.0%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
ssa                              |      |      |      |      |     -1.2%|          |
nothrow                          |      |      |      |      |     -1.2%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
einline              ------------|      |      |      |      |          |          |
early_optimizations  ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
ethread              ------------|      |      |      |      |          |          |
esra                 ------------|      |      |      |      |          |          |
ealias               ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
modref               ------------|      |      |      |      |          |          |
iftoswitch           ------------|      |      |      |      |          |          |
profile_estimate     ------------|      |      |      |      |          |          |
local-pure-const                 |      |      |      |      |          |   +100.0%|
release_ssa          ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
=======ipa_pta=========
===============The first stage : Point of interest stmt collect=================
=======node_fun:main=========

=======node_fun:commit_is_complete=========

--------GIMPLE Cond -------
succs:= 2
--------GIMPLE Cond -------
succs:= 3
--------GIMPLE Cond -------
succs:= 5
--------GIMPLE Cond -------
succs:= 6
succs:= 5
succs:= 6
--------GIMPLE Cond -------
succs:= 8
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 9
succs:= 9
succs:= 10
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 12
succs:= 12
succs:= 13
succs:= 13
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 8
succs:= 18
succs:= 19
--------GIMPLE Cond -------
succs:= 20
succs:= 20
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 23
succs:= 24
--------GIMPLE Cond -------
succs:= 19
succs:= 24
succs:= 26
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 29
succs:= 30
succs:= 30
--------GIMPLE Cond -------
succs:= 33
succs:= 2
succs:= 3
=======node_fun:add_object_array=========

=======node_fun:add_object_array_with_path=========

--------GIMPLE Cond -------
succs:= 2
succs:= 2
--------GIMPLE Cond -------
succs:= 33
succs:= 4
succs:= 4
--------GIMPLE Cond -------
succs:= 6
succs:= 6
--------GIMPLE Cond -------
succs:= 9
succs:= 9
=======node_fun:xrealloc=========

--------GIMPLE Cond -------
succs:= 2
--------GIMPLE Cond -------
succs:= 2
succs:= 4
--------GIMPLE Cond -------
succs:= 5
--------GIMPLE Cond -------
succs:= 5
succs:= 7
succs:= 4
succs:= 7
===============The first stage : Point of interest stmt collect=================
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
===============The second stage : Mapping stmt=================
# .MEM_2 = VDEF <.MEM_1(D)>
commit_is_complete (&commit);
# .MEM_161 = VDEF <.MEM_160(D)>
memset (&study, 0, 16);
# .MEM_162 = VDEF <.MEM_161>
memset (&found, 0, 16);
# .MEM_163 = VDEF <.MEM_162>
add_object_array (_4, 0B, &study);
# .MEM_164 = VDEF <.MEM_163>
add_object_array (_5, 0B, &found);
# .MEM_167 = VDEF <.MEM_166>
_18 = parse_object (_17);
# .MEM_170 = VDEF <.MEM_169>
add_object_array (_26, 0B, &study);
# .MEM_171 = VDEF <.MEM_170>
add_object_array (_27, 0B, &found);
# .MEM_173 = VDEF <.MEM_153>
_35 = tree_is_complete (_34);
# .MEM_6 = VDEF <.MEM_5(D)>
add_object_array_with_path (obj_2(D), name_3(D), array_4(D), 12288, 0B);
# .MEM_43 = VDEF <.MEM_42(D)>
_2 = st_mult (32, alloc_18);
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
# .MEM_48 = VDEF <.MEM_47>
_7 = strdup (name_27(D));
# .MEM_54 = VDEF <.MEM_52>
_8 = strdup (path_34(D));
# .MEM_32 = VDEF <.MEM_25>
printf ("Out of memory, realloc failed%s", "");
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
===============The second stage : record fucntion =================

=============== The third stage : Start detection  =================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:commit_is_complete========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path commit_is_complete  function_call count: 5 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:tree_is_complete========= [0m
[40;33m =======POP node_fun stack:tree_is_complete========= [0m
[40;42m =======pre add _ fucntion:add_object_array========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path add_object_array  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path add_object_array_with_path  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;33m =======POP node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :4========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a00d8
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fa11e585b10>
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
In function ‘main’:
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘main’:
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘main’:
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘main’:
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘main’:
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘main’:
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘main’:
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘main’:
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘main’:
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a00d8
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fa11e585b10>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a0120
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fa11e585b28>
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘main’:
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘main’:
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘main’:
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a0120
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fa11e585b28>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a0168
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fa11e585b40>
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘main’:
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘main’:
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘main’:
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘main’:
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘main’:
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘main’:
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘main’:
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘main’:
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a0168
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fa11e585b40>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a01b0
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fa11e585b58>
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘main’:
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘main’:
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘main’:
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘main’:
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘main’:
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘main’:
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a01b0
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fa11e585b58>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa11e59e0c0
    type <pointer_type 0x7fa11e5787e0
        type <array_type 0x7fa11e578738 type <integer_type 0x7fa11e571b28 char>
            BLK
            size <integer_cst 0x7fa11ea48f18 constant 256>
            unit-size <integer_cst 0x7fa11ea66018 constant 32>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fa11e578690>
            pointer_to_this <pointer_type 0x7fa11e5787e0>>
        unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fa11ea52118 type <array_type 0x7fa11e578738>
        readonly constant static "Out of memory, realloc failed%s\000">
    ./benchmarks/git/leak_7/../git.h:422:4 start: ./benchmarks/git/leak_7/../git.h:422:4 finish: ./benchmarks/git/leak_7/../git.h:422:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre_check_funciton:add_object_array_with_path========= [0m
[40;42m =======start_check_funciton:add_object_array_with_path========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa11e598438
    type <pointer_type 0x7fa11e5781f8
        type <integer_type 0x7fa11e571b28 char public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e5781f8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>>
   
    def_stmt _7 = strdup (name_27(D));
    version:7
    ptr-info 0x7fa11e5859c0>
# .MEM_48 = VDEF <.MEM_47>
_7 = strdup (name_27(D));

 ================== trace ptable================== 
trace fucntion name:strdup 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strdup-----
this Reserved word function ------strdup-----
 
 Start check Pointer Collect  

======================================================================
_7 = strdup (name_27(D));
./benchmarks/git/leak_7/git_leak_7.c:47:31: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                               ^
this stmt is child function---strdup-----

 ================== trace ================== 
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
_6 = *name_27(D);
./benchmarks/git/leak_7/git_leak_7.c:43:19: warning: use location
   43 |         else if (!*name)
      |                   ^
if (_6 == 0)
./benchmarks/git/leak_7/git_leak_7.c:43:17: warning: use location
   43 |         else if (!*name)
      |                 ^
if (_6 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:43:17: warning: use location
Cond in fucntion add_object_array_with_path basic block 6
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 7
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 8
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
if (name_27(D) == 0B)
./benchmarks/git/leak_7/git_leak_7.c:41:12: warning: use location
   41 |         if (!name)
      |            ^
if (name_27(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:41:12: warning: use location
Cond in fucntion add_object_array_with_path basic block 4
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 5
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e598438
    type <pointer_type 0x7fa11e5781f8
        type <integer_type 0x7fa11e571b28 char public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e5781f8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>>
   
    def_stmt _7 = strdup (name_27(D));
    version:7
    ptr-info 0x7fa11e5859c0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e598480
    type <pointer_type 0x7fa11e5781f8
        type <integer_type 0x7fa11e571b28 char public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e5781f8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>>
   
    def_stmt _8 = strdup (path_34(D));
    version:8
    ptr-info 0x7fa11e5859d8>
# .MEM_54 = VDEF <.MEM_52>
_8 = strdup (path_34(D));

 ================== trace ptable================== 
trace fucntion name:strdup 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strdup-----
this Reserved word function ------strdup-----
 
 Start check Pointer Collect  

======================================================================
_8 = strdup (path_34(D));
./benchmarks/git/leak_7/git_leak_7.c:50:31: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                               ^
this stmt is child function---strdup-----

 ================== trace ================== 
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
if (path_34(D) != 0B)
./benchmarks/git/leak_7/git_leak_7.c:49:12: warning: use location
   49 |         if (path)
      |            ^
if (path_34(D) != 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:49:12: warning: use location
Cond in fucntion add_object_array_with_path basic block 9
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 10
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 11
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e598480
    type <pointer_type 0x7fa11e5781f8
        type <integer_type 0x7fa11e571b28 char public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e5781f8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>>
   
    def_stmt _8 = strdup (path_34(D));
    version:8
    ptr-info 0x7fa11e5859d8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa11e5853d8 type <integer_type 0x7fa11ea5d7e0 long unsigned int> constant 32>

dot graph START

======================================================================
 <ssa_name 0x7fa11e5985e8
    type <pointer_type 0x7fa11e57c498
        type <record_type 0x7fa11e57c3f0 object_array_entry BLK
            size <integer_cst 0x7fa11ea48f18 constant 256>
            unit-size <integer_cst 0x7fa11ea66018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c3f0 fields <field_decl 0x7fa11e574850 item> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c498>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa11e58b750 objects>
    def_stmt objects_17 = array_14(D)->objects;
    version:17
    ptr-info 0x7fa11e585a20>
# VUSE <.MEM_42(D)>
objects_17 = array_14(D)->objects;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
objects_9 = PHI <objects_17(2), objects_21(3)>
lto1: warning: use location
this stmt have mutiple branch --------
entry_24 = objects_9 + _5;
./benchmarks/git/leak_7/git_leak_7.c:39:15: warning: use location
   39 |         entry = &objects[nr];
      |               ^
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
objects_21 = xrealloc (objects_17, _3);
In function ‘main’:
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: use location
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
this stmt is child function---xrealloc-----

 ================== trace ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with objects ========= [0m
[40;36m ======= relate stmt argument:objects ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_46 = VDEF <.MEM_45>
array_14(D)->objects = objects_21;
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_46 = VDEF <.MEM_45>
array_14(D)->objects = objects_21;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_46 = VDEF <.MEM_45>
array_14(D)->objects = objects_21;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
array_14(D)->objects = objects_21;
In function ‘main’:
./benchmarks/git/leak_7/git_leak_7.c:37:32: warning: use location
   37 |                 array->objects = objects;
      |                                ^
array_14(D)->nr = nr_38;
./benchmarks/git/leak_7/git_leak_7.c:53:19: warning: use location
   53 |         array->nr = ++nr;
      |                   ^
array_14(D)->nr = nr_38;
./benchmarks/git/leak_7/git_leak_7.c:53:19: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
array_14(D)->alloc = alloc_18;
In function ‘main’:
./benchmarks/git/leak_7/git_leak_7.c:36:30: warning: use location
   36 |                 array->alloc = alloc;
      |                              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
array_14(D)->alloc = alloc_18;
In function ‘main’:
./benchmarks/git/leak_7/git_leak_7.c:36:30: warning: use location
   36 |                 array->alloc = alloc;
      |                              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_2 = st_mult (32, alloc_18);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_2 = st_mult (32, alloc_18);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_2 = st_mult (32, alloc_18);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
_2 = st_mult (32, alloc_18);
In function ‘main’:
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: use location
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = (long unsigned int) _2;
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = (long unsigned int) _2;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = (long unsigned int) _2;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
_3 = (long unsigned int) _2;
In function ‘main’:
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: use location
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
objects_17 = array_14(D)->objects;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
objects_17 = array_14(D)->objects;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
objects_17 = array_14(D)->objects;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
objects_17 = array_14(D)->objects;
In function ‘main’:
./benchmarks/git/leak_7/git_leak_7.c:30:36: warning: use location
   30 |         struct object_array_entry *objects = array->objects;
      |                                    ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
alloc_16 = array_14(D)->alloc;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
alloc_16 = array_14(D)->alloc;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
alloc_16 = array_14(D)->alloc;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
alloc_16 = array_14(D)->alloc;
In function ‘main’:
./benchmarks/git/leak_7/git_leak_7.c:29:18: warning: use location
   29 |         unsigned alloc = array->alloc;
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = alloc_16 + 32;
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = alloc_16 + 32;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = alloc_16 + 32;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
_1 = alloc_16 + 32;
In function ‘main’:
./benchmarks/git/leak_7/git_leak_7.c:34:32: warning: use location
   34 |                 alloc = (alloc + 32) * 2;
      |                                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
nr_15 = array_14(D)->nr;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
nr_15 = array_14(D)->nr;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
nr_15 = array_14(D)->nr;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
nr_15 = array_14(D)->nr;
In function ‘main’:
./benchmarks/git/leak_7/git_leak_7.c:28:18: warning: use location
   28 |         unsigned nr = array->nr;
      |                  ^
_4 = (long unsigned int) nr_15;
./benchmarks/git/leak_7/git_leak_7.c:39:25: warning: use location
   39 |         entry = &objects[nr];
      |                         ^
_5 = _4 * 32;
./benchmarks/git/leak_7/git_leak_7.c:39:25: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5985e8
    type <pointer_type 0x7fa11e57c498
        type <record_type 0x7fa11e57c3f0 object_array_entry BLK
            size <integer_cst 0x7fa11ea48f18 constant 256>
            unit-size <integer_cst 0x7fa11ea66018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c3f0 fields <field_decl 0x7fa11e574850 item> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c498>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa11e58b750 objects>
    def_stmt objects_17 = array_14(D)->objects;
    version:17
    ptr-info 0x7fa11e585a20>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
objects_9 = PHI <objects_17(2), objects_21(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
entry_24 = objects_9 + _5;
./benchmarks/git/leak_7/git_leak_7.c:39:15: warning: use location
   39 |         entry = &objects[nr];
      |               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_55 = VDEF <.MEM_54>
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_53 = VDEF <.MEM_52>
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_52 = VDEF <.MEM_40>
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_52 = VDEF <.MEM_40>
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_49 = VDEF <.MEM_48>
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_49 = VDEF <.MEM_48>
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_50 = VDEF <.MEM_47>
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_51 = VDEF <.MEM_47>
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_47 = VDEF <.MEM_39>
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_47 = VDEF <.MEM_39>
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_46 = VDEF <.MEM_45>
array_14(D)->objects = objects_21;
./benchmarks/git/leak_7/git_leak_7.c:37:32: warning: use location
   37 |                 array->objects = objects;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_56 = VDEF <.MEM_41>
array_14(D)->nr = nr_38;
./benchmarks/git/leak_7/git_leak_7.c:53:19: warning: use location
   53 |         array->nr = ++nr;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_56 = VDEF <.MEM_41>
array_14(D)->nr = nr_38;
./benchmarks/git/leak_7/git_leak_7.c:53:19: warning: use location
   53 |         array->nr = ++nr;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
./benchmarks/git/leak_7/git_leak_7.c:36:30: warning: use location
   36 |                 array->alloc = alloc;
      |                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
./benchmarks/git/leak_7/git_leak_7.c:36:30: warning: use location
   36 |                 array->alloc = alloc;
      |                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
_4 = (long unsigned int) nr_15;
./benchmarks/git/leak_7/git_leak_7.c:39:25: warning: use location
   39 |         entry = &objects[nr];
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
_5 = _4 * 32;
./benchmarks/git/leak_7/git_leak_7.c:39:25: warning: use location
   39 |         entry = &objects[nr];
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e598750
    type <pointer_type 0x7fa11e571c78
        type <integer_type 0x7fa11e571bd0 char readonly public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e571c78>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e380 name>
    def_stmt GIMPLE_NOP
    version:27
    ptr-info 0x7fa11e585a80>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_7 = strdup (name_27(D));
./benchmarks/git/leak_7/git_leak_7.c:47:31: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                               ^
this stmt is child function---strdup-----

 ================== trace ================== 
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
_6 = *name_27(D);
./benchmarks/git/leak_7/git_leak_7.c:43:19: warning: use location
   43 |         else if (!*name)
      |                   ^
if (_6 == 0)
./benchmarks/git/leak_7/git_leak_7.c:43:17: warning: use location
   43 |         else if (!*name)
      |                 ^
if (_6 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:43:17: warning: use location
Cond in fucntion add_object_array_with_path basic block 6
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 7
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 8
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
if (name_27(D) == 0B)
./benchmarks/git/leak_7/git_leak_7.c:41:12: warning: use location
   41 |         if (!name)
      |            ^
if (name_27(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:41:12: warning: use location
Cond in fucntion add_object_array_with_path basic block 4
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 5
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e598750
    type <pointer_type 0x7fa11e571c78
        type <integer_type 0x7fa11e571bd0 char readonly public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e571c78>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e380 name>
    def_stmt GIMPLE_NOP
    version:27
    ptr-info 0x7fa11e585a80>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5987e0
    type <pointer_type 0x7fa11e571c78
        type <integer_type 0x7fa11e571bd0 char readonly public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e571c78>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e500 path>
    def_stmt GIMPLE_NOP
    version:34
    ptr-info 0x7fa11e585a98>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_8 = strdup (path_34(D));
./benchmarks/git/leak_7/git_leak_7.c:50:31: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                               ^
this stmt is child function---strdup-----

 ================== trace ================== 
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
if (path_34(D) != 0B)
./benchmarks/git/leak_7/git_leak_7.c:49:12: warning: use location
   49 |         if (path)
      |            ^
if (path_34(D) != 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:49:12: warning: use location
Cond in fucntion add_object_array_with_path basic block 9
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 10
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 11
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5987e0
    type <pointer_type 0x7fa11e571c78
        type <integer_type 0x7fa11e571bd0 char readonly public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e571c78>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e500 path>
    def_stmt GIMPLE_NOP
    version:34
    ptr-info 0x7fa11e585a98>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:add_object_array_with_path========= [0m
[40;42m =======pre_check_funciton:add_object_array========= [0m
[40;42m =======start_check_funciton:add_object_array========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa11e598120
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e180 obj>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fa11e585978>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
add_object_array_with_path (obj_2(D), name_3(D), array_4(D), 12288, 0B);
add_object_array_with_path (obj_2(D), name_3(D), array_4(D), 12288, 0B);
./benchmarks/git/leak_7/git_leak_7.c:58:9: warning: use location
   58 |         add_object_array_with_path(obj, name, array, S_IFINVALID, NULL);
      |         ^
this stmt is child function---add_object_array_with_path-----

 ================== trace ================== 
trace fucntion name:add_object_array_with_path 
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with obj ========= [0m
[40;36m ======= relate stmt argument:obj ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with obj ========= [0m
[40;36m ======= relate stmt argument:obj ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:4 
# .MEM_6 = VDEF <.MEM_5(D)>
add_object_array_with_path (obj_2(D), name_3(D), array_4(D), 12288, 0B);
add_object_array_with_path (obj_2(D), name_3(D), array_4(D), 12288, 0B);
./benchmarks/git/leak_7/git_leak_7.c:58:9: warning: use location
   58 |         add_object_array_with_path(obj, name, array, S_IFINVALID, NULL);
      |         ^
this stmt is child function---add_object_array_with_path-----

 ================== trace ================== 
trace fucntion name:add_object_array_with_path 
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with obj ========= [0m
[40;36m ======= relate stmt argument:obj ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with obj ========= [0m
[40;36m ======= relate stmt argument:obj ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e598120
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e180 obj>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fa11e585978>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================
[40;33m =======POP node_fun stack:add_object_array========= [0m
[40;42m =======pre add _ fucntion:parse_object========= [0m
[40;33m =======POP node_fun stack:parse_object========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;33m =======POP node_fun stack:memset========= [0m
[40;42m =======pre_check_funciton:commit_is_complete========= [0m
[40;42m =======start_check_funciton:commit_is_complete========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa11ec44c20
    type <pointer_type 0x7fa11e57c348
        type <record_type 0x7fa11e57c2a0 object_array TI
            size <integer_cst 0x7fa11ea48c00 constant 128>
            unit-size <integer_cst 0x7fa11ea48c18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c2a0 fields <field_decl 0x7fa11e5745f0 nr> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c348>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fa11e58b090 study type <record_type 0x7fa11e57c2a0 object_array>
        addressable TI ./benchmarks/git/leak_7/git_leak_7.c:63:22 size <integer_cst 0x7fa11ea48c00 128> unit-size <integer_cst 0x7fa11ea48c18 16>
        align:64 warn_if_not_align:0 context <function_decl 0x7fa11e572d00 commit_is_complete>
        chain <var_decl 0x7fa11e58b000 found type <record_type 0x7fa11e57c2a0 object_array>
            addressable TI ./benchmarks/git/leak_7/git_leak_7.c:64:22 size <integer_cst 0x7fa11ea48c00 128> unit-size <integer_cst 0x7fa11ea48c18 16>
            align:64 warn_if_not_align:0 context <function_decl 0x7fa11e572d00 commit_is_complete> chain <var_decl 0x7fa11f2f0f30 is_incomplete>>>
    ./benchmarks/git/leak_7/git_leak_7.c:80:9 start: ./benchmarks/git/leak_7/git_leak_7.c:80:9 finish: ./benchmarks/git/leak_7/git_leak_7.c:80:9>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa11ec44c60
    type <pointer_type 0x7fa11e57c348
        type <record_type 0x7fa11e57c2a0 object_array TI
            size <integer_cst 0x7fa11ea48c00 constant 128>
            unit-size <integer_cst 0x7fa11ea48c18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c2a0 fields <field_decl 0x7fa11e5745f0 nr> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c348>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fa11e58b000 found type <record_type 0x7fa11e57c2a0 object_array>
        addressable TI ./benchmarks/git/leak_7/git_leak_7.c:64:22 size <integer_cst 0x7fa11ea48c00 128> unit-size <integer_cst 0x7fa11ea48c18 16>
        align:64 warn_if_not_align:0 context <function_decl 0x7fa11e572d00 commit_is_complete>
        chain <var_decl 0x7fa11f2f0f30 is_incomplete type <integer_type 0x7fa11ea5d5e8 int>
            SI ./benchmarks/git/leak_7/git_leak_7.c:65:6
            size <integer_cst 0x7fa11ea48df8 constant 32>
            unit-size <integer_cst 0x7fa11ea48e10 constant 4>
            align:32 warn_if_not_align:0 context <function_decl 0x7fa11e572d00 commit_is_complete> chain <var_decl 0x7fa11f2f0ea0 i>>>
    ./benchmarks/git/leak_7/git_leak_7.c:81:9 start: ./benchmarks/git/leak_7/git_leak_7.c:81:9 finish: ./benchmarks/git/leak_7/git_leak_7.c:81:9>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11ea50798
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _4 = &commit_112(D)->object;
    version:4
    ptr-info 0x7fa11e5855e8>
_4 = &commit_112(D)->object;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_163 = VDEF <.MEM_162>
add_object_array (_4, 0B, &study);
bb index := 4
# VUSE <.MEM_181>
return _96;
In function ‘commit_is_complete’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 35

======================================================================
# .MEM_163 = VDEF <.MEM_162>
add_object_array (_4, 0B, &study);
add_object_array (_4, 0B, &study);
In function ‘main’:
./benchmarks/git/leak_7/git_leak_7.c:82:9: warning: use location
   82 |         add_object_array(&commit->object, NULL, &study);
      |         ^
this stmt is child function---add_object_array-----

 ================== trace ================== 
trace fucntion name:add_object_array 
[40;44m =======trace_function_path add_object_array  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:add_object_array========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;46m =======add node_fun stack:add_object_array_with_path========= [0m
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_163 = VDEF <.MEM_162>
add_object_array (_4, 0B, &study);
bb index := 4
# VUSE <.MEM_181>
return _96;
In function ‘commit_is_complete’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 35

======================================================================
# .MEM_163 = VDEF <.MEM_162>
add_object_array (_4, 0B, &study);
add_object_array (_4, 0B, &study);
In function ‘main’:
./benchmarks/git/leak_7/git_leak_7.c:82:9: warning: use location
   82 |         add_object_array(&commit->object, NULL, &study);
      |         ^
this stmt is child function---add_object_array-----

 ================== trace ================== 
trace fucntion name:add_object_array 
[40;44m =======trace_function_path add_object_array  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:add_object_array========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;46m =======add node_fun stack:add_object_array_with_path========= [0m
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11ea50798
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _4 = &commit_112(D)->object;
    version:4
    ptr-info 0x7fa11e5855e8>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_177 = VDEF <.MEM_158>
free (_84);
./benchmarks/git/leak_7/git_leak_7.c:145:5: warning: use location
  145 |     free(study.objects);    /* memory leak */
      |     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_178 = VDEF <.MEM_177>
free (_85);
./benchmarks/git/leak_7/git_leak_7.c:146:5: warning: use location
  146 |     free(found.objects);    /* memory leak */
      |     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [Looserules]:2 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11ea507e0
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = &commit_112(D)->object;
    version:5
    ptr-info 0x7fa11e585600>
_5 = &commit_112(D)->object;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_164 = VDEF <.MEM_163>
add_object_array (_5, 0B, &found);
bb index := 4
# VUSE <.MEM_181>
return _96;
In function ‘commit_is_complete’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 35

======================================================================
# .MEM_164 = VDEF <.MEM_163>
add_object_array (_5, 0B, &found);
add_object_array (_5, 0B, &found);
In function ‘main’:
./benchmarks/git/leak_7/git_leak_7.c:83:9: warning: use location
   83 |         add_object_array(&commit->object, NULL, &found);
      |         ^
this stmt is child function---add_object_array-----

 ================== trace ================== 
trace fucntion name:add_object_array 
[40;44m =======trace_function_path add_object_array  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:add_object_array========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;46m =======add node_fun stack:add_object_array_with_path========= [0m
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_164 = VDEF <.MEM_163>
add_object_array (_5, 0B, &found);
bb index := 4
# VUSE <.MEM_181>
return _96;
In function ‘commit_is_complete’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 35

======================================================================
# .MEM_164 = VDEF <.MEM_163>
add_object_array (_5, 0B, &found);
add_object_array (_5, 0B, &found);
In function ‘main’:
./benchmarks/git/leak_7/git_leak_7.c:83:9: warning: use location
   83 |         add_object_array(&commit->object, NULL, &found);
      |         ^
this stmt is child function---add_object_array-----

 ================== trace ================== 
trace fucntion name:add_object_array 
[40;44m =======trace_function_path add_object_array  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:add_object_array========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;46m =======add node_fun stack:add_object_array_with_path========= [0m
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11ea507e0
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = &commit_112(D)->object;
    version:5
    ptr-info 0x7fa11e585600>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_177 = VDEF <.MEM_158>
free (_84);
./benchmarks/git/leak_7/git_leak_7.c:145:5: warning: use location
  145 |     free(study.objects);    /* memory leak */
      |     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_178 = VDEF <.MEM_177>
free (_85);
./benchmarks/git/leak_7/git_leak_7.c:146:5: warning: use location
  146 |     free(found.objects);    /* memory leak */
      |     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [Looserules]:2 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11ea50b40
    type <pointer_type 0x7fa11e57cdc8
        type <record_type 0x7fa11e578d20 object_id BLK
            size <integer_cst 0x7fa11e5687f8 constant 160>
            unit-size <integer_cst 0x7fa11e5687e0 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e578d20 fields <field_decl 0x7fa11e574130 hash> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57cdc8>>
        unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _17 = &c_119->object.oid;
    version:17
    ptr-info 0x7fa11e585648>
_17 = &c_119->object.oid;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_18 = parse_object (_17);
./benchmarks/git/leak_7/git_leak_7.c:90:43: warning: use location
   90 |                 if (!c->object.parsed && !parse_object(&c->object.oid))
      |                                           ^
this stmt is child function---parse_object-----

 ================== trace ================== 
trace fucntion name:parse_object 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_18 == 0)
./benchmarks/git/leak_7/git_leak_7.c:90:39: warning: use location
   90 |                 if (!c->object.parsed && !parse_object(&c->object.oid))
      |                                       ^
if (_18 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:90:39: warning: use location
Cond in fucntion commit_is_complete basic block 6
 ================== possible direct basic block ================= 
from commit_is_complete basic block 7
 ================== possible direct basic block ================= 
from commit_is_complete basic block 8
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11ea50b40
    type <pointer_type 0x7fa11e57cdc8
        type <record_type 0x7fa11e578d20 object_id BLK
            size <integer_cst 0x7fa11e5687f8 constant 160>
            unit-size <integer_cst 0x7fa11e5687e0 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e578d20 fields <field_decl 0x7fa11e574130 hash> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57cdc8>>
        unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _17 = &c_119->object.oid;
    version:17
    ptr-info 0x7fa11e585648>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_177 = VDEF <.MEM_158>
free (_84);
./benchmarks/git/leak_7/git_leak_7.c:145:5: warning: use location
  145 |     free(study.objects);    /* memory leak */
      |     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_178 = VDEF <.MEM_177>
free (_85);
./benchmarks/git/leak_7/git_leak_7.c:146:5: warning: use location
  146 |     free(found.objects);    /* memory leak */
      |     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:0 [0m
[40;31m  	possible double free [Looserules]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11ea50dc8
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _26 = &p_123->object;
    version:26
    ptr-info 0x7fa11e585660>
_26 = &p_123->object;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_170 = VDEF <.MEM_169>
add_object_array (_26, 0B, &study);
add_object_array (_26, 0B, &study);
./benchmarks/git/leak_7/git_leak_7.c:104:25: warning: use location
  104 |                         add_object_array(&p->object, NULL, &study);
      |                         ^
this stmt is child function---add_object_array-----

 ================== trace ================== 
trace fucntion name:add_object_array 
[40;44m =======trace_function_path add_object_array  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:add_object_array========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;46m =======add node_fun stack:add_object_array_with_path========= [0m
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_170 = VDEF <.MEM_169>
add_object_array (_26, 0B, &study);
add_object_array (_26, 0B, &study);
./benchmarks/git/leak_7/git_leak_7.c:104:25: warning: use location
  104 |                         add_object_array(&p->object, NULL, &study);
      |                         ^
this stmt is child function---add_object_array-----

 ================== trace ================== 
trace fucntion name:add_object_array 
[40;44m =======trace_function_path add_object_array  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:add_object_array========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;46m =======add node_fun stack:add_object_array_with_path========= [0m
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11ea50dc8
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _26 = &p_123->object;
    version:26
    ptr-info 0x7fa11e585660>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_177 = VDEF <.MEM_158>
free (_84);
./benchmarks/git/leak_7/git_leak_7.c:145:5: warning: use location
  145 |     free(study.objects);    /* memory leak */
      |     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_178 = VDEF <.MEM_177>
free (_85);
./benchmarks/git/leak_7/git_leak_7.c:146:5: warning: use location
  146 |     free(found.objects);    /* memory leak */
      |     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [Looserules]:2 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11ea50e10
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _27 = &p_123->object;
    version:27
    ptr-info 0x7fa11e585678>
_27 = &p_123->object;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_171 = VDEF <.MEM_170>
add_object_array (_27, 0B, &found);
add_object_array (_27, 0B, &found);
./benchmarks/git/leak_7/git_leak_7.c:105:25: warning: use location
  105 |                         add_object_array(&p->object, NULL, &found);
      |                         ^
this stmt is child function---add_object_array-----

 ================== trace ================== 
trace fucntion name:add_object_array 
[40;44m =======trace_function_path add_object_array  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:add_object_array========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;46m =======add node_fun stack:add_object_array_with_path========= [0m
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_171 = VDEF <.MEM_170>
add_object_array (_27, 0B, &found);
add_object_array (_27, 0B, &found);
./benchmarks/git/leak_7/git_leak_7.c:105:25: warning: use location
  105 |                         add_object_array(&p->object, NULL, &found);
      |                         ^
this stmt is child function---add_object_array-----

 ================== trace ================== 
trace fucntion name:add_object_array 
[40;44m =======trace_function_path add_object_array  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:add_object_array========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;46m =======add node_fun stack:add_object_array_with_path========= [0m
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11ea50e10
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _27 = &p_123->object;
    version:27
    ptr-info 0x7fa11e585678>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_177 = VDEF <.MEM_158>
free (_84);
./benchmarks/git/leak_7/git_leak_7.c:145:5: warning: use location
  145 |     free(study.objects);    /* memory leak */
      |     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_178 = VDEF <.MEM_177>
free (_85);
./benchmarks/git/leak_7/git_leak_7.c:146:5: warning: use location
  146 |     free(found.objects);    /* memory leak */
      |     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [Looserules]:2 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e590048
    type <pointer_type 0x7fa11e57cdc8
        type <record_type 0x7fa11e578d20 object_id BLK
            size <integer_cst 0x7fa11e5687f8 constant 160>
            unit-size <integer_cst 0x7fa11e5687e0 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e578d20 fields <field_decl 0x7fa11e574130 hash> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57cdc8>>
        unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _34 = &_33->object.oid;
    version:34
    ptr-info 0x7fa11e5856d8>
_34 = &_33->object.oid;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_35 = tree_is_complete (_34);
./benchmarks/git/leak_7/git_leak_7.c:116:30: warning: use location
  116 |                         if (!tree_is_complete(&c->tree->object.oid)) {
      |                              ^
this stmt is child function---tree_is_complete-----

 ================== trace ================== 
trace fucntion name:tree_is_complete 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_35 == 0)
./benchmarks/git/leak_7/git_leak_7.c:116:28: warning: use location
  116 |                         if (!tree_is_complete(&c->tree->object.oid)) {
      |                            ^
if (_35 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:116:28: warning: use location
Cond in fucntion commit_is_complete basic block 20
 ================== possible direct basic block ================= 
from commit_is_complete basic block 21
 ================== possible direct basic block ================= 
from commit_is_complete basic block 22
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e590048
    type <pointer_type 0x7fa11e57cdc8
        type <record_type 0x7fa11e578d20 object_id BLK
            size <integer_cst 0x7fa11e5687f8 constant 160>
            unit-size <integer_cst 0x7fa11e5687e0 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e578d20 fields <field_decl 0x7fa11e574130 hash> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57cdc8>>
        unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _34 = &_33->object.oid;
    version:34
    ptr-info 0x7fa11e5856d8>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_177 = VDEF <.MEM_158>
free (_84);
./benchmarks/git/leak_7/git_leak_7.c:145:5: warning: use location
  145 |     free(study.objects);    /* memory leak */
      |     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_178 = VDEF <.MEM_177>
free (_85);
./benchmarks/git/leak_7/git_leak_7.c:146:5: warning: use location
  146 |     free(found.objects);    /* memory leak */
      |     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:0 [0m
[40;31m  	possible double free [Looserules]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:commit_is_complete========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa11ec44ae0
    type <pointer_type 0x7fa11e57cbd0
        type <record_type 0x7fa11e57cb28 commit BLK
            size <integer_cst 0x7fa11ea66000 constant 512>
            unit-size <integer_cst 0x7fa11eb1d090 constant 64>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57cb28 fields <field_decl 0x7fa11e574be0 object> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57cbd0>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fa11f2f0c60 commit type <record_type 0x7fa11e57cb28 commit>
        addressable BLK ./benchmarks/git/leak_7/git_leak_7.c:152:19 size <integer_cst 0x7fa11ea66000 512> unit-size <integer_cst 0x7fa11eb1d090 64>
        align:64 warn_if_not_align:0 context <function_decl 0x7fa11e572e00 main>>
    ./benchmarks/git/leak_7/git_leak_7.c:153:5 start: ./benchmarks/git/leak_7/git_leak_7.c:153:5 finish: ./benchmarks/git/leak_7/git_leak_7.c:153:5>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
[40;44m =======node_fun:commit_is_complete========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path commit_is_complete  function_call count: 5 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:tree_is_complete========= [0m
[40;33m =======POP node_fun stack:tree_is_complete========= [0m
[40;42m =======pre add _ fucntion:add_object_array========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path add_object_array  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path add_object_array_with_path  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;33m =======POP node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a00d8
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fa11e585b10>
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘commit_is_complete’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘commit_is_complete’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a00d8
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fa11e585b10>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a0120
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fa11e585b28>
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘commit_is_complete’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘commit_is_complete’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a0120
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fa11e585b28>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a0168
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fa11e585b40>
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘commit_is_complete’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘commit_is_complete’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a0168
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fa11e585b40>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a01b0
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fa11e585b58>
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘commit_is_complete’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘commit_is_complete’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a01b0
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fa11e585b58>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa11e59e0c0
    type <pointer_type 0x7fa11e5787e0
        type <array_type 0x7fa11e578738 type <integer_type 0x7fa11e571b28 char>
            BLK
            size <integer_cst 0x7fa11ea48f18 constant 256>
            unit-size <integer_cst 0x7fa11ea66018 constant 32>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fa11e578690>
            pointer_to_this <pointer_type 0x7fa11e5787e0>>
        unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fa11ea52118 type <array_type 0x7fa11e578738>
        readonly constant static "Out of memory, realloc failed%s\000">
    ./benchmarks/git/leak_7/../git.h:422:4 start: ./benchmarks/git/leak_7/../git.h:422:4 finish: ./benchmarks/git/leak_7/../git.h:422:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre_check_funciton:add_object_array_with_path========= [0m
[40;42m =======start_check_funciton:add_object_array_with_path========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa11e598438
    type <pointer_type 0x7fa11e5781f8
        type <integer_type 0x7fa11e571b28 char public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e5781f8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>>
   
    def_stmt _7 = strdup (name_27(D));
    version:7
    ptr-info 0x7fa11e5859c0>
# .MEM_48 = VDEF <.MEM_47>
_7 = strdup (name_27(D));

 ================== trace ptable================== 
trace fucntion name:strdup 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strdup-----
this Reserved word function ------strdup-----
 
 Start check Pointer Collect  

======================================================================
_7 = strdup (name_27(D));
./benchmarks/git/leak_7/git_leak_7.c:47:31: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                               ^
this stmt is child function---strdup-----

 ================== trace ================== 
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
_6 = *name_27(D);
./benchmarks/git/leak_7/git_leak_7.c:43:19: warning: use location
   43 |         else if (!*name)
      |                   ^
if (_6 == 0)
./benchmarks/git/leak_7/git_leak_7.c:43:17: warning: use location
   43 |         else if (!*name)
      |                 ^
if (_6 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:43:17: warning: use location
Cond in fucntion add_object_array_with_path basic block 6
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 7
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 8
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
if (name_27(D) == 0B)
./benchmarks/git/leak_7/git_leak_7.c:41:12: warning: use location
   41 |         if (!name)
      |            ^
if (name_27(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:41:12: warning: use location
Cond in fucntion add_object_array_with_path basic block 4
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 5
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e598438
    type <pointer_type 0x7fa11e5781f8
        type <integer_type 0x7fa11e571b28 char public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e5781f8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>>
   
    def_stmt _7 = strdup (name_27(D));
    version:7
    ptr-info 0x7fa11e5859c0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e598480
    type <pointer_type 0x7fa11e5781f8
        type <integer_type 0x7fa11e571b28 char public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e5781f8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>>
   
    def_stmt _8 = strdup (path_34(D));
    version:8
    ptr-info 0x7fa11e5859d8>
# .MEM_54 = VDEF <.MEM_52>
_8 = strdup (path_34(D));

 ================== trace ptable================== 
trace fucntion name:strdup 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strdup-----
this Reserved word function ------strdup-----
 
 Start check Pointer Collect  

======================================================================
_8 = strdup (path_34(D));
./benchmarks/git/leak_7/git_leak_7.c:50:31: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                               ^
this stmt is child function---strdup-----

 ================== trace ================== 
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
if (path_34(D) != 0B)
./benchmarks/git/leak_7/git_leak_7.c:49:12: warning: use location
   49 |         if (path)
      |            ^
if (path_34(D) != 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:49:12: warning: use location
Cond in fucntion add_object_array_with_path basic block 9
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 10
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 11
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e598480
    type <pointer_type 0x7fa11e5781f8
        type <integer_type 0x7fa11e571b28 char public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e5781f8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>>
   
    def_stmt _8 = strdup (path_34(D));
    version:8
    ptr-info 0x7fa11e5859d8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa11e5853d8 type <integer_type 0x7fa11ea5d7e0 long unsigned int> constant 32>

dot graph START

======================================================================
 <ssa_name 0x7fa11e5985e8
    type <pointer_type 0x7fa11e57c498
        type <record_type 0x7fa11e57c3f0 object_array_entry BLK
            size <integer_cst 0x7fa11ea48f18 constant 256>
            unit-size <integer_cst 0x7fa11ea66018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c3f0 fields <field_decl 0x7fa11e574850 item> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c498>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa11e58b750 objects>
    def_stmt objects_17 = array_14(D)->objects;
    version:17
    ptr-info 0x7fa11e585a20>
# VUSE <.MEM_42(D)>
objects_17 = array_14(D)->objects;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
objects_9 = PHI <objects_17(2), objects_21(3)>
lto1: warning: use location
this stmt have mutiple branch --------
entry_24 = objects_9 + _5;
./benchmarks/git/leak_7/git_leak_7.c:39:15: warning: use location
   39 |         entry = &objects[nr];
      |               ^
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
objects_21 = xrealloc (objects_17, _3);
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: use location
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
this stmt is child function---xrealloc-----

 ================== trace ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with objects ========= [0m
[40;36m ======= relate stmt argument:objects ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_46 = VDEF <.MEM_45>
array_14(D)->objects = objects_21;
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_46 = VDEF <.MEM_45>
array_14(D)->objects = objects_21;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_46 = VDEF <.MEM_45>
array_14(D)->objects = objects_21;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
array_14(D)->objects = objects_21;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/git_leak_7.c:37:32: warning: use location
   37 |                 array->objects = objects;
      |                                ^
array_14(D)->nr = nr_38;
./benchmarks/git/leak_7/git_leak_7.c:53:19: warning: use location
   53 |         array->nr = ++nr;
      |                   ^
array_14(D)->nr = nr_38;
./benchmarks/git/leak_7/git_leak_7.c:53:19: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
array_14(D)->alloc = alloc_18;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/git_leak_7.c:36:30: warning: use location
   36 |                 array->alloc = alloc;
      |                              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
array_14(D)->alloc = alloc_18;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/git_leak_7.c:36:30: warning: use location
   36 |                 array->alloc = alloc;
      |                              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_2 = st_mult (32, alloc_18);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_2 = st_mult (32, alloc_18);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_2 = st_mult (32, alloc_18);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
_2 = st_mult (32, alloc_18);
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: use location
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = (long unsigned int) _2;
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = (long unsigned int) _2;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = (long unsigned int) _2;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
_3 = (long unsigned int) _2;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: use location
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
objects_17 = array_14(D)->objects;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
objects_17 = array_14(D)->objects;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
objects_17 = array_14(D)->objects;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
objects_17 = array_14(D)->objects;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/git_leak_7.c:30:36: warning: use location
   30 |         struct object_array_entry *objects = array->objects;
      |                                    ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
alloc_16 = array_14(D)->alloc;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
alloc_16 = array_14(D)->alloc;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
alloc_16 = array_14(D)->alloc;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
alloc_16 = array_14(D)->alloc;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/git_leak_7.c:29:18: warning: use location
   29 |         unsigned alloc = array->alloc;
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = alloc_16 + 32;
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = alloc_16 + 32;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = alloc_16 + 32;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
_1 = alloc_16 + 32;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/git_leak_7.c:34:32: warning: use location
   34 |                 alloc = (alloc + 32) * 2;
      |                                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
nr_15 = array_14(D)->nr;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
nr_15 = array_14(D)->nr;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
nr_15 = array_14(D)->nr;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
nr_15 = array_14(D)->nr;
In function ‘commit_is_complete’:
./benchmarks/git/leak_7/git_leak_7.c:28:18: warning: use location
   28 |         unsigned nr = array->nr;
      |                  ^
_4 = (long unsigned int) nr_15;
./benchmarks/git/leak_7/git_leak_7.c:39:25: warning: use location
   39 |         entry = &objects[nr];
      |                         ^
_5 = _4 * 32;
./benchmarks/git/leak_7/git_leak_7.c:39:25: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5985e8
    type <pointer_type 0x7fa11e57c498
        type <record_type 0x7fa11e57c3f0 object_array_entry BLK
            size <integer_cst 0x7fa11ea48f18 constant 256>
            unit-size <integer_cst 0x7fa11ea66018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c3f0 fields <field_decl 0x7fa11e574850 item> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c498>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa11e58b750 objects>
    def_stmt objects_17 = array_14(D)->objects;
    version:17
    ptr-info 0x7fa11e585a20>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
objects_9 = PHI <objects_17(2), objects_21(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
entry_24 = objects_9 + _5;
./benchmarks/git/leak_7/git_leak_7.c:39:15: warning: use location
   39 |         entry = &objects[nr];
      |               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_55 = VDEF <.MEM_54>
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_53 = VDEF <.MEM_52>
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_52 = VDEF <.MEM_40>
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_52 = VDEF <.MEM_40>
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_49 = VDEF <.MEM_48>
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_49 = VDEF <.MEM_48>
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_50 = VDEF <.MEM_47>
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_51 = VDEF <.MEM_47>
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_47 = VDEF <.MEM_39>
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_47 = VDEF <.MEM_39>
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_46 = VDEF <.MEM_45>
array_14(D)->objects = objects_21;
./benchmarks/git/leak_7/git_leak_7.c:37:32: warning: use location
   37 |                 array->objects = objects;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_56 = VDEF <.MEM_41>
array_14(D)->nr = nr_38;
./benchmarks/git/leak_7/git_leak_7.c:53:19: warning: use location
   53 |         array->nr = ++nr;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_56 = VDEF <.MEM_41>
array_14(D)->nr = nr_38;
./benchmarks/git/leak_7/git_leak_7.c:53:19: warning: use location
   53 |         array->nr = ++nr;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
./benchmarks/git/leak_7/git_leak_7.c:36:30: warning: use location
   36 |                 array->alloc = alloc;
      |                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
./benchmarks/git/leak_7/git_leak_7.c:36:30: warning: use location
   36 |                 array->alloc = alloc;
      |                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
_4 = (long unsigned int) nr_15;
./benchmarks/git/leak_7/git_leak_7.c:39:25: warning: use location
   39 |         entry = &objects[nr];
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
_5 = _4 * 32;
./benchmarks/git/leak_7/git_leak_7.c:39:25: warning: use location
   39 |         entry = &objects[nr];
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e598750
    type <pointer_type 0x7fa11e571c78
        type <integer_type 0x7fa11e571bd0 char readonly public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e571c78>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e380 name>
    def_stmt GIMPLE_NOP
    version:27
    ptr-info 0x7fa11e585a80>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_7 = strdup (name_27(D));
./benchmarks/git/leak_7/git_leak_7.c:47:31: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                               ^
this stmt is child function---strdup-----

 ================== trace ================== 
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
_6 = *name_27(D);
./benchmarks/git/leak_7/git_leak_7.c:43:19: warning: use location
   43 |         else if (!*name)
      |                   ^
if (_6 == 0)
./benchmarks/git/leak_7/git_leak_7.c:43:17: warning: use location
   43 |         else if (!*name)
      |                 ^
if (_6 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:43:17: warning: use location
Cond in fucntion add_object_array_with_path basic block 6
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 7
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 8
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
if (name_27(D) == 0B)
./benchmarks/git/leak_7/git_leak_7.c:41:12: warning: use location
   41 |         if (!name)
      |            ^
if (name_27(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:41:12: warning: use location
Cond in fucntion add_object_array_with_path basic block 4
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 5
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e598750
    type <pointer_type 0x7fa11e571c78
        type <integer_type 0x7fa11e571bd0 char readonly public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e571c78>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e380 name>
    def_stmt GIMPLE_NOP
    version:27
    ptr-info 0x7fa11e585a80>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5987e0
    type <pointer_type 0x7fa11e571c78
        type <integer_type 0x7fa11e571bd0 char readonly public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e571c78>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e500 path>
    def_stmt GIMPLE_NOP
    version:34
    ptr-info 0x7fa11e585a98>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_8 = strdup (path_34(D));
./benchmarks/git/leak_7/git_leak_7.c:50:31: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                               ^
this stmt is child function---strdup-----

 ================== trace ================== 
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
if (path_34(D) != 0B)
./benchmarks/git/leak_7/git_leak_7.c:49:12: warning: use location
   49 |         if (path)
      |            ^
if (path_34(D) != 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:49:12: warning: use location
Cond in fucntion add_object_array_with_path basic block 9
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 10
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 11
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5987e0
    type <pointer_type 0x7fa11e571c78
        type <integer_type 0x7fa11e571bd0 char readonly public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e571c78>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e500 path>
    def_stmt GIMPLE_NOP
    version:34
    ptr-info 0x7fa11e585a98>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:add_object_array_with_path========= [0m
[40;42m =======pre_check_funciton:add_object_array========= [0m
[40;42m =======start_check_funciton:add_object_array========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa11e598120
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e180 obj>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fa11e585978>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
add_object_array_with_path (obj_2(D), name_3(D), array_4(D), 12288, 0B);
add_object_array_with_path (obj_2(D), name_3(D), array_4(D), 12288, 0B);
./benchmarks/git/leak_7/git_leak_7.c:58:9: warning: use location
   58 |         add_object_array_with_path(obj, name, array, S_IFINVALID, NULL);
      |         ^
this stmt is child function---add_object_array_with_path-----

 ================== trace ================== 
trace fucntion name:add_object_array_with_path 
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with obj ========= [0m
[40;36m ======= relate stmt argument:obj ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with obj ========= [0m
[40;36m ======= relate stmt argument:obj ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:4 
# .MEM_6 = VDEF <.MEM_5(D)>
add_object_array_with_path (obj_2(D), name_3(D), array_4(D), 12288, 0B);
add_object_array_with_path (obj_2(D), name_3(D), array_4(D), 12288, 0B);
./benchmarks/git/leak_7/git_leak_7.c:58:9: warning: use location
   58 |         add_object_array_with_path(obj, name, array, S_IFINVALID, NULL);
      |         ^
this stmt is child function---add_object_array_with_path-----

 ================== trace ================== 
trace fucntion name:add_object_array_with_path 
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with obj ========= [0m
[40;36m ======= relate stmt argument:obj ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with obj ========= [0m
[40;36m ======= relate stmt argument:obj ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e598120
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e180 obj>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fa11e585978>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================
[40;33m =======POP node_fun stack:add_object_array========= [0m
[40;42m =======pre add _ fucntion:parse_object========= [0m
[40;33m =======POP node_fun stack:parse_object========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;33m =======POP node_fun stack:memset========= [0m
[40;42m =======pre_check_funciton:commit_is_complete========= [0m
[40;42m =======start_check_funciton:commit_is_complete========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa11ec44c20
    type <pointer_type 0x7fa11e57c348
        type <record_type 0x7fa11e57c2a0 object_array TI
            size <integer_cst 0x7fa11ea48c00 constant 128>
            unit-size <integer_cst 0x7fa11ea48c18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c2a0 fields <field_decl 0x7fa11e5745f0 nr> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c348>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fa11e58b090 study type <record_type 0x7fa11e57c2a0 object_array>
        addressable TI ./benchmarks/git/leak_7/git_leak_7.c:63:22 size <integer_cst 0x7fa11ea48c00 128> unit-size <integer_cst 0x7fa11ea48c18 16>
        align:64 warn_if_not_align:0 context <function_decl 0x7fa11e572d00 commit_is_complete>
        chain <var_decl 0x7fa11e58b000 found type <record_type 0x7fa11e57c2a0 object_array>
            addressable TI ./benchmarks/git/leak_7/git_leak_7.c:64:22 size <integer_cst 0x7fa11ea48c00 128> unit-size <integer_cst 0x7fa11ea48c18 16>
            align:64 warn_if_not_align:0 context <function_decl 0x7fa11e572d00 commit_is_complete> chain <var_decl 0x7fa11f2f0f30 is_incomplete>>>
    ./benchmarks/git/leak_7/git_leak_7.c:80:9 start: ./benchmarks/git/leak_7/git_leak_7.c:80:9 finish: ./benchmarks/git/leak_7/git_leak_7.c:80:9>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa11ec44c60
    type <pointer_type 0x7fa11e57c348
        type <record_type 0x7fa11e57c2a0 object_array TI
            size <integer_cst 0x7fa11ea48c00 constant 128>
            unit-size <integer_cst 0x7fa11ea48c18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c2a0 fields <field_decl 0x7fa11e5745f0 nr> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c348>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7fa11e58b000 found type <record_type 0x7fa11e57c2a0 object_array>
        addressable TI ./benchmarks/git/leak_7/git_leak_7.c:64:22 size <integer_cst 0x7fa11ea48c00 128> unit-size <integer_cst 0x7fa11ea48c18 16>
        align:64 warn_if_not_align:0 context <function_decl 0x7fa11e572d00 commit_is_complete>
        chain <var_decl 0x7fa11f2f0f30 is_incomplete type <integer_type 0x7fa11ea5d5e8 int>
            SI ./benchmarks/git/leak_7/git_leak_7.c:65:6
            size <integer_cst 0x7fa11ea48df8 constant 32>
            unit-size <integer_cst 0x7fa11ea48e10 constant 4>
            align:32 warn_if_not_align:0 context <function_decl 0x7fa11e572d00 commit_is_complete> chain <var_decl 0x7fa11f2f0ea0 i>>>
    ./benchmarks/git/leak_7/git_leak_7.c:81:9 start: ./benchmarks/git/leak_7/git_leak_7.c:81:9 finish: ./benchmarks/git/leak_7/git_leak_7.c:81:9>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11ea50798
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _4 = &commit_112(D)->object;
    version:4
    ptr-info 0x7fa11e5855e8>
_4 = &commit_112(D)->object;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_163 = VDEF <.MEM_162>
add_object_array (_4, 0B, &study);
bb index := 4
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 35

======================================================================
# .MEM_163 = VDEF <.MEM_162>
add_object_array (_4, 0B, &study);
add_object_array (_4, 0B, &study);
./benchmarks/git/leak_7/git_leak_7.c:82:9: warning: use location
   82 |         add_object_array(&commit->object, NULL, &study);
      |         ^
this stmt is child function---add_object_array-----

 ================== trace ================== 
trace fucntion name:add_object_array 
[40;44m =======trace_function_path add_object_array  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:add_object_array========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;46m =======add node_fun stack:add_object_array_with_path========= [0m
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_163 = VDEF <.MEM_162>
add_object_array (_4, 0B, &study);
bb index := 4
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 35

======================================================================
# .MEM_163 = VDEF <.MEM_162>
add_object_array (_4, 0B, &study);
add_object_array (_4, 0B, &study);
./benchmarks/git/leak_7/git_leak_7.c:82:9: warning: use location
   82 |         add_object_array(&commit->object, NULL, &study);
      |         ^
this stmt is child function---add_object_array-----

 ================== trace ================== 
trace fucntion name:add_object_array 
[40;44m =======trace_function_path add_object_array  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:add_object_array========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;46m =======add node_fun stack:add_object_array_with_path========= [0m
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11ea50798
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _4 = &commit_112(D)->object;
    version:4
    ptr-info 0x7fa11e5855e8>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_177 = VDEF <.MEM_158>
free (_84);
./benchmarks/git/leak_7/git_leak_7.c:145:5: warning: use location
  145 |     free(study.objects);    /* memory leak */
      |     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_178 = VDEF <.MEM_177>
free (_85);
./benchmarks/git/leak_7/git_leak_7.c:146:5: warning: use location
  146 |     free(found.objects);    /* memory leak */
      |     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [Looserules]:2 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11ea507e0
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = &commit_112(D)->object;
    version:5
    ptr-info 0x7fa11e585600>
_5 = &commit_112(D)->object;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_164 = VDEF <.MEM_163>
add_object_array (_5, 0B, &found);
bb index := 4
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 35

======================================================================
# .MEM_164 = VDEF <.MEM_163>
add_object_array (_5, 0B, &found);
add_object_array (_5, 0B, &found);
./benchmarks/git/leak_7/git_leak_7.c:83:9: warning: use location
   83 |         add_object_array(&commit->object, NULL, &found);
      |         ^
this stmt is child function---add_object_array-----

 ================== trace ================== 
trace fucntion name:add_object_array 
[40;44m =======trace_function_path add_object_array  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:add_object_array========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;46m =======add node_fun stack:add_object_array_with_path========= [0m
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_164 = VDEF <.MEM_163>
add_object_array (_5, 0B, &found);
bb index := 4
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 35

======================================================================
# .MEM_164 = VDEF <.MEM_163>
add_object_array (_5, 0B, &found);
add_object_array (_5, 0B, &found);
./benchmarks/git/leak_7/git_leak_7.c:83:9: warning: use location
   83 |         add_object_array(&commit->object, NULL, &found);
      |         ^
this stmt is child function---add_object_array-----

 ================== trace ================== 
trace fucntion name:add_object_array 
[40;44m =======trace_function_path add_object_array  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:add_object_array========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;46m =======add node_fun stack:add_object_array_with_path========= [0m
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11ea507e0
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = &commit_112(D)->object;
    version:5
    ptr-info 0x7fa11e585600>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_177 = VDEF <.MEM_158>
free (_84);
./benchmarks/git/leak_7/git_leak_7.c:145:5: warning: use location
  145 |     free(study.objects);    /* memory leak */
      |     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_178 = VDEF <.MEM_177>
free (_85);
./benchmarks/git/leak_7/git_leak_7.c:146:5: warning: use location
  146 |     free(found.objects);    /* memory leak */
      |     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [Looserules]:2 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11ea50b40
    type <pointer_type 0x7fa11e57cdc8
        type <record_type 0x7fa11e578d20 object_id BLK
            size <integer_cst 0x7fa11e5687f8 constant 160>
            unit-size <integer_cst 0x7fa11e5687e0 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e578d20 fields <field_decl 0x7fa11e574130 hash> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57cdc8>>
        unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _17 = &c_119->object.oid;
    version:17
    ptr-info 0x7fa11e585648>
_17 = &c_119->object.oid;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_18 = parse_object (_17);
./benchmarks/git/leak_7/git_leak_7.c:90:43: warning: use location
   90 |                 if (!c->object.parsed && !parse_object(&c->object.oid))
      |                                           ^
this stmt is child function---parse_object-----

 ================== trace ================== 
trace fucntion name:parse_object 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_18 == 0)
./benchmarks/git/leak_7/git_leak_7.c:90:39: warning: use location
   90 |                 if (!c->object.parsed && !parse_object(&c->object.oid))
      |                                       ^
if (_18 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:90:39: warning: use location
Cond in fucntion commit_is_complete basic block 6
 ================== possible direct basic block ================= 
from commit_is_complete basic block 7
 ================== possible direct basic block ================= 
from commit_is_complete basic block 8
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11ea50b40
    type <pointer_type 0x7fa11e57cdc8
        type <record_type 0x7fa11e578d20 object_id BLK
            size <integer_cst 0x7fa11e5687f8 constant 160>
            unit-size <integer_cst 0x7fa11e5687e0 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e578d20 fields <field_decl 0x7fa11e574130 hash> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57cdc8>>
        unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _17 = &c_119->object.oid;
    version:17
    ptr-info 0x7fa11e585648>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_177 = VDEF <.MEM_158>
free (_84);
./benchmarks/git/leak_7/git_leak_7.c:145:5: warning: use location
  145 |     free(study.objects);    /* memory leak */
      |     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_178 = VDEF <.MEM_177>
free (_85);
./benchmarks/git/leak_7/git_leak_7.c:146:5: warning: use location
  146 |     free(found.objects);    /* memory leak */
      |     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:0 [0m
[40;31m  	possible double free [Looserules]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11ea50dc8
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _26 = &p_123->object;
    version:26
    ptr-info 0x7fa11e585660>
_26 = &p_123->object;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_170 = VDEF <.MEM_169>
add_object_array (_26, 0B, &study);
add_object_array (_26, 0B, &study);
./benchmarks/git/leak_7/git_leak_7.c:104:25: warning: use location
  104 |                         add_object_array(&p->object, NULL, &study);
      |                         ^
this stmt is child function---add_object_array-----

 ================== trace ================== 
trace fucntion name:add_object_array 
[40;44m =======trace_function_path add_object_array  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:add_object_array========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;46m =======add node_fun stack:add_object_array_with_path========= [0m
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_170 = VDEF <.MEM_169>
add_object_array (_26, 0B, &study);
add_object_array (_26, 0B, &study);
./benchmarks/git/leak_7/git_leak_7.c:104:25: warning: use location
  104 |                         add_object_array(&p->object, NULL, &study);
      |                         ^
this stmt is child function---add_object_array-----

 ================== trace ================== 
trace fucntion name:add_object_array 
[40;44m =======trace_function_path add_object_array  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:add_object_array========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;46m =======add node_fun stack:add_object_array_with_path========= [0m
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11ea50dc8
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _26 = &p_123->object;
    version:26
    ptr-info 0x7fa11e585660>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_177 = VDEF <.MEM_158>
free (_84);
./benchmarks/git/leak_7/git_leak_7.c:145:5: warning: use location
  145 |     free(study.objects);    /* memory leak */
      |     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_178 = VDEF <.MEM_177>
free (_85);
./benchmarks/git/leak_7/git_leak_7.c:146:5: warning: use location
  146 |     free(found.objects);    /* memory leak */
      |     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [Looserules]:2 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11ea50e10
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _27 = &p_123->object;
    version:27
    ptr-info 0x7fa11e585678>
_27 = &p_123->object;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_171 = VDEF <.MEM_170>
add_object_array (_27, 0B, &found);
add_object_array (_27, 0B, &found);
./benchmarks/git/leak_7/git_leak_7.c:105:25: warning: use location
  105 |                         add_object_array(&p->object, NULL, &found);
      |                         ^
this stmt is child function---add_object_array-----

 ================== trace ================== 
trace fucntion name:add_object_array 
[40;44m =======trace_function_path add_object_array  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:add_object_array========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;46m =======add node_fun stack:add_object_array_with_path========= [0m
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_171 = VDEF <.MEM_170>
add_object_array (_27, 0B, &found);
add_object_array (_27, 0B, &found);
./benchmarks/git/leak_7/git_leak_7.c:105:25: warning: use location
  105 |                         add_object_array(&p->object, NULL, &found);
      |                         ^
this stmt is child function---add_object_array-----

 ================== trace ================== 
trace fucntion name:add_object_array 
[40;44m =======trace_function_path add_object_array  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:add_object_array========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;46m =======add node_fun stack:add_object_array_with_path========= [0m
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11ea50e10
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _27 = &p_123->object;
    version:27
    ptr-info 0x7fa11e585678>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_177 = VDEF <.MEM_158>
free (_84);
./benchmarks/git/leak_7/git_leak_7.c:145:5: warning: use location
  145 |     free(study.objects);    /* memory leak */
      |     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_178 = VDEF <.MEM_177>
free (_85);
./benchmarks/git/leak_7/git_leak_7.c:146:5: warning: use location
  146 |     free(found.objects);    /* memory leak */
      |     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [Looserules]:2 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e590048
    type <pointer_type 0x7fa11e57cdc8
        type <record_type 0x7fa11e578d20 object_id BLK
            size <integer_cst 0x7fa11e5687f8 constant 160>
            unit-size <integer_cst 0x7fa11e5687e0 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e578d20 fields <field_decl 0x7fa11e574130 hash> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57cdc8>>
        unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _34 = &_33->object.oid;
    version:34
    ptr-info 0x7fa11e5856d8>
_34 = &_33->object.oid;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_35 = tree_is_complete (_34);
./benchmarks/git/leak_7/git_leak_7.c:116:30: warning: use location
  116 |                         if (!tree_is_complete(&c->tree->object.oid)) {
      |                              ^
this stmt is child function---tree_is_complete-----

 ================== trace ================== 
trace fucntion name:tree_is_complete 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_35 == 0)
./benchmarks/git/leak_7/git_leak_7.c:116:28: warning: use location
  116 |                         if (!tree_is_complete(&c->tree->object.oid)) {
      |                            ^
if (_35 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:116:28: warning: use location
Cond in fucntion commit_is_complete basic block 20
 ================== possible direct basic block ================= 
from commit_is_complete basic block 21
 ================== possible direct basic block ================= 
from commit_is_complete basic block 22
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e590048
    type <pointer_type 0x7fa11e57cdc8
        type <record_type 0x7fa11e578d20 object_id BLK
            size <integer_cst 0x7fa11e5687f8 constant 160>
            unit-size <integer_cst 0x7fa11e5687e0 constant 20>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e578d20 fields <field_decl 0x7fa11e574130 hash> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57cdc8>>
        unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _34 = &_33->object.oid;
    version:34
    ptr-info 0x7fa11e5856d8>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_177 = VDEF <.MEM_158>
free (_84);
./benchmarks/git/leak_7/git_leak_7.c:145:5: warning: use location
  145 |     free(study.objects);    /* memory leak */
      |     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_178 = VDEF <.MEM_177>
free (_85);
./benchmarks/git/leak_7/git_leak_7.c:146:5: warning: use location
  146 |     free(found.objects);    /* memory leak */
      |     ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:0 [0m
[40;31m  	possible double free [Looserules]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:commit_is_complete========= [0m
[40;44m =======node_fun:add_object_array========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path add_object_array  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:add_object_array_with_path========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path add_object_array_with_path  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;33m =======POP node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a00d8
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fa11e585b10>
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘add_object_array’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘add_object_array’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a00d8
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fa11e585b10>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a0120
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fa11e585b28>
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘add_object_array’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘add_object_array’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a0120
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fa11e585b28>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a0168
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fa11e585b40>
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘add_object_array’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘add_object_array’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a0168
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fa11e585b40>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a01b0
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fa11e585b58>
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘add_object_array’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘add_object_array’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘add_object_array’:
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a01b0
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fa11e585b58>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa11e59e0c0
    type <pointer_type 0x7fa11e5787e0
        type <array_type 0x7fa11e578738 type <integer_type 0x7fa11e571b28 char>
            BLK
            size <integer_cst 0x7fa11ea48f18 constant 256>
            unit-size <integer_cst 0x7fa11ea66018 constant 32>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fa11e578690>
            pointer_to_this <pointer_type 0x7fa11e5787e0>>
        unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fa11ea52118 type <array_type 0x7fa11e578738>
        readonly constant static "Out of memory, realloc failed%s\000">
    ./benchmarks/git/leak_7/../git.h:422:4 start: ./benchmarks/git/leak_7/../git.h:422:4 finish: ./benchmarks/git/leak_7/../git.h:422:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre_check_funciton:add_object_array_with_path========= [0m
[40;42m =======start_check_funciton:add_object_array_with_path========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa11e598438
    type <pointer_type 0x7fa11e5781f8
        type <integer_type 0x7fa11e571b28 char public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e5781f8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>>
   
    def_stmt _7 = strdup (name_27(D));
    version:7
    ptr-info 0x7fa11e5859c0>
# .MEM_48 = VDEF <.MEM_47>
_7 = strdup (name_27(D));

 ================== trace ptable================== 
trace fucntion name:strdup 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strdup-----
this Reserved word function ------strdup-----
 
 Start check Pointer Collect  

======================================================================
_7 = strdup (name_27(D));
./benchmarks/git/leak_7/git_leak_7.c:47:31: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                               ^
this stmt is child function---strdup-----

 ================== trace ================== 
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
_6 = *name_27(D);
./benchmarks/git/leak_7/git_leak_7.c:43:19: warning: use location
   43 |         else if (!*name)
      |                   ^
if (_6 == 0)
./benchmarks/git/leak_7/git_leak_7.c:43:17: warning: use location
   43 |         else if (!*name)
      |                 ^
if (_6 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:43:17: warning: use location
Cond in fucntion add_object_array_with_path basic block 6
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 7
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 8
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
if (name_27(D) == 0B)
./benchmarks/git/leak_7/git_leak_7.c:41:12: warning: use location
   41 |         if (!name)
      |            ^
if (name_27(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:41:12: warning: use location
Cond in fucntion add_object_array_with_path basic block 4
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 5
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e598438
    type <pointer_type 0x7fa11e5781f8
        type <integer_type 0x7fa11e571b28 char public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e5781f8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>>
   
    def_stmt _7 = strdup (name_27(D));
    version:7
    ptr-info 0x7fa11e5859c0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e598480
    type <pointer_type 0x7fa11e5781f8
        type <integer_type 0x7fa11e571b28 char public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e5781f8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>>
   
    def_stmt _8 = strdup (path_34(D));
    version:8
    ptr-info 0x7fa11e5859d8>
# .MEM_54 = VDEF <.MEM_52>
_8 = strdup (path_34(D));

 ================== trace ptable================== 
trace fucntion name:strdup 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strdup-----
this Reserved word function ------strdup-----
 
 Start check Pointer Collect  

======================================================================
_8 = strdup (path_34(D));
./benchmarks/git/leak_7/git_leak_7.c:50:31: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                               ^
this stmt is child function---strdup-----

 ================== trace ================== 
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
if (path_34(D) != 0B)
./benchmarks/git/leak_7/git_leak_7.c:49:12: warning: use location
   49 |         if (path)
      |            ^
if (path_34(D) != 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:49:12: warning: use location
Cond in fucntion add_object_array_with_path basic block 9
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 10
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 11
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e598480
    type <pointer_type 0x7fa11e5781f8
        type <integer_type 0x7fa11e571b28 char public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e5781f8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>>
   
    def_stmt _8 = strdup (path_34(D));
    version:8
    ptr-info 0x7fa11e5859d8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa11e5853d8 type <integer_type 0x7fa11ea5d7e0 long unsigned int> constant 32>

dot graph START

======================================================================
 <ssa_name 0x7fa11e5985e8
    type <pointer_type 0x7fa11e57c498
        type <record_type 0x7fa11e57c3f0 object_array_entry BLK
            size <integer_cst 0x7fa11ea48f18 constant 256>
            unit-size <integer_cst 0x7fa11ea66018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c3f0 fields <field_decl 0x7fa11e574850 item> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c498>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa11e58b750 objects>
    def_stmt objects_17 = array_14(D)->objects;
    version:17
    ptr-info 0x7fa11e585a20>
# VUSE <.MEM_42(D)>
objects_17 = array_14(D)->objects;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
objects_9 = PHI <objects_17(2), objects_21(3)>
lto1: warning: use location
this stmt have mutiple branch --------
entry_24 = objects_9 + _5;
./benchmarks/git/leak_7/git_leak_7.c:39:15: warning: use location
   39 |         entry = &objects[nr];
      |               ^
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
objects_21 = xrealloc (objects_17, _3);
In function ‘add_object_array’:
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: use location
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
this stmt is child function---xrealloc-----

 ================== trace ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with objects ========= [0m
[40;36m ======= relate stmt argument:objects ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_46 = VDEF <.MEM_45>
array_14(D)->objects = objects_21;
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_46 = VDEF <.MEM_45>
array_14(D)->objects = objects_21;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_46 = VDEF <.MEM_45>
array_14(D)->objects = objects_21;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
array_14(D)->objects = objects_21;
In function ‘add_object_array’:
./benchmarks/git/leak_7/git_leak_7.c:37:32: warning: use location
   37 |                 array->objects = objects;
      |                                ^
array_14(D)->nr = nr_38;
./benchmarks/git/leak_7/git_leak_7.c:53:19: warning: use location
   53 |         array->nr = ++nr;
      |                   ^
array_14(D)->nr = nr_38;
./benchmarks/git/leak_7/git_leak_7.c:53:19: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
array_14(D)->alloc = alloc_18;
In function ‘add_object_array’:
./benchmarks/git/leak_7/git_leak_7.c:36:30: warning: use location
   36 |                 array->alloc = alloc;
      |                              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
array_14(D)->alloc = alloc_18;
In function ‘add_object_array’:
./benchmarks/git/leak_7/git_leak_7.c:36:30: warning: use location
   36 |                 array->alloc = alloc;
      |                              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_2 = st_mult (32, alloc_18);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_2 = st_mult (32, alloc_18);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_2 = st_mult (32, alloc_18);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
_2 = st_mult (32, alloc_18);
In function ‘add_object_array’:
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: use location
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = (long unsigned int) _2;
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = (long unsigned int) _2;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = (long unsigned int) _2;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
_3 = (long unsigned int) _2;
In function ‘add_object_array’:
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: use location
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
objects_17 = array_14(D)->objects;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
objects_17 = array_14(D)->objects;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
objects_17 = array_14(D)->objects;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
objects_17 = array_14(D)->objects;
In function ‘add_object_array’:
./benchmarks/git/leak_7/git_leak_7.c:30:36: warning: use location
   30 |         struct object_array_entry *objects = array->objects;
      |                                    ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
alloc_16 = array_14(D)->alloc;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
alloc_16 = array_14(D)->alloc;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
alloc_16 = array_14(D)->alloc;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
alloc_16 = array_14(D)->alloc;
In function ‘add_object_array’:
./benchmarks/git/leak_7/git_leak_7.c:29:18: warning: use location
   29 |         unsigned alloc = array->alloc;
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = alloc_16 + 32;
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = alloc_16 + 32;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = alloc_16 + 32;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
_1 = alloc_16 + 32;
In function ‘add_object_array’:
./benchmarks/git/leak_7/git_leak_7.c:34:32: warning: use location
   34 |                 alloc = (alloc + 32) * 2;
      |                                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
nr_15 = array_14(D)->nr;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘add_object_array_with_path’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
nr_15 = array_14(D)->nr;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
nr_15 = array_14(D)->nr;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
nr_15 = array_14(D)->nr;
In function ‘add_object_array’:
./benchmarks/git/leak_7/git_leak_7.c:28:18: warning: use location
   28 |         unsigned nr = array->nr;
      |                  ^
_4 = (long unsigned int) nr_15;
./benchmarks/git/leak_7/git_leak_7.c:39:25: warning: use location
   39 |         entry = &objects[nr];
      |                         ^
_5 = _4 * 32;
./benchmarks/git/leak_7/git_leak_7.c:39:25: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5985e8
    type <pointer_type 0x7fa11e57c498
        type <record_type 0x7fa11e57c3f0 object_array_entry BLK
            size <integer_cst 0x7fa11ea48f18 constant 256>
            unit-size <integer_cst 0x7fa11ea66018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c3f0 fields <field_decl 0x7fa11e574850 item> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c498>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa11e58b750 objects>
    def_stmt objects_17 = array_14(D)->objects;
    version:17
    ptr-info 0x7fa11e585a20>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
objects_9 = PHI <objects_17(2), objects_21(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
entry_24 = objects_9 + _5;
./benchmarks/git/leak_7/git_leak_7.c:39:15: warning: use location
   39 |         entry = &objects[nr];
      |               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_55 = VDEF <.MEM_54>
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_53 = VDEF <.MEM_52>
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_52 = VDEF <.MEM_40>
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_52 = VDEF <.MEM_40>
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_49 = VDEF <.MEM_48>
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_49 = VDEF <.MEM_48>
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_50 = VDEF <.MEM_47>
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_51 = VDEF <.MEM_47>
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_47 = VDEF <.MEM_39>
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_47 = VDEF <.MEM_39>
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_46 = VDEF <.MEM_45>
array_14(D)->objects = objects_21;
./benchmarks/git/leak_7/git_leak_7.c:37:32: warning: use location
   37 |                 array->objects = objects;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_56 = VDEF <.MEM_41>
array_14(D)->nr = nr_38;
./benchmarks/git/leak_7/git_leak_7.c:53:19: warning: use location
   53 |         array->nr = ++nr;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_56 = VDEF <.MEM_41>
array_14(D)->nr = nr_38;
./benchmarks/git/leak_7/git_leak_7.c:53:19: warning: use location
   53 |         array->nr = ++nr;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
./benchmarks/git/leak_7/git_leak_7.c:36:30: warning: use location
   36 |                 array->alloc = alloc;
      |                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
./benchmarks/git/leak_7/git_leak_7.c:36:30: warning: use location
   36 |                 array->alloc = alloc;
      |                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
_4 = (long unsigned int) nr_15;
./benchmarks/git/leak_7/git_leak_7.c:39:25: warning: use location
   39 |         entry = &objects[nr];
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
_5 = _4 * 32;
./benchmarks/git/leak_7/git_leak_7.c:39:25: warning: use location
   39 |         entry = &objects[nr];
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e598750
    type <pointer_type 0x7fa11e571c78
        type <integer_type 0x7fa11e571bd0 char readonly public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e571c78>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e380 name>
    def_stmt GIMPLE_NOP
    version:27
    ptr-info 0x7fa11e585a80>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_7 = strdup (name_27(D));
./benchmarks/git/leak_7/git_leak_7.c:47:31: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                               ^
this stmt is child function---strdup-----

 ================== trace ================== 
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
_6 = *name_27(D);
./benchmarks/git/leak_7/git_leak_7.c:43:19: warning: use location
   43 |         else if (!*name)
      |                   ^
if (_6 == 0)
./benchmarks/git/leak_7/git_leak_7.c:43:17: warning: use location
   43 |         else if (!*name)
      |                 ^
if (_6 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:43:17: warning: use location
Cond in fucntion add_object_array_with_path basic block 6
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 7
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 8
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
if (name_27(D) == 0B)
./benchmarks/git/leak_7/git_leak_7.c:41:12: warning: use location
   41 |         if (!name)
      |            ^
if (name_27(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:41:12: warning: use location
Cond in fucntion add_object_array_with_path basic block 4
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 5
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e598750
    type <pointer_type 0x7fa11e571c78
        type <integer_type 0x7fa11e571bd0 char readonly public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e571c78>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e380 name>
    def_stmt GIMPLE_NOP
    version:27
    ptr-info 0x7fa11e585a80>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5987e0
    type <pointer_type 0x7fa11e571c78
        type <integer_type 0x7fa11e571bd0 char readonly public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e571c78>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e500 path>
    def_stmt GIMPLE_NOP
    version:34
    ptr-info 0x7fa11e585a98>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_8 = strdup (path_34(D));
./benchmarks/git/leak_7/git_leak_7.c:50:31: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                               ^
this stmt is child function---strdup-----

 ================== trace ================== 
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
if (path_34(D) != 0B)
./benchmarks/git/leak_7/git_leak_7.c:49:12: warning: use location
   49 |         if (path)
      |            ^
if (path_34(D) != 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:49:12: warning: use location
Cond in fucntion add_object_array_with_path basic block 9
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 10
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 11
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5987e0
    type <pointer_type 0x7fa11e571c78
        type <integer_type 0x7fa11e571bd0 char readonly public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e571c78>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e500 path>
    def_stmt GIMPLE_NOP
    version:34
    ptr-info 0x7fa11e585a98>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:add_object_array_with_path========= [0m
[40;42m =======pre_check_funciton:add_object_array========= [0m
[40;42m =======start_check_funciton:add_object_array========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa11e598120
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e180 obj>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fa11e585978>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_6 = VDEF <.MEM_5(D)>
add_object_array_with_path (obj_2(D), name_3(D), array_4(D), 12288, 0B);
add_object_array_with_path (obj_2(D), name_3(D), array_4(D), 12288, 0B);
./benchmarks/git/leak_7/git_leak_7.c:58:9: warning: use location
   58 |         add_object_array_with_path(obj, name, array, S_IFINVALID, NULL);
      |         ^
this stmt is child function---add_object_array_with_path-----

 ================== trace ================== 
trace fucntion name:add_object_array_with_path 
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with obj ========= [0m
[40;36m ======= relate stmt argument:obj ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with obj ========= [0m
[40;36m ======= relate stmt argument:obj ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:4 
# .MEM_6 = VDEF <.MEM_5(D)>
add_object_array_with_path (obj_2(D), name_3(D), array_4(D), 12288, 0B);
add_object_array_with_path (obj_2(D), name_3(D), array_4(D), 12288, 0B);
./benchmarks/git/leak_7/git_leak_7.c:58:9: warning: use location
   58 |         add_object_array_with_path(obj, name, array, S_IFINVALID, NULL);
      |         ^
this stmt is child function---add_object_array_with_path-----

 ================== trace ================== 
trace fucntion name:add_object_array_with_path 
[40;44m =======trace_function_path add_object_array_with_path  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:add_object_array_with_path========= [0m
[40;36m ======= find relate stmt with obj ========= [0m
[40;36m ======= relate stmt argument:obj ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with obj ========= [0m
[40;36m ======= relate stmt argument:obj ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;46m =======add node_fun stack:st_mult========= [0m

 ================== trace ================== 
trace fucntion free:8 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e598120
    type <pointer_type 0x7fa11e57c0a8
        type <record_type 0x7fa11e57c000 object BLK
            size <integer_cst 0x7fa11ea66078 constant 192>
            unit-size <integer_cst 0x7fa11ea66048 constant 24>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c000 fields <field_decl 0x7fa11e574428 parsed> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c0a8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e180 obj>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fa11e585978>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:8 [0m
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:8 [0m

======================================================================
[40;33m =======POP node_fun stack:add_object_array========= [0m
[40;44m =======node_fun:add_object_array_with_path========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path add_object_array_with_path  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;33m =======POP node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a00d8
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fa11e585b10>
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘add_object_array_with_path’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘add_object_array_with_path’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a00d8
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fa11e585b10>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a0120
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fa11e585b28>
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘add_object_array_with_path’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘add_object_array_with_path’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a0120
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fa11e585b28>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a0168
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fa11e585b40>
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘add_object_array_with_path’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘add_object_array_with_path’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a0168
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fa11e585b40>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a01b0
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fa11e585b58>
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
In function ‘add_object_array_with_path’:
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
In function ‘add_object_array_with_path’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_181>
return _96;
In function ‘xrealloc’:
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
In function ‘add_object_array_with_path’:
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a01b0
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fa11e585b58>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa11e59e0c0
    type <pointer_type 0x7fa11e5787e0
        type <array_type 0x7fa11e578738 type <integer_type 0x7fa11e571b28 char>
            BLK
            size <integer_cst 0x7fa11ea48f18 constant 256>
            unit-size <integer_cst 0x7fa11ea66018 constant 32>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fa11e578690>
            pointer_to_this <pointer_type 0x7fa11e5787e0>>
        unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fa11ea52118 type <array_type 0x7fa11e578738>
        readonly constant static "Out of memory, realloc failed%s\000">
    ./benchmarks/git/leak_7/../git.h:422:4 start: ./benchmarks/git/leak_7/../git.h:422:4 finish: ./benchmarks/git/leak_7/../git.h:422:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:st_mult========= [0m
[40;33m =======POP node_fun stack:st_mult========= [0m
[40;42m =======pre_check_funciton:add_object_array_with_path========= [0m
[40;42m =======start_check_funciton:add_object_array_with_path========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa11e598438
    type <pointer_type 0x7fa11e5781f8
        type <integer_type 0x7fa11e571b28 char public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e5781f8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>>
   
    def_stmt _7 = strdup (name_27(D));
    version:7
    ptr-info 0x7fa11e5859c0>
# .MEM_48 = VDEF <.MEM_47>
_7 = strdup (name_27(D));

 ================== trace ptable================== 
trace fucntion name:strdup 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strdup-----
this Reserved word function ------strdup-----
 
 Start check Pointer Collect  

======================================================================
_7 = strdup (name_27(D));
./benchmarks/git/leak_7/git_leak_7.c:47:31: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                               ^
this stmt is child function---strdup-----

 ================== trace ================== 
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
_6 = *name_27(D);
./benchmarks/git/leak_7/git_leak_7.c:43:19: warning: use location
   43 |         else if (!*name)
      |                   ^
if (_6 == 0)
./benchmarks/git/leak_7/git_leak_7.c:43:17: warning: use location
   43 |         else if (!*name)
      |                 ^
if (_6 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:43:17: warning: use location
Cond in fucntion add_object_array_with_path basic block 6
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 7
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 8
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
if (name_27(D) == 0B)
./benchmarks/git/leak_7/git_leak_7.c:41:12: warning: use location
   41 |         if (!name)
      |            ^
if (name_27(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:41:12: warning: use location
Cond in fucntion add_object_array_with_path basic block 4
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 5
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e598438
    type <pointer_type 0x7fa11e5781f8
        type <integer_type 0x7fa11e571b28 char public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e5781f8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>>
   
    def_stmt _7 = strdup (name_27(D));
    version:7
    ptr-info 0x7fa11e5859c0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e598480
    type <pointer_type 0x7fa11e5781f8
        type <integer_type 0x7fa11e571b28 char public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e5781f8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>>
   
    def_stmt _8 = strdup (path_34(D));
    version:8
    ptr-info 0x7fa11e5859d8>
# .MEM_54 = VDEF <.MEM_52>
_8 = strdup (path_34(D));

 ================== trace ptable================== 
trace fucntion name:strdup 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strdup-----
this Reserved word function ------strdup-----
 
 Start check Pointer Collect  

======================================================================
_8 = strdup (path_34(D));
./benchmarks/git/leak_7/git_leak_7.c:50:31: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                               ^
this stmt is child function---strdup-----

 ================== trace ================== 
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
if (path_34(D) != 0B)
./benchmarks/git/leak_7/git_leak_7.c:49:12: warning: use location
   49 |         if (path)
      |            ^
if (path_34(D) != 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:49:12: warning: use location
Cond in fucntion add_object_array_with_path basic block 9
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 10
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 11
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e598480
    type <pointer_type 0x7fa11e5781f8
        type <integer_type 0x7fa11e571b28 char public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e5781f8>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>>
   
    def_stmt _8 = strdup (path_34(D));
    version:8
    ptr-info 0x7fa11e5859d8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa11e5853d8 type <integer_type 0x7fa11ea5d7e0 long unsigned int> constant 32>

dot graph START

======================================================================
 <ssa_name 0x7fa11e5985e8
    type <pointer_type 0x7fa11e57c498
        type <record_type 0x7fa11e57c3f0 object_array_entry BLK
            size <integer_cst 0x7fa11ea48f18 constant 256>
            unit-size <integer_cst 0x7fa11ea66018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c3f0 fields <field_decl 0x7fa11e574850 item> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c498>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa11e58b750 objects>
    def_stmt objects_17 = array_14(D)->objects;
    version:17
    ptr-info 0x7fa11e585a20>
# VUSE <.MEM_42(D)>
objects_17 = array_14(D)->objects;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
objects_9 = PHI <objects_17(2), objects_21(3)>
lto1: warning: use location
this stmt have mutiple branch --------
entry_24 = objects_9 + _5;
./benchmarks/git/leak_7/git_leak_7.c:39:15: warning: use location
   39 |         entry = &objects[nr];
      |               ^
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
bb index := 3
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: use location
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
this stmt is child function---xrealloc-----

 ================== trace ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
[40;31m  find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with objects ========= [0m
[40;36m ======= relate stmt argument:objects ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_46 = VDEF <.MEM_45>
array_14(D)->objects = objects_21;
bb index := 3
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_46 = VDEF <.MEM_45>
array_14(D)->objects = objects_21;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_46 = VDEF <.MEM_45>
array_14(D)->objects = objects_21;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
array_14(D)->objects = objects_21;
./benchmarks/git/leak_7/git_leak_7.c:37:32: warning: use location
   37 |                 array->objects = objects;
      |                                ^
array_14(D)->nr = nr_38;
./benchmarks/git/leak_7/git_leak_7.c:53:19: warning: use location
   53 |         array->nr = ++nr;
      |                   ^
array_14(D)->nr = nr_38;
./benchmarks/git/leak_7/git_leak_7.c:53:19: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
array_14(D)->alloc = alloc_18;
./benchmarks/git/leak_7/git_leak_7.c:36:30: warning: use location
   36 |                 array->alloc = alloc;
      |                              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
array_14(D)->alloc = alloc_18;
./benchmarks/git/leak_7/git_leak_7.c:36:30: warning: use location
   36 |                 array->alloc = alloc;
      |                              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_2 = st_mult (32, alloc_18);
bb index := 3
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_2 = st_mult (32, alloc_18);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_43 = VDEF <.MEM_42(D)>
_2 = st_mult (32, alloc_18);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
_2 = st_mult (32, alloc_18);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: use location
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
this stmt is child function---st_mult-----

 ================== trace ================== 
trace fucntion name:st_mult 

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = (long unsigned int) _2;
bb index := 3
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = (long unsigned int) _2;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = (long unsigned int) _2;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
_3 = (long unsigned int) _2;
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: use location
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
objects_17 = array_14(D)->objects;
bb index := 2
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
objects_17 = array_14(D)->objects;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
objects_17 = array_14(D)->objects;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
objects_17 = array_14(D)->objects;
./benchmarks/git/leak_7/git_leak_7.c:30:36: warning: use location
   30 |         struct object_array_entry *objects = array->objects;
      |                                    ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
alloc_16 = array_14(D)->alloc;
bb index := 2
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
alloc_16 = array_14(D)->alloc;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
alloc_16 = array_14(D)->alloc;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
alloc_16 = array_14(D)->alloc;
./benchmarks/git/leak_7/git_leak_7.c:29:18: warning: use location
   29 |         unsigned alloc = array->alloc;
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = alloc_16 + 32;
bb index := 3
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = alloc_16 + 32;
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = alloc_16 + 32;
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
_1 = alloc_16 + 32;
./benchmarks/git/leak_7/git_leak_7.c:34:32: warning: use location
   34 |                 alloc = (alloc + 32) * 2;
      |                                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
nr_15 = array_14(D)->nr;
bb index := 2
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
nr_15 = array_14(D)->nr;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_42(D)>
nr_15 = array_14(D)->nr;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
nr_15 = array_14(D)->nr;
./benchmarks/git/leak_7/git_leak_7.c:28:18: warning: use location
   28 |         unsigned nr = array->nr;
      |                  ^
_4 = (long unsigned int) nr_15;
./benchmarks/git/leak_7/git_leak_7.c:39:25: warning: use location
   39 |         entry = &objects[nr];
      |                         ^
_5 = _4 * 32;
./benchmarks/git/leak_7/git_leak_7.c:39:25: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5985e8
    type <pointer_type 0x7fa11e57c498
        type <record_type 0x7fa11e57c3f0 object_array_entry BLK
            size <integer_cst 0x7fa11ea48f18 constant 256>
            unit-size <integer_cst 0x7fa11ea66018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11e57c3f0 fields <field_decl 0x7fa11e574850 item> context <translation_unit_decl 0x7fa11ea53168 ./benchmarks/git/leak_7/git_leak_7.c>
            pointer_to_this <pointer_type 0x7fa11e57c498>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa11e58b750 objects>
    def_stmt objects_17 = array_14(D)->objects;
    version:17
    ptr-info 0x7fa11e585a20>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
objects_9 = PHI <objects_17(2), objects_21(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
entry_24 = objects_9 + _5;
./benchmarks/git/leak_7/git_leak_7.c:39:15: warning: use location
   39 |         entry = &objects[nr];
      |               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_55 = VDEF <.MEM_54>
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_53 = VDEF <.MEM_52>
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_52 = VDEF <.MEM_40>
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_52 = VDEF <.MEM_40>
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_49 = VDEF <.MEM_48>
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_49 = VDEF <.MEM_48>
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_50 = VDEF <.MEM_47>
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_51 = VDEF <.MEM_47>
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_47 = VDEF <.MEM_39>
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_47 = VDEF <.MEM_39>
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_46 = VDEF <.MEM_45>
array_14(D)->objects = objects_21;
./benchmarks/git/leak_7/git_leak_7.c:37:32: warning: use location
   37 |                 array->objects = objects;
      |                                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_56 = VDEF <.MEM_41>
array_14(D)->nr = nr_38;
./benchmarks/git/leak_7/git_leak_7.c:53:19: warning: use location
   53 |         array->nr = ++nr;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_56 = VDEF <.MEM_41>
array_14(D)->nr = nr_38;
./benchmarks/git/leak_7/git_leak_7.c:53:19: warning: use location
   53 |         array->nr = ++nr;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
./benchmarks/git/leak_7/git_leak_7.c:36:30: warning: use location
   36 |                 array->alloc = alloc;
      |                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
# .MEM_45 = VDEF <.MEM_44>
array_14(D)->alloc = alloc_18;
./benchmarks/git/leak_7/git_leak_7.c:36:30: warning: use location
   36 |                 array->alloc = alloc;
      |                              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
_4 = (long unsigned int) nr_15;
./benchmarks/git/leak_7/git_leak_7.c:39:25: warning: use location
   39 |         entry = &objects[nr];
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_44 = VDEF <.MEM_43>
objects_21 = xrealloc (objects_17, _3);
./benchmarks/git/leak_7/git_leak_7.c:35:17: warning: Use after free error!: free location 
   35 |                 REALLOC_ARRAY(objects, alloc);
      |                 ^
_5 = _4 * 32;
./benchmarks/git/leak_7/git_leak_7.c:39:25: warning: use location
   39 |         entry = &objects[nr];
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (nr_15 >= alloc_16)
./benchmarks/git/leak_7/git_leak_7.c:33:12: warning: use location
   33 |         if (nr >= alloc) {
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e598750
    type <pointer_type 0x7fa11e571c78
        type <integer_type 0x7fa11e571bd0 char readonly public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e571c78>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e380 name>
    def_stmt GIMPLE_NOP
    version:27
    ptr-info 0x7fa11e585a80>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_7 = strdup (name_27(D));
./benchmarks/git/leak_7/git_leak_7.c:47:31: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                               ^
this stmt is child function---strdup-----

 ================== trace ================== 
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
_6 = *name_27(D);
./benchmarks/git/leak_7/git_leak_7.c:43:19: warning: use location
   43 |         else if (!*name)
      |                   ^
if (_6 == 0)
./benchmarks/git/leak_7/git_leak_7.c:43:17: warning: use location
   43 |         else if (!*name)
      |                 ^
if (_6 == 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:43:17: warning: use location
Cond in fucntion add_object_array_with_path basic block 6
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 7
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 8
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
if (name_27(D) == 0B)
./benchmarks/git/leak_7/git_leak_7.c:41:12: warning: use location
   41 |         if (!name)
      |            ^
if (name_27(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:41:12: warning: use location
Cond in fucntion add_object_array_with_path basic block 4
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 5
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e598750
    type <pointer_type 0x7fa11e571c78
        type <integer_type 0x7fa11e571bd0 char readonly public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e571c78>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e380 name>
    def_stmt GIMPLE_NOP
    version:27
    ptr-info 0x7fa11e585a80>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5987e0
    type <pointer_type 0x7fa11e571c78
        type <integer_type 0x7fa11e571bd0 char readonly public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e571c78>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e500 path>
    def_stmt GIMPLE_NOP
    version:34
    ptr-info 0x7fa11e585a98>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_8 = strdup (path_34(D));
./benchmarks/git/leak_7/git_leak_7.c:50:31: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                               ^
this stmt is child function---strdup-----

 ================== trace ================== 
entry_24->path = _8;
./benchmarks/git/leak_7/git_leak_7.c:50:29: warning: use location
   50 |                 entry->path = xstrdup(path);    /* allocation site */
      |                             ^
entry_24->path = 0B;
./benchmarks/git/leak_7/git_leak_7.c:52:29: warning: use location
   52 |                 entry->path = NULL;
      |                             ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
   48 |         entry->mode = mode;
      |                     ^
entry_24->mode = mode_32(D);
./benchmarks/git/leak_7/git_leak_7.c:48:21: warning: use location
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
   47 |                 entry->name = xstrdup(name);    /* allocation site */
      |                             ^
entry_24->name = _7;
./benchmarks/git/leak_7/git_leak_7.c:47:29: warning: use location
entry_24->name = &object_array_slopbuf;
./benchmarks/git/leak_7/git_leak_7.c:45:29: warning: use location
   45 |                 entry->name = object_array_slopbuf;
      |                             ^
entry_24->name = 0B;
./benchmarks/git/leak_7/git_leak_7.c:42:29: warning: use location
   42 |                 entry->name = NULL;
      |                             ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
   40 |         entry->item = obj;
      |                     ^
entry_24->item = obj_25(D);
./benchmarks/git/leak_7/git_leak_7.c:40:21: warning: use location
if (path_34(D) != 0B)
./benchmarks/git/leak_7/git_leak_7.c:49:12: warning: use location
   49 |         if (path)
      |            ^
if (path_34(D) != 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/git_leak_7.c:49:12: warning: use location
Cond in fucntion add_object_array_with_path basic block 9
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 10
 ================== possible direct basic block ================= 
from add_object_array_with_path basic block 11
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5987e0
    type <pointer_type 0x7fa11e571c78
        type <integer_type 0x7fa11e571bd0 char readonly public QI
            size <integer_cst 0x7fa11ea48ca8 constant 8>
            unit-size <integer_cst 0x7fa11ea48cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa11ea5d3f0 precision:8 min <integer_cst 0x7fa11e568720 -128> max <integer_cst 0x7fa11e568708 127>
            pointer_to_this <pointer_type 0x7fa11e571c78>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa11e57e500 path>
    def_stmt GIMPLE_NOP
    version:34
    ptr-info 0x7fa11e585a98>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:add_object_array_with_path========= [0m
[40;44m =======node_fun:xrealloc========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a00d8
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fa11e585b10>
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
In function ‘xrealloc’:
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a00d8
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_17 = realloc (ptr_14(D), size_15(D));
    version:17
    ptr-info 0x7fa11e585b10>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a0120
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fa11e585b28>
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a0120
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_19 = realloc (ptr_14(D), 1);
    version:19
    ptr-info 0x7fa11e585b28>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a0168
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fa11e585b40>
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = ret_21 == 0B;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = size_15(D) == 0;
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = size_15(D) == 0;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a0168
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_21 = realloc (ptr_14(D), size_15(D));
    version:21
    ptr-info 0x7fa11e585b40>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_4 = ret_21 == 0B;
./benchmarks/git/leak_7/../git.h:419:21: warning: use location
  419 |                 if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
_5 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:419:29: warning: use location
  419 |                 if (!ret && !size)
      |                             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_2 = size_15(D) == 0;
./benchmarks/git/leak_7/../git.h:415:21: warning: use location
  415 |         if (!ret && !size)
      |                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa11e5a01b0
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fa11e585b58>
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_8 = PHI <ret_21(5), ret_23(6)>
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location
this stmt have mutiple branch --------
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (ret_8 == 0B)
bb index := 7
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 9

======================================================================
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^
if (ret_8 == 0B)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
Cond in fucntion xrealloc basic block 7
 ================== possible direct basic block ================= 
from xrealloc basic block 8
 ================== possible direct basic block ================= 
from xrealloc basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
bb index := 5
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 9

======================================================================
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
bb index := 3
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 9

======================================================================
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
[40;32m    FIND REALLOC STMT count:3 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
ret_7 = PHI <ret_17(2), ret_19(3)>
bb index := 4
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 9

======================================================================
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
this stmt is child function---realloc-----

 ================== find ================== 
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
[40;32m    FIND REALLOC STMT count:4 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ret_17 == 0B;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _1 & _2;
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
beacuse in succ := 35 have return or exit
# VUSE <.MEM_181>
return _96;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 35

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
   54 | }
      | ^
beacuse in succ := 12 have return or exit
# VUSE <.MEM_56>
return;
./benchmarks/git/leak_7/git_leak_7.c:54:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 != 0)
bb index := 2
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
  424 |         return ret;
      |                ^
beacuse in succ := 9 have return or exit
# VUSE <.MEM_26>
return ret_9;
./benchmarks/git/leak_7/../git.h:424:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 9

======================================================================
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
if (_3 != 0)

 ================== find cond branch ================= 
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
Cond in fucntion xrealloc basic block 2
 ================== possible direct basic block ================= 
from xrealloc basic block 3
 ================== possible direct basic block ================= 
from xrealloc basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa11e5a01b0
    type <pointer_type 0x7fa11ea64000
        type <void_type 0x7fa11ea5df18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa11ea64000>>
        public unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa11ea699d8>>
    var <var_decl 0x7fa11e58bbd0 ret>
    def_stmt ret_23 = realloc (ptr_14(D), 1);
    version:23
    ptr-info 0x7fa11e585b58>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: use location
  414 |         ret = realloc(ptr, size);
      |               ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: use location
  416 |                 ret = realloc(ptr, 1);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: use location
  418 |                 ret = realloc(ptr, size);
      |                       ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: use location
  420 |                         ret = realloc(ptr, 1);
      |                               ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_8 = PHI <ret_21(5), ret_23(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_9 = PHI <ret_7(4), ret_8(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
if (ret_8 == 0B)
./benchmarks/git/leak_7/../git.h:421:20: warning: use location
  421 |                 if (!ret)
      |                    ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
ret_19 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:416:23: warning: Use after free error!: free location 
  416 |                 ret = realloc(ptr, 1);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_30 = VDEF <.MEM_24>
ret_21 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:418:23: warning: Use after free error!: free location 
  418 |                 ret = realloc(ptr, size);
      |                       ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 1
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_31 = VDEF <.MEM_30>
ret_23 = realloc (ptr_14(D), 1);
./benchmarks/git/leak_7/../git.h:420:31: warning: Use after free error!: free location 
  420 |                         ret = realloc(ptr, 1);
      |                               ^
ret_7 = PHI <ret_17(2), ret_19(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

succs:= 5
if (_6 != 0)
./benchmarks/git/leak_7/../git.h:419:20: warning: use location
  419 |                 if (!ret && !size)
      |                    ^
	relate logic:= 1
succs:= 4
if (ret_7 == 0B)
./benchmarks/git/leak_7/../git.h:417:12: warning: use location
  417 |         if (!ret) {
      |            ^
	relate logic:= 0
succs:= 2
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_1 = ret_17 == 0B;
./benchmarks/git/leak_7/../git.h:415:13: warning: use location
  415 |         if (!ret && !size)
      |             ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
_3 = _1 & _2;
./benchmarks/git/leak_7/../git.h:415:18: warning: use location
  415 |         if (!ret && !size)
      |                  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_28 = VDEF <.MEM_27(D)>
ret_17 = realloc (ptr_14(D), size_15(D));
./benchmarks/git/leak_7/../git.h:414:15: warning: Use after free error!: free location 
  414 |         ret = realloc(ptr, size);
      |               ^
if (_3 != 0)
./benchmarks/git/leak_7/../git.h:415:12: warning: use location
  415 |         if (!ret && !size)
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:4 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa11e59e0c0
    type <pointer_type 0x7fa11e5787e0
        type <array_type 0x7fa11e578738 type <integer_type 0x7fa11e571b28 char>
            BLK
            size <integer_cst 0x7fa11ea48f18 constant 256>
            unit-size <integer_cst 0x7fa11ea66018 constant 32>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fa11e578690>
            pointer_to_this <pointer_type 0x7fa11e5787e0>>
        unsigned DI
        size <integer_cst 0x7fa11ea48bb8 constant 64>
        unit-size <integer_cst 0x7fa11ea48bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fa11ea52118 type <array_type 0x7fa11e578738>
        readonly constant static "Out of memory, realloc failed%s\000">
    ./benchmarks/git/leak_7/../git.h:422:4 start: ./benchmarks/git/leak_7/../git.h:422:4 finish: ./benchmarks/git/leak_7/../git.h:422:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
commit_is_complete (&commit);
commit ={v} {CLOBBER};
return 0;

=======Mapping node_fun:commit_is_complete=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 102253939]:
_1 = commit_112(D)->object.flags;
_110 = _1 & 1;
if (_110 != 0)
  goto <bb 35>; [34.00%]
else
  goto <bb 3>; [66.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 67487599]:
_3 = commit_112(D)->object.flags;
_128 = _3 & 1024;
if (_128 != 0)
  goto <bb 35>; [51.12%]
else
  goto <bb 4>; [48.88%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 32987938]:
memset (&study, 0, 16);
memset (&found, 0, 16);
_4 = &commit_112(D)->object;
add_object_array (_4, 0B, &study);
_5 = &commit_112(D)->object;
add_object_array (_5, 0B, &found);
_6 = commit_112(D)->object.flags;
_7 = _6 | 2048;
commit_112(D)->object.flags = _7;
goto <bb 18>; [100.00%]

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 291410163]:
_8 = study.objects;
_9 = study.nr;
_10 = _9 + 4294967295;
study.nr = _10;
_11 = study.nr;
_12 = (long unsigned int) _11;
_13 = _12 * 32;
_14 = _8 + _13;
c_119 = _14->item;
_15 = BIT_FIELD_REF <c_119->object, 8, 0>;
_16 = _15 & 1;
if (_16 == 0)
  goto <bb 6>; [33.00%]
else
  goto <bb 8>; [67.00%]

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 96165353]:
_17 = &c_119->object.oid;
_18 = parse_object (_17);
if (_18 == 0)
  goto <bb 7>; [50.00%]
else
  goto <bb 8>; [50.00%]

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 48082677]:
_19 = c_119->object.flags;
_20 = _19 | 1024;
c_119->object.flags = _20;

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 291410164]:
_21 = c_119->object.flags;
_129 = _21 & 1024;
if (_129 != 0)
  goto <bb 19>; [5.50%]
else
  goto <bb 9>; [94.50%]

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 275382605]:
_22 = c_119->object.flags;
_130 = _22 & 1;
if (_130 != 0)
  goto <bb 10>; [57.11%]
else
  goto <bb 11>; [42.89%]

=======is loop:1=========

 bb index 10 
<bb 10> [local count: 157271005]:
// predicted unlikely by continue predictor.
goto <bb 17>; [100.00%]

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 118111600]:
parent_122 = c_119->parents;
goto <bb 16>; [100.00%]

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 955630226]:
p_123 = parent_95->item;
_23 = p_123->object.flags;
_135 = _23 & 2048;
if (_135 != 0)
  goto <bb 13>; [50.00%]
else
  goto <bb 14>; [50.00%]

=======is loop:1=========

 bb index 13 
<bb 13> [local count: 477815113]:
// predicted unlikely by continue predictor.
goto <bb 15>; [100.00%]

=======is loop:1=========

 bb index 14 
<bb 14> [local count: 477815113]:
_24 = p_123->object.flags;
_25 = _24 | 2048;
p_123->object.flags = _25;
_26 = &p_123->object;
add_object_array (_26, 0B, &study);
_27 = &p_123->object;
add_object_array (_27, 0B, &found);

=======is loop:1=========

 bb index 15 
<bb 15> [local count: 955630226]:
parent_127 = parent_95->next;

=======is loop:1=========

 bb index 16 
<bb 16> [local count: 1073741824]:
# parent_95 = PHI <parent_122(11), parent_127(15)>
if (parent_95 != 0B)
  goto <bb 12>; [89.00%]
else
  goto <bb 17>; [11.00%]

=======is loop:1=========

 bb index 17 
<bb 17> [local count: 275382605]:

=======is loop:1=========

 bb index 18 
<bb 18> [local count: 308370543]:
_28 = study.nr;
if (_28 != 0)
  goto <bb 5>; [94.50%]
else
  goto <bb 19>; [5.50%]

=======is loop:0=========

 bb index 19 
<bb 19> [local count: 32987939]:
# is_incomplete_87 = PHI <1(8), 0(18)>
if (is_incomplete_87 == 0)
  goto <bb 38>; [50.00%]
else
  goto <bb 27>; [50.00%]

=======is loop:0=========

 bb index 38 
<bb 38> [local count: 16493970]:
goto <bb 23>; [100.00%]

=======is loop:1=========

 bb index 20 
<bb 20> [local count: 133451207]:
_29 = found.objects;
_30 = (long unsigned int) i_91;
_31 = _30 * 32;
_32 = _29 + _31;
c_133 = _32->item;
_33 = c_133->tree;
_34 = &_33->object.oid;
_35 = tree_is_complete (_34);
if (_35 == 0)
  goto <bb 21>; [50.00%]
else
  goto <bb 22>; [50.00%]

=======is loop:1=========

 bb index 21 
<bb 21> [local count: 66725604]:
_36 = c_133->object.flags;
_37 = _36 | 1024;
c_133->object.flags = _37;

=======is loop:1=========

 bb index 22 
<bb 22> [local count: 133451207]:
# is_incomplete_88 = PHI <is_incomplete_89(20), 1(21)>
i_137 = i_91 + 1;

=======is loop:1=========

 bb index 23 
<bb 23> [local count: 149945177]:
# is_incomplete_89 = PHI <is_incomplete_87(38), is_incomplete_88(22)>
# i_91 = PHI <0(38), i_137(22)>
_38 = found.nr;
_39 = (unsigned int) i_91;
if (_38 > _39)
  goto <bb 20>; [89.00%]
else
  goto <bb 24>; [11.00%]

=======is loop:0=========

 bb index 24 
<bb 24> [local count: 16493969]:
if (is_incomplete_89 == 0)
  goto <bb 37>; [50.00%]
else
  goto <bb 27>; [50.00%]

=======is loop:0=========

 bb index 37 
<bb 37> [local count: 8246985]:
goto <bb 26>; [100.00%]

=======is loop:1=========

 bb index 25 
<bb 25> [local count: 66725604]:
_40 = found.objects;
_41 = (long unsigned int) i_92;
_42 = _41 * 32;
_43 = _40 + _42;
_44 = _43->item;
_45 = _44->flags;
_46 = found.objects;
_47 = (long unsigned int) i_92;
_48 = _47 * 32;
_49 = _46 + _48;
_50 = _49->item;
_51 = _45 | 1;
_50->flags = _51;
i_132 = i_92 + 1;

=======is loop:1=========

 bb index 26 
<bb 26> [local count: 74972588]:
# i_92 = PHI <0(37), i_132(25)>
_52 = found.nr;
_53 = (unsigned int) i_92;
if (_52 > _53)
  goto <bb 25>; [89.00%]
else
  goto <bb 27>; [11.00%]

=======is loop:0=========

 bb index 27 
<bb 27> [local count: 32987939]:
# is_incomplete_90 = PHI <is_incomplete_87(19), is_incomplete_89(24), is_incomplete_89(26)>
goto <bb 29>; [100.00%]

=======is loop:1=========

 bb index 28 
<bb 28> [local count: 266902415]:
_54 = found.objects;
_55 = (long unsigned int) i_93;
_56 = _55 * 32;
_57 = _54 + _56;
_58 = _57->item;
_59 = _58->flags;
_60 = found.objects;
_61 = (long unsigned int) i_93;
_62 = _61 * 32;
_63 = _60 + _62;
_64 = _63->item;
_65 = _59 & 134215679;
_64->flags = _65;
i_145 = i_93 + 1;

=======is loop:1=========

 bb index 29 
<bb 29> [local count: 299890354]:
# i_93 = PHI <0(27), i_145(28)>
_66 = found.nr;
_67 = (unsigned int) i_93;
if (_66 > _67)
  goto <bb 28>; [89.00%]
else
  goto <bb 30>; [11.00%]

=======is loop:0=========

 bb index 30 
<bb 30> [local count: 32987939]:
if (is_incomplete_90 != 0)
  goto <bb 31>; [50.00%]
else
  goto <bb 36>; [50.00%]

=======is loop:0=========

 bb index 36 
<bb 36> [local count: 16493970]:
goto <bb 33>; [100.00%]

=======is loop:0=========

 bb index 31 
<bb 31> [local count: 16493969]:
_68 = commit_112(D)->object.flags;
_69 = _68 | 1024;
commit_112(D)->object.flags = _69;
goto <bb 34>; [100.00%]

=======is loop:1=========

 bb index 32 
<bb 32> [local count: 133451207]:
_70 = found.objects;
_71 = (long unsigned int) i_94;
_72 = _71 * 32;
_73 = _70 + _72;
_74 = _73->item;
_75 = _74->flags;
_76 = found.objects;
_77 = (long unsigned int) i_94;
_78 = _77 * 32;
_79 = _76 + _78;
_80 = _79->item;
_81 = _75 | 1;
_80->flags = _81;
i_139 = i_94 + 1;

=======is loop:1=========

 bb index 33 
<bb 33> [local count: 149945177]:
# i_94 = PHI <0(36), i_139(32)>
_82 = found.nr;
_83 = (unsigned int) i_94;
if (_82 > _83)
  goto <bb 32>; [89.00%]
else
  goto <bb 34>; [11.00%]

=======is loop:0=========

 bb index 34 
<bb 34> [local count: 32987939]:
_84 = study.objects;
free (_84);
_85 = found.objects;
free (_85);
_86 = is_incomplete_90 == 0;
_143 = (int) _86;

=======is loop:0=========

 bb index 35 
<bb 35> [local count: 102253939]:
# _96 = PHI <1(2), 0(3), _143(34)>
study ={v} {CLOBBER};
found ={v} {CLOBBER};
return _96;

=======Mapping node_fun:add_object_array=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
add_object_array_with_path (obj_2(D), name_3(D), array_4(D), 12288, 0B);
return;

=======Mapping node_fun:add_object_array_with_path=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
nr_15 = array_14(D)->nr;
alloc_16 = array_14(D)->alloc;
objects_17 = array_14(D)->objects;
if (nr_15 >= alloc_16)
  goto <bb 3>; [33.00%]
else
  goto <bb 4>; [67.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 354334800]:
_1 = alloc_16 + 32;
alloc_18 = _1 * 2;
_2 = st_mult (32, alloc_18);
_3 = (long unsigned int) _2;
objects_21 = xrealloc (objects_17, _3);
array_14(D)->alloc = alloc_18;
array_14(D)->objects = objects_21;

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# objects_9 = PHI <objects_17(2), objects_21(3)>
_4 = (long unsigned int) nr_15;
_5 = _4 * 32;
entry_24 = objects_9 + _5;
entry_24->item = obj_25(D);
if (name_27(D) == 0B)
  goto <bb 5>; [30.00%]
else
  goto <bb 6>; [70.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 322122544]:
entry_24->name = 0B;
goto <bb 9>; [100.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 751619281]:
_6 = *name_27(D);
if (_6 == 0)
  goto <bb 7>; [67.00%]
else
  goto <bb 8>; [33.00%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 503584919]:
entry_24->name = &object_array_slopbuf;
goto <bb 9>; [100.00%]

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 248034361]:
_7 = strdup (name_27(D));
entry_24->name = _7;

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 1073741824]:
entry_24->mode = mode_32(D);
if (path_34(D) != 0B)
  goto <bb 10>; [53.47%]
else
  goto <bb 11>; [46.53%]

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 574129753]:
_8 = strdup (path_34(D));
entry_24->path = _8;
goto <bb 12>; [100.00%]

=======is loop:0=========

 bb index 11 
<bb 11> [local count: 499612072]:
entry_24->path = 0B;

=======is loop:0=========

 bb index 12 
<bb 12> [local count: 1073741824]:
nr_38 = nr_15 + 1;
array_14(D)->nr = nr_38;
return;

=======Mapping node_fun:xrealloc=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
ret_17 = realloc (ptr_14(D), size_15(D));
_1 = ret_17 == 0B;
_2 = size_15(D) == 0;
_3 = _1 & _2;
if (_3 != 0)
  goto <bb 3>; [33.00%]
else
  goto <bb 4>; [67.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 354334800]:
ret_19 = realloc (ptr_14(D), 1);

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# ret_7 = PHI <ret_17(2), ret_19(3)>
if (ret_7 == 0B)
  goto <bb 5>; [0.04%]
else
  goto <bb 9>; [99.96%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 429496]:
ret_21 = realloc (ptr_14(D), size_15(D));
_4 = ret_21 == 0B;
_5 = size_15(D) == 0;
_6 = _4 & _5;
if (_6 != 0)
  goto <bb 6>; [33.00%]
else
  goto <bb 7>; [67.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 141734]:
ret_23 = realloc (ptr_14(D), 1);

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 429496]:
# ret_8 = PHI <ret_21(5), ret_23(6)>
if (ret_8 == 0B)
  goto <bb 8>; [0.04%]
else
  goto <bb 9>; [99.96%]

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 172]:
printf ("Out of memory, realloc failed%s", "");
exit (1);

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 1073741653]:
# ret_9 = PHI <ret_7(4), ret_8(7)>
return ret_9;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 6 [0m
[40;34m    gimple free   count : 2 [0m
[40;34m    find Entry point : 16 [0m
[40;34m    used_stmt array stack totalsize of : 0.003304 mb[0m
[40;34m    collect time: : 0.000361 s [0m
[40;34m    algorithm time: 0.399344 s [0m
[40;34m    gimple stmt count : : 191 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cp                   ------------|      |      |      |      |          |          |
inline               ------------|      |      |      |      |          |          |
fixup_cfg            ------------|      |      |      |      |          |          |
adjust_alignment     ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
backprop             ------------|      |      |      |      |          |          |
phiprop              ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
alias                ------------|      |      |      |      |          |          |
retslot              ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
stdarg               ------------|      |      |      |      |          |          |
cdce                 ------------|      |      |      |      |          |          |
cselim               ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
ifcombine            ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
ch                               |      |      |      |      |     +2.9%|     +0.0%|
cplxlower                        |      |      |      |      |     +2.8%|     +0.0%|
sra                  ------------|      |      |      |      |          |          |
dom                              |      |      |      |      |     -4.6%|     -1.4%|
copyprop                         |      |    +2|      |      |     -4.9%|     -1.4%|
reassoc                          |      |      |      |      |     +0.4%|     +0.4%|
dce                              |      |      |      |      |     -0.4%|     -0.4%|
forwprop                         |      |      |      |      |     -0.9%|     -0.7%|
phiopt               ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
sincos               ------------|      |      |      |      |          |          |
laddress             ------------|      |      |      |      |          |          |
lim                              |      |      |      |      |          |     -0.1%|
walloca                          |      |      |      |      |          |     -0.1%|
sink                             |      |      |      |      |     -1.1%|     -0.4%|
dce                              |      |      |      |      |     -1.1%|     -0.4%|
fix_loops            ------------|      |      |      |      |          |          |
loop                 ------------|      |      |      |      |          |          |
loopinit                         |      |      |      |      |    -35.5%|    -71.8%|
sccp                 ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
ivcanon              ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
cunroll              ------------|      |      |      |      |          |          |
ivopts                           |      |      |      |      |     -0.3%|     -0.7%|
lim                              |      |      |      |      |     -0.3%|     -0.7%|
loopdone             ------------|      |      |      |      |          |          |
no_loop                          |      |      |      |      |    +55.5%|   +258.4%|
veclower2            ------------|      |      |      |      |          |          |
switchlower          ------------|      |      |      |      |          |          |
reassoc              ------------|      |      |      |      |          |          |
slsr                 ------------|      |      |      |      |          |          |
dom                              |      |      |      |      |     -0.7%|     -0.0%|
strlen                           |      |    +2|      |      |     -0.7%|     -0.0%|
copyprop                         |      |      |      |      |     -0.4%|     -0.0%|
wrestrict                        |      |      |      |      |     -0.4%|     -0.0%|
cddce                ------------|      |      |      |      |          |          |
forwprop                         |      |      |      |      |     -0.2%|     -0.0%|
phiopt                           |      |      |      |      |     -0.2%|     -0.0%|
fab                  ------------|      |      |      |      |          |          |
dce                              |      |      |      |      |     -0.2%|     -0.0%|
crited                           |      |      |      |      |     -0.2%|     -0.0%|
uncprop              ------------|      |      |      |      |          |          |
local-pure-const     ------------|      |      |      |      |          |          |
modref               ------------|      |      |      |      |          |          |
nrv                  ------------|      |      |      |      |          |          |
isel                 ------------|      |      |      |      |          |          |
optimized            ------------|      |      |      |      |          |          |
expand                           |      |      |      |      |----------|----------|
vregs                            |      |      |      |      |    +74.8%|    +57.3%|
into_cfglayout                   |      |      |      |      |     -1.8%|     -0.2%|
jump                             |      |      |      |      |     -1.9%|     -0.2%|
subreg1              ------------|      |      |      |      |          |          |
dfinit               ------------|      |      |      |      |          |          |
cse1                             |      |      |      |      |     -0.4%|          |
fwprop1                          |      |      |      |      |     -3.7%|     -2.0%|
ce1                              |      |      |      |      |     -3.4%|     -2.0%|
reginfo                          |      |      |      |      |          |     +0.0%|
loop2                ------------|      |      |      |      |          |          |
loop2_init           ------------|      |      |      |      |          |          |
loop2_invariant                  |      |      |      |      |     +0.4%|     +0.1%|
loop2_done                       |      |      |      |      |     +0.4%|     +0.1%|
dse1                 ------------|      |      |      |      |          |          |
fwprop2                          |      |      |      |      |     -0.3%|     -0.2%|
init-regs                        |      |      |      |      |     -0.3%|     -0.2%|
combine                          |      |      |      |      |     +0.1%|     +3.4%|
ce2                              |      |      |      |      |     +0.1%|     +3.3%|
outof_cfglayout                  |      |      |      |      |     +1.8%|     +0.2%|
split1                           |      |      |      |      |     +1.7%|     +0.2%|
subreg3              ------------|      |      |      |      |          |          |
mode_sw              ------------|      |      |      |      |          |          |
asmcons              ------------|      |      |      |      |          |          |
ira                              |      |      |      |      |     -0.3%|     -0.0%|
reload                           |      |      |      |      |     -5.5%|     -8.0%|
postreload                       |      |      |      |      |     -5.6%|     -8.6%|
split2                           |      |      |      |      |     +0.8%|     +0.8%|
cmpelim                          |      |      |      |      |     +0.8%|     +0.8%|
pro_and_epilogue                 |      |      |      |      |     +8.0%|    +15.3%|
dse2                             |      |      |      |      |     +7.4%|    +13.3%|
csa                  ------------|      |      |      |      |          |          |
jump2                ------------|      |      |      |      |          |          |
ce3                              |      |      |      |      |          |     +0.0%|
cprop_hardreg                    |      |      |      |      |     -0.3%|     -0.4%|
rtl_dce                          |      |      |      |      |     -0.3%|     -0.4%|
bbro                             |      |      |      |      |     +0.1%|     +0.4%|
split4                           |      |      |      |      |     +0.1%|     +0.4%|
stack                ------------|      |      |      |      |          |          |
zero_call_used_regs  ------------|      |      |      |      |          |          |
alignments           ------------|      |      |      |      |          |          |
/usr/bin/ld: /tmp/cccc6EMb.ltrans0.ltrans.o: in function `add_object_array_with_path':
<artificial>:(.text+0x108): undefined reference to `st_mult'
/usr/bin/ld: /tmp/cccc6EMb.ltrans0.ltrans.o: in function `commit_is_complete':
<artificial>:(.text+0x22f): undefined reference to `parse_object'
/usr/bin/ld: <artificial>:(.text+0x2bc): undefined reference to `tree_is_complete'
collect2: error: ld returned 1 exit status
