../Compiler/newplugin.so 11.2.0 
./benchmarks/tmux/leak_1/tmux_leak_1.c: In function â€˜xvasprintfâ€™:
./benchmarks/tmux/leak_1/tmux_leak_1.c:91:13: warning: implicit declaration of function â€˜vasprintfâ€™; did you mean â€˜xvasprintfâ€™? [-Wimplicit-function-declaration]
   91 |         i = vasprintf(ret, fmt, ap);
      |             ^~~~~~~~~
      |             xvasprintf
./benchmarks/tmux/leak_1/tmux_leak_1.c: In function â€˜screen_write_cnputsâ€™:
./benchmarks/tmux/leak_1/tmux_leak_1.c:111:9: warning: implicit declaration of function â€˜memcpyâ€™ [-Wimplicit-function-declaration]
  111 |         memcpy(&gc, gcp, sizeof gc);
      |         ^~~~~~
./benchmarks/tmux/leak_1/tmux_leak_1.c:12:1: note: include â€˜<string.h>â€™ or provide a declaration of â€˜memcpyâ€™
   11 | #include "../tmux.h"
  +++ |+#include <string.h>
   12 | 
./benchmarks/tmux/leak_1/tmux_leak_1.c:111:9: warning: incompatible implicit declaration of built-in function â€˜memcpyâ€™ [-Wbuiltin-declaration-mismatch]
  111 |         memcpy(&gc, gcp, sizeof gc);
      |         ^~~~~~
./benchmarks/tmux/leak_1/tmux_leak_1.c:111:9: note: include â€˜<string.h>â€™ or provide a declaration of â€˜memcpyâ€™
./benchmarks/tmux/leak_1/tmux_leak_1.c:119:38: warning: implicit declaration of function â€˜strcspnâ€™ [-Wimplicit-function-declaration]
  119 |                         last = ptr + strcspn(ptr, "]");
      |                                      ^~~~~~~
./benchmarks/tmux/leak_1/tmux_leak_1.c:119:38: note: include â€˜<string.h>â€™ or provide a declaration of â€˜strcspnâ€™
./benchmarks/tmux/leak_1/tmux_leak_1.c:119:38: warning: incompatible implicit declaration of built-in function â€˜strcspnâ€™ [-Wbuiltin-declaration-mismatch]
./benchmarks/tmux/leak_1/tmux_leak_1.c:119:38: note: include â€˜<string.h>â€™ or provide a declaration of â€˜strcspnâ€™
./benchmarks/tmux/leak_1/tmux_leak_1.c:133:32: warning: implicit declaration of function â€˜strlenâ€™ [-Wimplicit-function-declaration]
  133 |                         left = strlen(ptr);
      |                                ^~~~~~
./benchmarks/tmux/leak_1/tmux_leak_1.c:133:32: note: include â€˜<string.h>â€™ or provide a declaration of â€˜strlenâ€™
./benchmarks/tmux/leak_1/tmux_leak_1.c:133:32: warning: incompatible implicit declaration of built-in function â€˜strlenâ€™ [-Wbuiltin-declaration-mismatch]
./benchmarks/tmux/leak_1/tmux_leak_1.c:133:32: note: include â€˜<string.h>â€™ or provide a declaration of â€˜strlenâ€™
In file included from ./benchmarks/tmux/leak_1/tmux_leak_1.c:10:
./benchmarks/tmux/leak_1/tmux_leak_1.c: In function â€˜screen_write_cstrlenâ€™:
./benchmarks/tmux/leak_1/tmux_leak_1.c:169:24: warning: incompatible implicit declaration of built-in function â€˜strlenâ€™ [-Wbuiltin-declaration-mismatch]
  169 |         msg2 = xmalloc(strlen(msg) + 1);
      |                        ^~~~~~
./benchmarks/tmux/leak_1/../stdio.h:137:27: note: in definition of macro â€˜xmallocâ€™
  137 | #define xmalloc(a) malloc(a)
      |                           ^
./benchmarks/tmux/leak_1/tmux_leak_1.c:169:24: note: include â€˜<string.h>â€™ or provide a declaration of â€˜strlenâ€™
  169 |         msg2 = xmalloc(strlen(msg) + 1);
      |                        ^~~~~~
./benchmarks/tmux/leak_1/../stdio.h:137:27: note: in definition of macro â€˜xmallocâ€™
  137 | #define xmalloc(a) malloc(a)
      |                           ^
./benchmarks/tmux/leak_1/tmux_leak_1.c: In function â€˜screen_redraw_make_pane_statusâ€™:
./benchmarks/tmux/leak_1/tmux_leak_1.c:218:9: warning: incompatible implicit declaration of built-in function â€˜memcpyâ€™ [-Wbuiltin-declaration-mismatch]
  218 |         memcpy(&old, &wp->status_screen, sizeof old);
      |         ^~~~~~
./benchmarks/tmux/leak_1/tmux_leak_1.c:218:9: note: include â€˜<string.h>â€™ or provide a declaration of â€˜memcpyâ€™
./benchmarks/tmux/leak_1/tmux_leak_1.c:221:22: warning: incompatible implicit declaration of built-in function â€˜strlenâ€™ [-Wbuiltin-declaration-mismatch]
  221 |         out = malloc(strlen(fmt));                      /* allocation site */
      |                      ^~~~~~
./benchmarks/tmux/leak_1/tmux_leak_1.c:221:22: note: include â€˜<string.h>â€™ or provide a declaration of â€˜strlenâ€™

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  1298k ( 41%)
 phase parsing                      :   0.02 ( 67%)   0.03 ( 75%)   0.05 ( 83%)  1695k ( 53%)
 phase opt and generate             :   0.01 ( 33%)   0.01 ( 25%)   0.01 ( 17%)   168k (  5%)
 callgraph optimization             :   0.01 ( 33%)   0.00 (  0%)   0.00 (  0%)    16  (  0%)
 callgraph ipa passes               :   0.01 ( 33%)   0.01 ( 25%)   0.01 ( 17%)    93k (  3%)
 preprocessing                      :   0.02 ( 67%)   0.02 ( 50%)   0.02 ( 33%)   764k ( 24%)
 lexical analysis                   :   0.00 (  0%)   0.01 ( 25%)   0.02 ( 33%)     0  (  0%)
 parser (global)                    :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)   591k ( 19%)
 tree CFG cleanup                   :   0.00 (  0%)   0.01 ( 25%)   0.00 (  0%)     0  (  0%)
 tree PTA                           :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)  1912  (  0%)
 TOTAL                              :   0.03          0.04          0.06         3173k
../Compiler/newplugin.so 11.2.0 

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 (100%)  2157k ( 95%)
 phase stream in                    :   0.01 (100%)   0.00 (  0%)   0.00 (  0%)   114k (  5%)
 ipa lto decl in                    :   0.01 (100%)   0.00 (  0%)   0.00 (  0%)   103k (  5%)
 TOTAL                              :   0.01          0.00          0.01         2274k
../Compiler/newplugin.so 11.2.0 
--------plugin argument-----------
contextsentive 1
debugoutput 0
debugmod 0
=======ipa_pta=========
=============== The first stage : Point of interest stmt collect =================
=======node_fun:main=========
=======node_fun:screen_redraw_make_pane_status=========
=======node_fun:grid_compare=========
=======node_fun:screen_write_cstrlen=========
=======node_fun:screen_write_cnputs=========
=======node_fun:xvasprintf=========
=============== The first stage :  record fucntion =================
start PointerConstraint
ptable point 40 
===============The second stage : Mapping stmt=================
# .MEM_2 = VDEF <.MEM_1(D)>
screen_redraw_make_pane_status (&c, &w, &wp);
# .MEM_18 = VDEF <.MEM_17(D)>
memcpy (&old, _1, 136);
# VUSE <.MEM_19>
_2 = strlen (fmt_12(D));
# .MEM_20 = VDEF <.MEM_19>
out_14 = malloc (_2);
# .MEM_21 = VDEF <.MEM_20>
outlen_16 = screen_write_cstrlen ("%s", out_14);
# .MEM_22 = VDEF <.MEM_21>
screen_write_cnputs (&ctx, _3, &gc, "%s", out_14);
# VUSE <.MEM_22>
_6 = grid_compare (_5, _4);
# .MEM_41 = VDEF <.MEM_40(D)>
xvasprintf (&msg, fmt_20(D), ap_21(D));
# VUSE <.MEM_41>
_2 = strlen (_1);
# .MEM_42 = VDEF <.MEM_41>
msg2_24 = malloc (_3);
 <var_decl 0x7f72903777e0 msg
    type <pointer_type 0x7f729034fa80
        type <integer_type 0x7f729034f9d8 char public QI
            size <integer_cst 0x7f729084bca8 constant 8>
            unit-size <integer_cst 0x7f729084bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f72908603f0 precision:8 min <integer_cst 0x7f7290346720 -128> max <integer_cst 0x7f7290346708 127> context <translation_unit_decl 0x7f7290856168 ./benchmarks/tmux/leak_1/tmux_leak_1.c>
            pointer_to_this <pointer_type 0x7f729034fa80>>
        public unsigned DI
        size <integer_cst 0x7f729084bbb8 constant 64>
        unit-size <integer_cst 0x7f729084bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f7290856168 ./benchmarks/tmux/leak_1/tmux_leak_1.c>
        pointer_to_this <pointer_type 0x7f729034fc78>>
    addressable unsigned DI ./benchmarks/tmux/leak_1/tmux_leak_1.c:165:10 size <integer_cst 0x7f729084bbb8 64> unit-size <integer_cst 0x7f729084bbd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7f7290350c00 screen_write_cstrlen> chain <var_decl 0x7f7290377750 msg2>>
# .MEM_54 = VDEF <.MEM_53(D)>
memcpy (&gc, gcp_32(D), 24);
# .MEM_55 = VDEF <.MEM_54>
xvasprintf (&msg, fmt_34(D), ap_35(D));
# VUSE <.MEM_52>
_4 = strcspn (ptr_38, "]");
# VUSE <.MEM_52>
left_46 = strlen (ptr_45);
 <var_decl 0x7f7290377e10 msg
    type <pointer_type 0x7f729034fa80
        type <integer_type 0x7f729034f9d8 char public QI
            size <integer_cst 0x7f729084bca8 constant 8>
            unit-size <integer_cst 0x7f729084bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f72908603f0 precision:8 min <integer_cst 0x7f7290346720 -128> max <integer_cst 0x7f7290346708 127> context <translation_unit_decl 0x7f7290856168 ./benchmarks/tmux/leak_1/tmux_leak_1.c>
            pointer_to_this <pointer_type 0x7f729034fa80>>
        public unsigned DI
        size <integer_cst 0x7f729084bbb8 constant 64>
        unit-size <integer_cst 0x7f729084bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f7290856168 ./benchmarks/tmux/leak_1/tmux_leak_1.c>
        pointer_to_this <pointer_type 0x7f729034fc78>>
    addressable unsigned DI ./benchmarks/tmux/leak_1/tmux_leak_1.c:106:10 size <integer_cst 0x7f729084bbb8 64> unit-size <integer_cst 0x7f729084bbd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7f7290350b00 screen_write_cnputs> chain <var_decl 0x7f7290377d80 ptr>>
# .MEM_9 = VDEF <.MEM_8(D)>
i_7 = vasprintf (ret_3(D), fmt_4(D), ap_5(D));
# .MEM_10 = VDEF <.MEM_9>
printf ("xasprintf: %s", "");
===============The second stage : Program slicing=================
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

=============== The third stage : Start detection  =================

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
screen_redraw_make_pane_status (&c, &w, &wp);
c ={v} {CLOBBER};
w ={v} {CLOBBER};
wp ={v} {CLOBBER};
return 0;

=======Mapping node_fun:screen_redraw_make_pane_status=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = &wp_8(D)->status_screen;
memcpy (&old, _1, 136);
wp_8(D)->status_screen.mode = 0;
_2 = strlen (fmt_12(D));
out_14 = malloc (_2);
outlen_16 = screen_write_cstrlen ("%s", out_14);
_3 = (long int) outlen_16;
screen_write_cnputs (&ctx, _3, &gc, "%s", out_14);
_4 = old.grid;
_5 = wp_8(D)->status_screen.grid;
_6 = grid_compare (_5, _4);
if (_6 == 0)
  goto <bb 3>; [34.00%]
else
  goto <bb 4>; [66.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 365072224]:

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# _7 = PHI <1(2), 0(3)>
gc ={v} {CLOBBER};
ctx ={v} {CLOBBER};
old ={v} {CLOBBER};
return _7;

=======Mapping node_fun:grid_compare=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = ga_7(D)->sx;
_2 = gb_8(D)->sx;
if (_1 != _2)
  goto <bb 4>; [50.00%]
else
  goto <bb 3>; [50.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 536870913]:
_3 = ga_7(D)->sy;
_4 = gb_8(D)->sy;
if (_3 != _4)
  goto <bb 4>; [50.00%]
else
  goto <bb 5>; [50.00%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 805306369]:

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 1073741824]:
# _5 = PHI <0(3), 1(4)>
return _5;

=======Mapping node_fun:screen_write_cstrlen=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111600]:
xvasprintf (&msg, fmt_20(D), ap_21(D));
_1 = msg;
_2 = strlen (_1);
_3 = _2 + 1;
msg2_24 = malloc (_3);
ptr_25 = msg;
goto <bb 12>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
_4 = *ptr_16;
if (_4 == 35)
  goto <bb 4>; [34.00%]
else
  goto <bb 10>; [66.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 324914280]:
_5 = MEM[(char *)ptr_16 + 1B];
if (_5 == 91)
  goto <bb 6>; [8.58%]
else
  goto <bb 10>; [91.42%]

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 225555493]:
ptr_35 = ptr_14 + 1;

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 253433138]:
# ptr_14 = PHI <ptr_16(4), ptr_35(5)>
_33 = *ptr_14;
_6 = _33 != 93;
_7 = _33 != 0;
_8 = _6 & _7;
if (_8 != 0)
  goto <bb 5>; [89.00%]
else
  goto <bb 7>; [11.00%]

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 27877645]:
_9 = *ptr_14;
if (_9 == 93)
  goto <bb 8>; [34.00%]
else
  goto <bb 9>; [66.00%]

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 9478399]:
ptr_34 = ptr_14 + 1;

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 27877645]:
# ptr_15 = PHI <ptr_14(7), ptr_34(8)>
// predicted unlikely by continue predictor.
goto <bb 11>; [100.00%]

=======is loop:1=========

 bb index 10 
<bb 10> [local count: 927752580]:
ptr_36 = ptr_16 + 1;
ptr2_37 = ptr2_17 + 1;
_11 = *ptr_16;
*ptr2_17 = _11;

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 955630225]:
# ptr_26 = PHI <ptr_15(9), ptr_36(10)>
# ptr2_31 = PHI <ptr2_17(9), ptr2_37(10)>

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 1073741824]:
# ptr_16 = PHI <ptr_25(2), ptr_26(11)>
# ptr2_17 = PHI <msg2_24(2), ptr2_31(11)>
_12 = *ptr_16;
if (_12 != 0)
  goto <bb 3>; [89.00%]
else
  goto <bb 13>; [11.00%]

=======is loop:0=========

 bb index 13 
<bb 13> [local count: 118111600]:
*ptr2_17 = 0;
_13 = msg;
free (_13);
free (msg2_24);
msg ={v} {CLOBBER};
return size_30(D);

=======Mapping node_fun:screen_write_cnputs=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 122916664]:
memcpy (&gc, gcp_32(D), 24);
xvasprintf (&msg, fmt_34(D), ap_35(D));
ptr_37 = msg;
goto <bb 22>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 1050119505]:
_1 = *ptr_24;
if (_1 == 35)
  goto <bb 4>; [34.00%]
else
  goto <bb 7>; [66.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 357040635]:
_3 = MEM[(u_char *)ptr_24 + 1B];
if (_3 == 91)
  goto <bb 5>; [34.00%]
else
  goto <bb 7>; [66.00%]

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 121393817]:
ptr_38 = ptr_24 + 2;
_4 = strcspn (ptr_38, "]");
last_39 = ptr_38 + _4;
_5 = *last_39;
if (_5 == 0)
  goto <bb 23>; [67.00%]
else
  goto <bb 6>; [33.00%]

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 40059959]:
*last_39 = 0;
ptr_41 = last_39 + 1;
// predicted unlikely by continue predictor.
goto <bb 21>; [100.00%]

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 928725687]:
_6 = *ptr_24;
_7 = (signed char) _6;
if (_7 < 0)
  goto <bb 8>; [41.00%]
else
  goto <bb 16>; [59.00%]

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 380777528]:
ptr_45 = ptr_24 + 1;
left_46 = strlen (ptr_45);
_8 = MEM[(struct utf8_data *)&gc + 12B].size;
_9 = (long unsigned int) _8;
_10 = _9 + 18446744073709551615;
if (_10 > left_46)
  goto <bb 23>; [2.20%]
else
  goto <bb 9>; [97.80%]

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 372400423]:
ptr_47 = &MEM <u_char> [(void *)ptr_24 + 2B];
if (more_48(D) != 1)
  goto <bb 10>; [48.88%]
else
  goto <bb 11>; [51.12%]

=======is loop:1=========

 bb index 10 
<bb 10> [local count: 182029325]:
// predicted unlikely by continue predictor.
goto <bb 21>; [100.00%]

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 190371097]:
if (maxlen_42(D) > 0)
  goto <bb 12>; [59.00%]
else
  goto <bb 15>; [41.00%]

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 112318948]:
_11 = MEM[(struct utf8_data *)&gc + 12B].width;
_12 = (long unsigned int) _11;
_13 = _12 + size_27;
_14 = (long unsigned int) maxlen_42(D);
if (_13 > _14)
  goto <bb 14>; [2.20%]
else
  goto <bb 15>; [97.80%]

=======is loop:1=========

 bb index 13 
<bb 13> [local count: 19992773]:
size_49 = size_25 + 1;

=======is loop:1=========

 bb index 14 
<bb 14> [local count: 22463790]:
# size_25 = PHI <size_27(12), size_49(13)>
_15 = (long unsigned int) maxlen_42(D);
if (_15 > size_25)
  goto <bb 13>; [89.00%]
else
  goto <bb 23>; [11.00%]

=======is loop:1=========

 bb index 15 
<bb 15> [local count: 187900080]:
_16 = MEM[(struct utf8_data *)&gc + 12B].width;
_17 = (long unsigned int) _16;
size_50 = _17 + size_27;
goto <bb 21>; [100.00%]

=======is loop:1=========

 bb index 16 
<bb 16> [local count: 547948159]:
if (maxlen_42(D) > 0)
  goto <bb 17>; [59.00%]
else
  goto <bb 18>; [41.00%]

=======is loop:1=========

 bb index 17 
<bb 17> [local count: 323289415]:
_18 = size_27 + 1;
_19 = (long unsigned int) maxlen_42(D);
if (_18 > _19)
  goto <bb 23>; [2.20%]
else
  goto <bb 18>; [97.80%]

=======is loop:1=========

 bb index 18 
<bb 18> [local count: 540835792]:
_20 = *ptr_24;
_21 = _20 + 224;
if (_21 <= 94)
  goto <bb 19>; [50.00%]
else
  goto <bb 20>; [50.00%]

=======is loop:1=========

 bb index 19 
<bb 19> [local count: 270417896]:
size_43 = size_27 + 1;

=======is loop:1=========

 bb index 20 
<bb 20> [local count: 540835792]:
# size_26 = PHI <size_27(18), size_43(19)>
ptr_44 = ptr_24 + 1;

=======is loop:1=========

 bb index 21 
<bb 21> [local count: 950825158]:
# ptr_2 = PHI <ptr_41(6), ptr_47(10), ptr_47(15), ptr_44(20)>
# size_29 = PHI <size_27(6), size_27(10), size_50(15), size_26(20)>

=======is loop:1=========

 bb index 22 
<bb 22> [local count: 1073741824]:
# ptr_24 = PHI <ptr_37(2), ptr_2(21)>
# size_27 = PHI <0(2), size_29(21)>
_22 = *ptr_24;
if (_22 != 0)
  goto <bb 3>; [97.80%]
else
  goto <bb 23>; [2.20%]

=======is loop:0=========

 bb index 23 
<bb 23> [local count: 122916667]:
_23 = msg;
free (_23);
gc ={v} {CLOBBER};
msg ={v} {CLOBBER};
return;

=======Mapping node_fun:xvasprintf=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
i_7 = vasprintf (ret_3(D), fmt_4(D), ap_5(D));
if (i_7 < 0)
  goto <bb 4>; [0.04%]
else
  goto <bb 3>; [99.96%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 1073312329]:
_1 = *ret_3(D);
if (_1 == 0B)
  goto <bb 4>; [0.04%]
else
  goto <bb 5>; [99.96%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 858820]:
printf ("xasprintf: %s", "");
exit (1);

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 1072883005]:
return i_7;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 2 [0m
[40;34m    gimple free   count : 3 [0m
[40;34m    all ptable point : 40 [0m
[40;34m    analyzable ptable point : 37 [0m
[40;34m    analyzable ptable all point stmt : 148 [0m
[40;34m    used_stmt array stack totalsize of : 0.004200 mb[0m
[40;34m    collect time: : 0.000278 s [0m
[40;34m    mapping time: : 0.001803 s [0m
[40;34m    algorithm time: 0.004363 s [0m
[40;34m    gimple stmt count : : 122 [0m
[40;34m    this report analysis in Sun Jun 26 13:53:33 2022
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)  2157k ( 75%)
 phase opt and generate             :   0.02 (100%)   0.02 (100%)   0.04 ( 80%)   619k ( 21%)
 callgraph functions expansion      :   0.01 ( 50%)   0.02 (100%)   0.04 ( 80%)   503k ( 17%)
 tree SSA rewrite                   :   0.01 ( 50%)   0.00 (  0%)   0.00 (  0%)  3280  (  0%)
 expand                             :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)    64k (  2%)
 symout                             :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)     0  (  0%)
 plugin execution                   :   0.00 (  0%)   0.01 ( 50%)   0.00 (  0%)  2192  (  0%)
 initialize rtl                     :   0.01 ( 50%)   0.00 (  0%)   0.01 ( 20%)    12k (  0%)
 rest of compilation                :   0.00 (  0%)   0.01 ( 50%)   0.01 ( 20%)    18k (  1%)
 TOTAL                              :   0.02          0.02          0.05         2890k
