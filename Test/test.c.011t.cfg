
;; Function strlcat (strlcat, funcdef_no=39, decl_uid=3566, cgraph_uid=39, symbol_order=40)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;; 2 succs { 3 4 }
;; 3 succs { 8 }
;; 4 succs { 5 6 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 1 }
strlcat (char * restrict dst, const char * restrict src, size_t maxlen)
{
  const size_t dstlen;
  const size_t srclen;
  size_t D.3638;

  <bb 2> [0.00%]:
  srclen = strlen (src);
  _1 = strnlen (dst, maxlen);
  dstlen = (const size_t) _1;
  if (dstlen == maxlen)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  D.3638 = maxlen + srclen;
  goto <bb 8>; [0.00%]

  <bb 4> [0.00%]:
  _2 = maxlen - dstlen;
  if (srclen < _2)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  _3 = srclen + 1;
  _4 = dst + dstlen;
  memcpy (_4, src, _3);
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _5 = maxlen + 18446744073709551615;
  _6 = dst + dstlen;
  memcpy (_6, src, _5);
  _7 = dstlen + maxlen;
  _8 = _7 + 18446744073709551615;
  _9 = dst + _8;
  *_9 = 0;

  <bb 7> [0.00%]:
  D.3638 = dstlen + srclen;

  <bb 8> [0.00%]:
  return D.3638;

}



;; Function tilde_expand_filename (tilde_expand_filename, funcdef_no=40, decl_uid=3577, cgraph_uid=40, symbol_order=41)

Merging blocks 13 and 14
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13
;; 2 succs { 3 4 }
;; 3 succs { 13 }
;; 4 succs { 5 8 }
;; 5 succs { 6 7 }
;; 6 succs { }
;; 7 succs { 8 }
;; 8 succs { 9 10 }
;; 9 succs { 10 }
;; 10 succs { 11 12 }
;; 11 succs { }
;; 12 succs { 13 }
;; 13 succs { 1 }
tilde_expand_filename (const char * filename, uid_t uid)
{
  u_int slash;
  u_int len;
  struct passwd * pw;
  char ret[64];
  char user[128];
  const char * path;
  char * D.3645;

  <bb 2> [0.00%]:
  _1 = *filename;
  if (_1 != 126)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  D.3645 = strdup (filename);
  goto <bb 13>; [0.00%]

  <bb 4> [0.00%]:
  filename = filename + 1;
  path = strchr (filename, 47);
  _2 = path != 0B;
  _3 = path > filename;
  _4 = _2 & _3;
  if (_4 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 5> [0.00%]:
  path.0_5 = (long int) path;
  filename.1_6 = (long int) filename;
  _7 = path.0_5 - filename.1_6;
  slash = (u_int) _7;
  if (slash > 127)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  printf ("tilde_expand_filename: ~username too long%s\n", "");
  exit (1);

  <bb 7> [0.00%]:
  _8 = (long unsigned int) slash;
  memcpy (&user, filename, _8);
  user[slash] = 0;

  <bb 8> [0.00%]:
  if (path != 0B)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  filename = path + 1;

  <bb 10> [0.00%]:
  _9 = strlcat (&ret, filename, 64);
  if (_9 > 63)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  printf ("tilde_expand_filename: Path too long%s\n", "");
  exit (1);

  <bb 12> [0.00%]:
  D.3645 = strdup (&ret);

  <bb 13> [0.00%]:
  user = {CLOBBER};
  ret = {CLOBBER};
  return D.3645;

}



;; Function printf (<unset-asm-name>, funcdef_no=15, decl_uid=798, cgraph_uid=15, symbol_order=15)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int D.3656;

  <bb 2> [0.00%]:
  D.3656 = __printf_chk (1, __fmt, __builtin_va_arg_pack ());
  return D.3656;

}



;; Function read_keyfile_line (read_keyfile_line, funcdef_no=41, decl_uid=3594, cgraph_uid=41, symbol_order=42)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 5, latch 3
;;  depth 1, outer 0
;;  nodes: 5 3
;; 2 succs { 5 }
;; 3 succs { 4 5 }
;; 4 succs { 7 }
;; 5 succs { 3 6 }
;; 6 succs { 7 }
;; 7 succs { 1 }
read_keyfile_line (struct FILE * f, const char * filename, char * buf, size_t bufsz, u_long * lineno)
{
  static const char __func__[18] = "read_keyfile_line";
  int D.3660;

  <bb 2> [0.00%]:
  goto <bb 5>; [0.00%]

  <bb 3> [0.00%]:
  _1 = *lineno;
  _2 = _1 + 1;
  *lineno = _2;
  _3 = *lineno;
  printf ("%s: %s line %lu exceeds size limit\n", &__func__, filename, _3);
  _4 = rand ();
  _5 = _4 % 2;
  if (_5 == 1)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  D.3660 = 0;
  goto <bb 7>; [0.00%]

  <bb 5> [0.00%]:
  _6 = rand ();
  _7 = _6 % 2;
  if (_7 == 1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  D.3660 = -1;

  <bb 7> [0.00%]:
  return D.3660;

}



;; Function main (main, funcdef_no=43, decl_uid=3625, cgraph_uid=43, symbol_order=44)

Removing basic block 7
Merging blocks 5 and 6
Merging blocks 5 and 8
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
main (int argc, char * * argv)
{
  int i;
  int updating;
  struct passwd pw;
  int D.3662;

  <bb 2> [0.00%]:
  _1 = time (0B);
  _2 = (unsigned int) _1;
  srand (_2);
  i = 0;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _3 = (long unsigned int) i;
  _4 = _3 * 8;
  _5 = argv + _4;
  _6 = *_5;
  update_krl_from_file (&pw, _6);
  i = i + 1;

  <bb 4> [0.00%]:
  if (i < argc)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  D.3662 = 0;
  pw = {CLOBBER};
  return D.3662;

}



;; Function update_krl_from_file (update_krl_from_file, funcdef_no=42, decl_uid=3602, cgraph_uid=42, symbol_order=43)

Removing basic block 8
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13
;;
;; Loop 1
;;  header 10, latch 8
;;  depth 1, outer 0
;;  nodes: 10 8
;; 2 succs { 3 4 }
;; 3 succs { 6 }
;; 4 succs { 5 6 }
;; 5 succs { }
;; 6 succs { 7 10 }
;; 7 succs { 10 }
;; 8 succs { 9 10 }
;; 9 succs { }
;; 10 succs { 8 11 }
;; 11 succs { 12 13 }
;; 12 succs { 13 }
;; 13 succs { 1 }
update_krl_from_file (struct passwd * pw, const char * file)
{
  struct FILE * krl_spec;
  int r;
  int was_sha1;
  int was_explicit_key;
  int i;
  long long unsigned int serial2;
  long long unsigned int serial;
  char line[16384];
  char * ep;
  char * cp;
  char * path;
  u_long lnum;
  struct Key * key;

  <bb 2> [0.00%]:
  key = 0B;
  lnum = 0;
  _1 = pw->pw_uid;
  _2 = (unsigned int) _1;
  path = tilde_expand_filename (file, _2);
  _3 = strcmp (path, "-");
  if (_3 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  krl_spec = stdin;
  free (path);
  path = strdup ("(standard input)");
  goto <bb 6>; [0.00%]

  <bb 4> [0.00%]:
  krl_spec = fopen (path, "r");
  if (krl_spec == 0B)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  printf ("fopen %s: \n", path);
  exit (1);

  <bb 6> [0.00%]:
  quiet.2_4 = quiet;
  if (quiet.2_4 == 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 7> [0.00%]:
  printf ("Revoking from %s\n", path);
  goto <bb 10>; [0.00%]

  <bb 8> [0.00%]:
  _5 = rand ();
  _6 = _5 % 2;
  if (_6 == 1)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  printf ("%s: invalid\n", path);
  exit (1);

  <bb 10> [0.00%]:
  _7 = read_keyfile_line (krl_spec, path, &line, 16384, &lnum);
  if (_7 == 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  _8 = strcmp (path, "-");
  if (_8 != 0)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  fclose (krl_spec);

  <bb 13> [0.00%]:
  lnum = {CLOBBER};
  line = {CLOBBER};
  return;

}


