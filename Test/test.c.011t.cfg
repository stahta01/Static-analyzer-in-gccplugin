
;; Function xrealloc (xrealloc, funcdef_no=0, decl_uid=1963, cgraph_uid=0, symbol_order=0)

Merging blocks 11 and 12
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11
;; 2 succs { 3 5 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 11 }
;; 6 succs { 7 9 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 10 11 }
;; 10 succs { }
;; 11 succs { 1 }
xrealloc (void * ptr, size_t size)
{
  void * ret;
  void * D.2094;

  <bb 2> [0.00%]:
  ret = realloc (ptr, size);
  if (ret == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 3> [0.00%]:
  if (size == 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  ret = realloc (ptr, 1);

  <bb 5> [0.00%]:
  if (ret == 0B)
    goto <bb 6>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 6> [0.00%]:
  ret = realloc (ptr, size);
  if (ret == 0B)
    goto <bb 7>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 7> [0.00%]:
  if (size == 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  ret = realloc (ptr, 1);

  <bb 9> [0.00%]:
  if (ret == 0B)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  printf ("Out of memory, realloc failed%s", "");
  exit (1);

  <bb 11> [0.00%]:
  D.2094 = ret;
  return D.2094;

}



;; Function update_tree_entry (update_tree_entry, funcdef_no=2, decl_uid=1985, cgraph_uid=2, symbol_order=3)

Merging blocks 4 and 5
Merging blocks 4 and 6
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 1 }
update_tree_entry (struct tree_desc * desc)
{
  int tmp;
  struct strbuf err;

  <bb 2> [0.00%]:
  err.alloc = 0;
  err.len = 0;
  err.buf = &strbuf_slopbuf;
  tmp = update_tree_entry_internal (desc, &err);
  if (tmp != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = err.buf;
  printf ("%s", _1);
  exit (1);

  <bb 4> [0.00%]:
  strbuf_release (&err);
  err = {CLOBBER};
  return;

}



;; Function update_tree_entry_internal (update_tree_entry_internal, funcdef_no=1, decl_uid=1976, cgraph_uid=1, symbol_order=2)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 5 6 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 1 }
update_tree_entry_internal (struct tree_desc * desc, struct strbuf * err)
{
  int tmp;
  long unsigned int len;
  long unsigned int size;
  const unsigned char * end;
  const void * buf;
  int D.2104;

  <bb 2> [0.00%]:
  buf = desc->buffer;
  _1 = desc->entry.oid;
  _2 = &_1->hash;
  end = _2 + 20;
  _3 = desc->size;
  size = (long unsigned int) _3;
  end.0_4 = (long int) end;
  buf.1_5 = (long int) buf;
  _6 = end.0_4 - buf.1_5;
  len = (long unsigned int) _6;
  if (size < len)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  printf ("too-short tree file%s", buf);
  exit (1);

  <bb 4> [0.00%]:
  buf = end;
  size = size - len;
  desc->buffer = buf;
  _7 = (unsigned int) size;
  desc->size = _7;
  if (size != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  tmp = decode_tree_entry (desc, buf, size, err);
  D.2104 = tmp;
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  D.2104 = 0;

  <bb 7> [0.00%]:
  return D.2104;

}



;; Function traverse_trees (traverse_trees, funcdef_no=4, decl_uid=2006, cgraph_uid=4, symbol_order=5)

Merging blocks 8 and 9
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;;
;; Loop 2
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 1 }
traverse_trees (int n, struct tree_desc * t, struct traverse_info * info)
{
  struct name_entry * e;
  void * tmp___0;
  struct name_entry * entry;
  void * tmp;
  struct tree_desc_x * tx;
  int n___0;
  int i;
  int D.2106;

  <bb 2> [0.00%]:
  _1 = (long unsigned int) n___0;
  tmp = calloc (_1, 48);
  tx = tmp;
  _2 = (long unsigned int) n___0;
  _3 = _2 * 24;
  tmp___0 = malloc (_3);
  entry = tmp___0;
  e = 0B;
  i = 0;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _4 = (long unsigned int) i;
  _5 = _4 * 40;
  _6 = t + _5;
  _7 = (long unsigned int) i;
  _8 = _7 * 48;
  _9 = tx + _8;
  _9->d = *_6;
  i = i + 1;

  <bb 4> [0.00%]:
  if (i < n___0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  i = 0;
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _10 = (long unsigned int) i;
  _11 = _10 * 24;
  e = entry + _11;
  _12 = (long unsigned int) i;
  _13 = _12 * 48;
  _14 = tx + _13;
  extended_entry_extract (_14, e, 0B, 0);
  i = i + 1;

  <bb 7> [0.00%]:
  if (i < n___0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  free (tx);
  D.2106 = 1;
  return D.2106;

}



;; Function extended_entry_extract (extended_entry_extract, funcdef_no=3, decl_uid=1995, cgraph_uid=3, symbol_order=4)

Removing basic block 10
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10
;;
;; Loop 1
;;  header 2, latch 9
;;  depth 1, outer 0
;;  nodes: 2 9 8 5 7 4 6
;;
;; Loop 2
;;  header 7, latch 6
;;  depth 2, outer 1
;;  nodes: 7 6 5
;; 2 succs { 3 4 }
;; 3 succs { 10 }
;; 4 succs { 7 }
;; 5 succs { 8 6 }
;; 6 succs { 7 }
;; 7 succs { 5 8 }
;; 8 succs { 10 9 }
;; 9 succs { 2 }
;; 10 succs { 1 }
extended_entry_extract (struct tree_desc_x * t, struct name_entry * a, const char * first, int first_len)
{
  struct tree_desc_skip * skip;

  <bb 2> [0.00%]:
  _1 = t->d.size;
  if (_1 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  entry_clear (a);
  goto <bb 10>; [0.00%]

  <bb 4> [0.00%]:
  _2 = &t->d;
  entry_extract (_2, a);
  skip = t->skip;
  goto <bb 7>; [0.00%]

  <bb 5> [0.00%]:
  _3 = a->path;
  _4 = (long unsigned int) _3;
  _5 = skip->ptr;
  _6 = (long unsigned int) _5;
  if (_4 == _6)
    goto <bb 8>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  skip = skip->prev;

  <bb 7> [0.00%]:
  if (skip != 0B)
    goto <bb 5>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  if (skip == 0B)
    goto <bb 10>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  _7 = &t->d;
  update_tree_entry (_7);
  goto <bb 2>; [0.00%]

  <bb 10> [0.00%]:
  return;

}



;; Function unpack_trees (unpack_trees, funcdef_no=5, decl_uid=2024, cgraph_uid=5, symbol_order=6)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
unpack_trees (unsigned int len, struct tree_desc * t, struct unpack_trees_options * o)
{
  int D.2113;

  <bb 2> [0.00%]:
  len.2_1 = (int) len;
  traverse_trees (len.2_1, t, 0B);
  D.2113 = 0;
  return D.2113;

}



;; Function init_tree_desc (init_tree_desc, funcdef_no=7, decl_uid=2036, cgraph_uid=7, symbol_order=8)

Merging blocks 4 and 5
Merging blocks 4 and 6
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 1 }
init_tree_desc (struct tree_desc * desc, const void * buffer, long unsigned int size)
{
  int tmp;
  struct strbuf err;

  <bb 2> [0.00%]:
  err.alloc = 0;
  err.len = 0;
  err.buf = &strbuf_slopbuf;
  tmp = init_tree_desc_internal (desc, buffer, size, &err);
  if (tmp != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = err.buf;
  printf ("%s", _1);
  exit (1);

  <bb 4> [0.00%]:
  strbuf_release (&err);
  err = {CLOBBER};
  return;

}



;; Function init_tree_desc_internal (init_tree_desc_internal, funcdef_no=6, decl_uid=2030, cgraph_uid=6, symbol_order=7)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
init_tree_desc_internal (struct tree_desc * desc, const void * buffer, long unsigned int size, struct strbuf * err)
{
  int tmp;
  int D.2121;

  <bb 2> [0.00%]:
  desc->buffer = buffer;
  _1 = (unsigned int) size;
  desc->size = _1;
  if (size != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  tmp = decode_tree_entry (desc, buffer, size, err);
  D.2121 = tmp;
  goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  D.2121 = 0;

  <bb 5> [0.00%]:
  return D.2121;

}



;; Function fill_tree_descriptor (fill_tree_descriptor, funcdef_no=8, decl_uid=2043, cgraph_uid=8, symbol_order=9)

Merging blocks 5 and 6
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 5 }
;; 3 succs { 4 5 }
;; 4 succs { }
;; 5 succs { 1 }
fill_tree_descriptor (struct tree_desc * desc, const struct object_id * oid)
{
  int tmp;
  void * buf;
  long unsigned int size;

  <bb 2> [0.00%]:
  size = 0;
  buf = 0B;
  if (oid != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 3> [0.00%]:
  buf = malloc (100);
  if (buf == 0B)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  tmp = oid_to_hex (oid);
  printf ("unable to read tree %s", tmp);
  exit (1);

  <bb 5> [0.00%]:
  init_tree_desc (desc, buf, size);
  return;

}



;; Function main (main, funcdef_no=10, decl_uid=2076, cgraph_uid=10, symbol_order=11)

Removing basic block 4
Merging blocks 2 and 3
Merging blocks 2 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
main ()
{
  int quiet;
  int type;
  struct object_id oid;
  int D.2128;

  <bb 2> [0.00%]:
  reset_index (&oid, type, quiet);
  D.2128 = 0;
  oid = {CLOBBER};
  return D.2128;

}



;; Function reset_index (reset_index, funcdef_no=9, decl_uid=2058, cgraph_uid=9, symbol_order=10)

Merging blocks 19 and 20
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 7 6 5 }
;; 5 succs { 8 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 9 12 }
;; 9 succs { 10 11 }
;; 10 succs { 19 }
;; 11 succs { 12 }
;; 12 succs { 13 14 }
;; 13 succs { 19 }
;; 14 succs { 15 16 }
;; 15 succs { 18 }
;; 16 succs { 17 18 }
;; 17 succs { 18 }
;; 18 succs { 19 }
;; 19 succs { 1 }
reset_index (const struct object_id * oid, int reset_type, int quiet)
{
  int tmp___3;
  int tmp___2;
  int tmp___1;
  int tmp___0;
  int tmp;
  struct object_id head_oid;
  struct unpack_trees_options opts;
  struct tree * tree;
  struct tree_desc desc[2];
  int nr;
  int D.2137;

  <bb 2> [0.00%]:
  nr = 0;
  memset (&opts, 0, 640);
  opts.head_idx = 1;
  opts.src_index = &the_index;
  opts.dst_index = &the_index;
  opts.fn = oneway_merge;
  opts.merge = 1;
  if (quiet == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  opts.verbose_update = 1;

  <bb 4> [0.00%]:
  switch (reset_type) <default: <L5> [0.00%], case 2: <L4> [0.00%], case 3 ... 4: <L2> [0.00%]>

<L2> [0.00%]:
  opts.update = 1;
  goto <bb 8>; [0.00%]

<L4> [0.00%]:
  opts.update = 1;

<L5> [0.00%]:
  opts.reset = 1;

  <bb 8> [0.00%]:
  read_cache_unmerged ();
  if (reset_type == 4)
    goto <bb 9>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 9> [0.00%]:
  tmp___1 = get_oid ("HEAD", &head_oid);
  if (tmp___1 != 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  tmp = _ ("You do not have a valid HEAD.");
  tmp___0 = error (tmp);
  D.2137 = tmp___0;
  goto <bb 19>; [0.00%]

  <bb 11> [0.00%]:
  _1 = (long unsigned int) nr;
  _2 = _1 * 40;
  _3 = &desc + _2;
  fill_tree_descriptor (_3, &head_oid);
  nr = nr + 1;
  opts.fn = twoway_merge;

  <bb 12> [0.00%]:
  _4 = (long unsigned int) nr;
  _5 = _4 * 40;
  _6 = &desc + _5;
  fill_tree_descriptor (_6, oid);
  nr = nr + 1;
  _7 = desc[nr].buffer;
  printf ("%d\n", _7);
  nr.3_8 = (unsigned int) nr;
  tmp___2 = unpack_trees (nr.3_8, &desc, &opts);
  if (tmp___2 != 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  D.2137 = -1;
  goto <bb 19>; [0.00%]

  <bb 14> [0.00%]:
  if (reset_type == 0)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 15> [0.00%]:
  tmp___3 = parse_tree_indirect (oid);
  _9 = (long int) tmp___3;
  tree = (struct tree *) _9;
  prime_cache_tree (&the_index, tree);
  goto <bb 18>; [0.00%]

  <bb 16> [0.00%]:
  if (reset_type == 2)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  tmp___3 = parse_tree_indirect (oid);
  _10 = (long int) tmp___3;
  tree = (struct tree *) _10;
  prime_cache_tree (&the_index, tree);

  <bb 18> [0.00%]:
  D.2137 = 0;

  <bb 19> [0.00%]:
  desc = {CLOBBER};
  opts = {CLOBBER};
  head_oid = {CLOBBER};
  return D.2137;

}


