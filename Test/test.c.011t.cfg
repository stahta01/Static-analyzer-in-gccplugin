
;; Function xrealloc (xrealloc, funcdef_no=43, decl_uid=3279, cgraph_uid=43, symbol_order=44)

Merging blocks 9 and 10
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 9 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 8 9 }
;; 8 succs { }
;; 9 succs { 1 }
xrealloc (void * ptr, size_t size)
{
  void * ret;
  void * D.3435;

  <bb 2> [0.00%]:
  ret = realloc (ptr, size);
  _1 = ret == 0B;
  _2 = size == 0;
  _3 = _1 & _2;
  if (_3 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  ret = realloc (ptr, 1);

  <bb 4> [0.00%]:
  if (ret == 0B)
    goto <bb 5>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 5> [0.00%]:
  ret = realloc (ptr, size);
  _4 = ret == 0B;
  _5 = size == 0;
  _6 = _4 & _5;
  if (_6 != 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  ret = realloc (ptr, 1);

  <bb 7> [0.00%]:
  if (ret == 0B)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  printf ("Out of memory, realloc failed%s", "");
  exit (1);

  <bb 9> [0.00%]:
  D.3435 = ret;
  return D.3435;

}



;; Function printf (<unset-asm-name>, funcdef_no=15, decl_uid=798, cgraph_uid=15, symbol_order=15)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int D.3437;

  <bb 2> [0.00%]:
  D.3437 = __printf_chk (1, __fmt, __builtin_va_arg_pack ());
  return D.3437;

}



;; Function commit_list_insert (commit_list_insert, funcdef_no=44, decl_uid=3284, cgraph_uid=44, symbol_order=45)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
commit_list_insert (struct commit * item, struct commit_list * * list_p)
{
  struct commit_list * new_list;
  struct commit_list * D.3439;

  <bb 2> [0.00%]:
  new_list = malloc (16);
  new_list->item = item;
  _1 = *list_p;
  new_list->next = _1;
  *list_p = new_list;
  D.3439 = new_list;
  return D.3439;

}



;; Function reduce_heads (reduce_heads, funcdef_no=46, decl_uid=3331, cgraph_uid=46, symbol_order=47)

Merging blocks 22 and 23
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
;;
;; Loop 4
;;  header 20, latch 19
;;  depth 1, outer 0
;;  nodes: 20 19
;;
;; Loop 3
;;  header 17, latch 16
;;  depth 1, outer 0
;;  nodes: 17 16 14 15
;;
;; Loop 2
;;  header 12, latch 11
;;  depth 1, outer 0
;;  nodes: 12 11 9 10 8
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;; 2 succs { 3 4 }
;; 3 succs { 22 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 12 }
;; 8 succs { 9 10 }
;; 9 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 12 }
;; 12 succs { 8 13 }
;; 13 succs { 17 }
;; 14 succs { 15 16 }
;; 15 succs { 16 }
;; 16 succs { 17 }
;; 17 succs { 14 18 }
;; 18 succs { 20 }
;; 19 succs { 20 }
;; 20 succs { 19 21 }
;; 21 succs { 22 }
;; 22 succs { 1 }
reduce_heads (struct commit_list * heads)
{
  int i;
  int num_head;
  struct commit * * array;
  struct commit_list * * tail;
  struct commit_list * result;
  struct commit_list * p;
  struct commit_list * D.3443;

  <bb 2> [0.00%]:
  result = 0B;
  tail = &result;
  if (heads == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  D.3443 = 0B;
  goto <bb 22>; [0.00%]

  <bb 4> [0.00%]:
  p = heads;
  goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  _1 = p->item;
  _2 = _1->object.flags;
  _3 = p->item;
  _4 = _2 & 133955583;
  _3->object.flags = _4;
  p = p->next;

  <bb 6> [0.00%]:
  if (p != 0B)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  p = heads;
  num_head = 0;
  goto <bb 12>; [0.00%]

  <bb 8> [0.00%]:
  _5 = p->item;
  _6 = _5->object.flags;
  _7 = (unsigned int) _6;
  _8 = _7 & 262144;
  if (_8 != 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  _9 = p->item;
  _10 = _9->object.flags;
  _11 = p->item;
  _12 = _10 | 262144;
  _11->object.flags = _12;
  num_head = num_head + 1;

  <bb 11> [0.00%]:
  p = p->next;

  <bb 12> [0.00%]:
  if (p != 0B)
    goto <bb 8>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [0.00%]:
  _13 = (long unsigned int) num_head;
  array = calloc (_13, 8);
  p = heads;
  i = 0;
  goto <bb 17>; [0.00%]

  <bb 14> [0.00%]:
  _14 = p->item;
  _15 = _14->object.flags;
  _16 = (unsigned int) _15;
  _17 = _16 & 262144;
  if (_17 != 0)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 15> [0.00%]:
  i.0_18 = i;
  i = i.0_18 + 1;
  _19 = (long unsigned int) i.0_18;
  _20 = _19 * 8;
  _21 = array + _20;
  _22 = p->item;
  *_21 = _22;
  _23 = p->item;
  _24 = _23->object.flags;
  _25 = p->item;
  _26 = _24 & 133955583;
  _25->object.flags = _26;

  <bb 16> [0.00%]:
  p = p->next;

  <bb 17> [0.00%]:
  if (p != 0B)
    goto <bb 14>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 18> [0.00%]:
  num_head = remove_redundant (array, num_head);
  i = 0;
  goto <bb 20>; [0.00%]

  <bb 19> [0.00%]:
  _27 = (long unsigned int) i;
  _28 = _27 * 8;
  _29 = array + _28;
  _30 = *_29;
  _31 = commit_list_insert (_30, tail);
  tail = &_31->next;
  i = i + 1;

  <bb 20> [0.00%]:
  if (i < num_head)
    goto <bb 19>; [0.00%]
  else
    goto <bb 21>; [0.00%]

  <bb 21> [0.00%]:
  free (array);
  D.3443 = result;

  <bb 22> [0.00%]:
  result = {CLOBBER};
  return D.3443;

}



;; Function remove_redundant (remove_redundant, funcdef_no=45, decl_uid=3289, cgraph_uid=45, symbol_order=46)

Merging blocks 38 and 39
;; 8 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38
;;
;; Loop 4
;;  header 37, latch 36
;;  depth 1, outer 0
;;  nodes: 37 36 34 35
;;
;; Loop 3
;;  header 32, latch 31
;;  depth 1, outer 0
;;  nodes: 32 31 29 30
;;
;; Loop 2
;;  header 27, latch 26
;;  depth 1, outer 0
;;  nodes: 27 26 7 25 24 22 23 21 17 20 18 19 15 16 14 8 13 11 12 10 9 6
;;
;; Loop 7
;;  header 24, latch 23
;;  depth 2, outer 2
;;  nodes: 24 23
;;
;; Loop 6
;;  header 21, latch 20
;;  depth 2, outer 2
;;  nodes: 21 20 18 19
;;
;; Loop 5
;;  header 14, latch 13
;;  depth 2, outer 2
;;  nodes: 14 13 11 12 10 9
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 27 }
;; 6 succs { 7 8 }
;; 7 succs { 26 }
;; 8 succs { 14 }
;; 9 succs { 11 10 }
;; 10 succs { 11 12 }
;; 11 succs { 13 }
;; 12 succs { 13 }
;; 13 succs { 14 }
;; 14 succs { 9 15 }
;; 15 succs { 16 17 }
;; 16 succs { 17 }
;; 17 succs { 21 }
;; 18 succs { 19 20 }
;; 19 succs { 20 }
;; 20 succs { 21 }
;; 21 succs { 18 22 }
;; 22 succs { 24 }
;; 23 succs { 24 }
;; 24 succs { 23 25 }
;; 25 succs { 26 }
;; 26 succs { 27 }
;; 27 succs { 6 28 }
;; 28 succs { 32 }
;; 29 succs { 30 31 }
;; 30 succs { 31 }
;; 31 succs { 32 }
;; 32 succs { 29 33 }
;; 33 succs { 37 }
;; 34 succs { 35 36 }
;; 35 succs { 36 }
;; 36 succs { 37 }
;; 37 succs { 34 38 }
;; 38 succs { 1 }
remove_redundant (struct commit * * array, int cnt)
{
  struct commit_list * common;
  int filled;
  int j;
  int i;
  int * filled_index;
  unsigned char * redundant;
  struct commit * * work;
  int D.3463;

  <bb 2> [0.00%]:
  _1 = (long unsigned int) cnt;
  work = calloc (_1, 8);
  _2 = (long unsigned int) cnt;
  redundant = calloc (_2, 1);
  _3 = cnt + -1;
  _4 = st_mult (4, _3);
  _5 = (long unsigned int) _4;
  filled_index = malloc (_5);
  i = 0;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _6 = (long unsigned int) i;
  _7 = _6 * 8;
  _8 = array + _7;
  _9 = *_8;
  parse_commit (_9);
  i = i + 1;

  <bb 4> [0.00%]:
  if (i < cnt)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  i = 0;
  goto <bb 27>; [0.00%]

  <bb 6> [0.00%]:
  _10 = (sizetype) i;
  _11 = redundant + _10;
  _12 = *_11;
  if (_12 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 26>; [0.00%]

  <bb 8> [0.00%]:
  filled = 0;
  j = filled;
  goto <bb 14>; [0.00%]

  <bb 9> [0.00%]:
  if (i == j)
    goto <bb 11>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  _13 = (sizetype) j;
  _14 = redundant + _13;
  _15 = *_14;
  if (_15 != 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  _16 = (long unsigned int) filled;
  _17 = _16 * 4;
  _18 = filled_index + _17;
  *_18 = j;
  _19 = (long unsigned int) j;
  _20 = _19 * 8;
  _21 = array + _20;
  filled.1_22 = filled;
  filled = filled.1_22 + 1;
  _23 = (long unsigned int) filled.1_22;
  _24 = _23 * 8;
  _25 = work + _24;
  _26 = *_21;
  *_25 = _26;

  <bb 13> [0.00%]:
  j = j + 1;

  <bb 14> [0.00%]:
  if (j < cnt)
    goto <bb 9>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 15> [0.00%]:
  _27 = (long unsigned int) i;
  _28 = _27 * 8;
  _29 = array + _28;
  _30 = *_29;
  _31 = paint_down_to_common (_30, filled, work);
  _32 = (long int) _31;
  common = (struct commit_list *) _32;
  _33 = (long unsigned int) i;
  _34 = _33 * 8;
  _35 = array + _34;
  _36 = *_35;
  _37 = _36->object.flags;
  _38 = (unsigned int) _37;
  _39 = _38 & 131072;
  if (_39 != 0)
    goto <bb 16>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 16> [0.00%]:
  _40 = (sizetype) i;
  _41 = redundant + _40;
  *_41 = 1;

  <bb 17> [0.00%]:
  j = 0;
  goto <bb 21>; [0.00%]

  <bb 18> [0.00%]:
  _42 = (long unsigned int) j;
  _43 = _42 * 8;
  _44 = work + _43;
  _45 = *_44;
  _46 = _45->object.flags;
  _47 = (unsigned int) _46;
  _48 = _47 & 65536;
  if (_48 != 0)
    goto <bb 19>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 19> [0.00%]:
  _49 = (long unsigned int) j;
  _50 = _49 * 4;
  _51 = filled_index + _50;
  _52 = *_51;
  _53 = (sizetype) _52;
  _54 = redundant + _53;
  *_54 = 1;

  <bb 20> [0.00%]:
  j = j + 1;

  <bb 21> [0.00%]:
  if (j < filled)
    goto <bb 18>; [0.00%]
  else
    goto <bb 22>; [0.00%]

  <bb 22> [0.00%]:
  all_flags.2_55 = 983040;
  _56 = (long unsigned int) i;
  _57 = _56 * 8;
  _58 = array + _57;
  _59 = *_58;
  clear_commit_marks (_59, all_flags.2_55);
  j = 0;
  goto <bb 24>; [0.00%]

  <bb 23> [0.00%]:
  all_flags.3_60 = 983040;
  _61 = (long unsigned int) j;
  _62 = _61 * 8;
  _63 = work + _62;
  _64 = *_63;
  clear_commit_marks (_64, all_flags.3_60);
  j = j + 1;

  <bb 24> [0.00%]:
  if (j < filled)
    goto <bb 23>; [0.00%]
  else
    goto <bb 25>; [0.00%]

  <bb 25> [0.00%]:
  free_commit_list (common);

  <bb 26> [0.00%]:
  i = i + 1;

  <bb 27> [0.00%]:
  if (i < cnt)
    goto <bb 6>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 28> [0.00%]:
  _65 = (long unsigned int) cnt;
  copy_array (work, array, _65, 8);
  filled = 0;
  i = filled;
  goto <bb 32>; [0.00%]

  <bb 29> [0.00%]:
  _66 = (sizetype) i;
  _67 = redundant + _66;
  _68 = *_67;
  if (_68 == 0)
    goto <bb 30>; [0.00%]
  else
    goto <bb 31>; [0.00%]

  <bb 30> [0.00%]:
  _69 = (long unsigned int) i;
  _70 = _69 * 8;
  _71 = work + _70;
  filled.4_72 = filled;
  filled = filled.4_72 + 1;
  _73 = (long unsigned int) filled.4_72;
  _74 = _73 * 8;
  _75 = array + _74;
  _76 = *_71;
  *_75 = _76;

  <bb 31> [0.00%]:
  i = i + 1;

  <bb 32> [0.00%]:
  if (i < cnt)
    goto <bb 29>; [0.00%]
  else
    goto <bb 33>; [0.00%]

  <bb 33> [0.00%]:
  j = filled;
  i = 0;
  goto <bb 37>; [0.00%]

  <bb 34> [0.00%]:
  _77 = (sizetype) i;
  _78 = redundant + _77;
  _79 = *_78;
  if (_79 != 0)
    goto <bb 35>; [0.00%]
  else
    goto <bb 36>; [0.00%]

  <bb 35> [0.00%]:
  _80 = (long unsigned int) i;
  _81 = _80 * 8;
  _82 = work + _81;
  j.5_83 = j;
  j = j.5_83 + 1;
  _84 = (long unsigned int) j.5_83;
  _85 = _84 * 8;
  _86 = array + _85;
  _87 = *_82;
  *_86 = _87;

  <bb 36> [0.00%]:
  i = i + 1;

  <bb 37> [0.00%]:
  if (i < cnt)
    goto <bb 34>; [0.00%]
  else
    goto <bb 38>; [0.00%]

  <bb 38> [0.00%]:
  free (work);
  free (redundant);
  free (filled_index);
  D.3463 = filled;
  return D.3463;

}



;; Function copy_array (copy_array, funcdef_no=39, decl_uid=3056, cgraph_uid=39, symbol_order=40)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
copy_array (void * dst, const void * src, size_t n, size_t size)
{
  <bb 2> [0.00%]:
  if (n != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = st_mult (size, n);
  _2 = (long unsigned int) _1;
  memcpy (dst, src, _2);

  <bb 4> [0.00%]:
  return;

}



;; Function main (main, funcdef_no=49, decl_uid=3414, cgraph_uid=49, symbol_order=50)

Removing basic block 7
Merging blocks 5 and 6
Merging blocks 5 and 8
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
main ()
{
  int i;
  struct commit_list * list;
  struct rev_info revs;
  struct object_id head;
  struct strbuf in;
  struct merge_parents result;
  int D.3467;

  <bb 2> [0.00%]:
  i = 0;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  commit_list_insert (0B, &list);
  i = i + 1;

  <bb 4> [0.00%]:
  if (i <= 9)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  list.6_1 = list;
  _2 = list.6_1->item;
  mark_redundant_parents (&revs, _2);
  list.7_3 = list;
  free_commit_list (list.7_3);
  find_merge_parents (&result, &in, &head);
  D.3467 = 0;
  result = {CLOBBER};
  in = {CLOBBER};
  head = {CLOBBER};
  revs = {CLOBBER};
  list = {CLOBBER};
  return D.3467;

}



;; Function mark_redundant_parents (mark_redundant_parents, funcdef_no=48, decl_uid=3399, cgraph_uid=48, symbol_order=49)

Merging blocks 12 and 13
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12
;;
;; Loop 1
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7 5 6 3 4
;; 2 succs { 8 }
;; 3 succs { 4 6 }
;; 4 succs { 5 6 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 3 9 }
;; 9 succs { 11 10 }
;; 10 succs { 11 12 }
;; 11 succs { }
;; 12 succs { 1 }
mark_redundant_parents (struct rev_info * revs, struct commit * commit)
{
  int cnt;
  int orig_cnt;
  struct commit_list * pn;
  struct commit_list * po;
  int marked;
  int i;
  struct commit_list * h;
  int D.3477;

  <bb 2> [0.00%]:
  _1 = commit->parents;
  h = reduce_heads (_1);
  i = 0;
  marked = 0;
  _2 = commit->parents;
  orig_cnt = commit_list_count (_2);
  cnt = commit_list_count (h);
  po = commit->parents;
  pn = h;
  goto <bb 8>; [0.00%]

  <bb 3> [0.00%]:
  if (pn != 0B)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 4> [0.00%]:
  _3 = po->item;
  _4 = pn->item;
  if (_3 == _4)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  pn = pn->next;
  i = i + 1;
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _5 = po->item;
  _6 = _5->object.flags;
  _7 = po->item;
  _8 = _6 | 16;
  _7->object.flags = _8;
  marked = marked + 1;

  <bb 7> [0.00%]:
  po = po->next;

  <bb 8> [0.00%]:
  if (po != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  if (i != cnt)
    goto <bb 11>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  _9 = cnt + marked;
  if (orig_cnt != _9)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  printf ("mark_redundant_parents %d", orig_cnt);
  exit (1);

  <bb 12> [0.00%]:
  free_commit_list (h);
  D.3477 = marked;
  return D.3477;

}



;; Function find_merge_parents (find_merge_parents, funcdef_no=47, decl_uid=3355, cgraph_uid=47, symbol_order=48)

;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
;;
;; Loop 3
;;  header 31, latch 30
;;  depth 1, outer 0
;;  nodes: 31 30 26 29 27 28
;;
;; Loop 2
;;  header 24, latch 23
;;  depth 1, outer 0
;;  nodes: 24 23 19 22 20 21
;;
;; Loop 4
;;  header 23, latch 22
;;  depth 2, outer 2
;;  nodes: 23 22 20 21
;;
;; Loop 1
;;  header 15, multiple latches: 13 14
;;  depth 1, outer 0
;;  nodes: 15 13 14 10 12 11 9 8 7 6 4 5 3
;; 2 succs { 15 }
;; 3 succs { 4 5 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 10 7 }
;; 7 succs { 10 8 }
;; 8 succs { 10 9 }
;; 9 succs { 10 11 }
;; 10 succs { 14 }
;; 11 succs { 12 13 }
;; 12 succs { 14 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 3 16 }
;; 16 succs { 17 18 }
;; 17 succs { 18 }
;; 18 succs { 24 }
;; 19 succs { 23 }
;; 20 succs { 21 22 }
;; 21 succs { 22 }
;; 22 succs { 23 }
;; 23 succs { 20 24 }
;; 24 succs { 19 25 }
;; 25 succs { 31 }
;; 26 succs { 27 30 }
;; 27 succs { 28 29 }
;; 28 succs { 29 }
;; 29 succs { 30 }
;; 30 succs { 31 }
;; 31 succs { 26 32 }
;; 32 succs { 1 }
find_merge_parents (struct merge_parents * result, struct strbuf * in, struct object_id * head)
{
  struct commit * cmit;
  struct object * obj;
  struct commit * parent;
  struct object_id oid;
  char * newline;
  char * p;
  int len;
  int j;
  int i;
  int pos;
  struct commit * head_commit;
  struct commit_list * parents;
  int iftmp.8;

  <bb 2> [0.00%]:
  pos = 0;
  parents = 0B;
  goto <bb 15>; [0.00%]

  <bb 3> [0.00%]:
  _1 = in->buf;
  _2 = (sizetype) pos;
  p = _1 + _2;
  newline = strchr (p, 10);
  if (newline != 0B)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  newline.9_3 = (long int) newline;
  p.10_4 = (long int) p;
  _5 = newline.9_3 - p.10_4;
  iftmp.8 = (int) _5;
  goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  _6 = strlen (p);
  iftmp.8 = (int) _6;

  <bb 6> [0.00%]:
  len = iftmp.8;
  _7 = newline != 0B;
  _8 = (int) _7;
  _9 = len + _8;
  pos = pos + _9;
  if (len <= 42)
    goto <bb 10>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  _10 = get_oid_hex (p, &oid);
  if (_10 != 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  _11 = p + 40;
  _12 = *_11;
  if (_12 != 9)
    goto <bb 10>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  _13 = p + 41;
  _14 = *_13;
  if (_14 != 9)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 14>; [0.00%]

  <bb 11> [0.00%]:
  _15 = parse_object (&oid);
  _16 = (long int) _15;
  obj = (struct object *) _16;
  _17 = peel_to_type (0B, 0, obj, 1);
  _18 = (long int) _17;
  parent = (struct commit *) _18;
  if (parent == 0B)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  commit_list_insert (parent, &parents);
  _19 = &parent->object.oid;
  _20 = &obj->oid;
  add_merge_parent (result, _20, _19);
  oid = {CLOBBER};
  goto <bb 15>; [0.00%]

  <bb 14> [0.00%]:
  oid = {CLOBBER};

  <bb 15> [0.00%]:
  _21 = (long unsigned int) pos;
  _22 = in->len;
  if (_21 < _22)
    goto <bb 3>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 16> [0.00%]:
  _23 = lookup_commit (head);
  _24 = (long int) _23;
  head_commit = (struct commit *) _24;
  if (head_commit != 0B)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  commit_list_insert (head_commit, &parents);

  <bb 18> [0.00%]:
  parents.11_25 = parents;
  _26 = reduce_heads (parents.11_25);
  parents = _26;
  goto <bb 24>; [0.00%]

  <bb 19> [0.00%]:
  _27 = pop_commit (&parents);
  _28 = (long int) _27;
  cmit = (struct commit *) _28;
  i = 0;
  goto <bb 23>; [0.00%]

  <bb 20> [0.00%]:
  _29 = &cmit->object.oid;
  _30 = result->item;
  _31 = (long unsigned int) i;
  _32 = _31 * 41;
  _33 = _30 + _32;
  _34 = &_33->commit;
  _35 = oidcmp (_34, _29);
  if (_35 == 0)
    goto <bb 21>; [0.00%]
  else
    goto <bb 22>; [0.00%]

  <bb 21> [0.00%]:
  _36 = result->item;
  _37 = (long unsigned int) i;
  _38 = _37 * 41;
  _39 = _36 + _38;
  _39->used = 1;

  <bb 22> [0.00%]:
  i = i + 1;

  <bb 23> [0.00%]:
  _40 = result->nr;
  if (i < _40)
    goto <bb 20>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 24> [0.00%]:
  parents.12_41 = parents;
  if (parents.12_41 != 0B)
    goto <bb 19>; [0.00%]
  else
    goto <bb 25>; [0.00%]

  <bb 25> [0.00%]:
  j = 0;
  i = j;
  goto <bb 31>; [0.00%]

  <bb 26> [0.00%]:
  _42 = result->item;
  _43 = (long unsigned int) i;
  _44 = _43 * 41;
  _45 = _42 + _44;
  _46 = _45->used;
  if (_46 != 0)
    goto <bb 27>; [0.00%]
  else
    goto <bb 30>; [0.00%]

  <bb 27> [0.00%]:
  if (i != j)
    goto <bb 28>; [0.00%]
  else
    goto <bb 29>; [0.00%]

  <bb 28> [0.00%]:
  _47 = result->item;
  _48 = (long unsigned int) i;
  _49 = _48 * 41;
  _50 = _47 + _49;
  _51 = result->item;
  _52 = (long unsigned int) j;
  _53 = _52 * 41;
  _54 = _51 + _53;
  *_54 = *_50;

  <bb 29> [0.00%]:
  j = j + 1;

  <bb 30> [0.00%]:
  i = i + 1;

  <bb 31> [0.00%]:
  _55 = result->nr;
  if (i < _55)
    goto <bb 26>; [0.00%]
  else
    goto <bb 32>; [0.00%]

  <bb 32> [0.00%]:
  result->nr = j;
  parents = {CLOBBER};
  return;

}


