
;; Function foo (foo, funcdef_no=0, decl_uid=3987, cgraph_uid=2, symbol_order=56) (executed once)



 local analysis of foo
   scanning: p2_3 = malloc (1);
  scanning: return p2_3;
Function is locally looping.
__attribute__((noinline))
foo (int z)
{
  int * p2;

  <bb 2> [100.00%]:
  p2_3 = malloc (1);
  return p2_3;

}



;; Function child (child, funcdef_no=1, decl_uid=3986, cgraph_uid=1, symbol_order=57) (executed once)



 local analysis of child
   scanning: pthread_mutex_lock (&mLock);
  scanning: ppData_10 = malloc (10);
  scanning: _1 = malloc (20);
  scanning: pData = _1;
  scanning: a_14 = foo (1);
  scanning: data2 = 0;
  scanning: pData = &data2;
  scanning: data2 = 10;
  scanning: _3 = MEM[(int * *)&pData + 8B];
    Indirect ref read is not const
  scanning: *_3 = 10;
    Indirect ref write is not const/pure
  scanning: _4 = MEM[(int * *)&pData + 16B];
    Indirect ref read is not const
  scanning: *_4 = 10;
    Indirect ref write is not const/pure
  scanning: data2 = 12;
  scanning: free (&data2);
  scanning: free (&pData);
  scanning: pthread_exit (0B);
Function is locally looping.
Function is locally pure.
Function can locally free.
child (void * data)
{
  int data2;
  int * a;
  int * pData;
  int * * ppData;
  void * _1;
  int * _3;
  int * _4;

  <bb 2> [100.00%]:
  pthread_mutex_lock (&mLock);
  ppData_10 = malloc (10);
  _1 = malloc (20);
  pData = _1;
  a_14 = foo (1);
  data2 = 0;
  pData = &data2;
  data2 = 10;
  _3 = MEM[(int * *)&pData + 8B];
  *_3 = 10;
  _4 = MEM[(int * *)&pData + 16B];
  *_4 = 10;
  data2 = 12;
  free (&data2);
  free (&pData);
  pthread_exit (0B);

}



;; Function main (main, funcdef_no=2, decl_uid=3985, cgraph_uid=0, symbol_order=62) (executed once)



 local analysis of main
   scanning: q_4 = malloc (5);
  scanning: pthread_mutex_destroy (&mLock);
  scanning: pthread_create (&t, 0B, child, &buff);
  scanning: _1 = t;
  scanning: pthread_join (_1, 0B);
  scanning: pthread_mutex_destroy (&mLock);
  scanning: return 0;
Function is locally looping.
main ()
{
  pthread_t t;
  int * q;
  char buff[50];
  long unsigned int _1;

  <bb 2> [100.00%]:
  q_4 = malloc (5);
  pthread_mutex_destroy (&mLock);
  pthread_create (&t, 0B, child, &buff);
  _1 = t;
  pthread_join (_1, 0B);
  pthread_mutex_destroy (&mLock);
  buff ={v} {CLOBBER};
  t ={v} {CLOBBER};
  return 0;

}


