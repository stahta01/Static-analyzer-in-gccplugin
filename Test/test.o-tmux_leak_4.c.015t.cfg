
;; Function strlcpy (strlcpy, funcdef_no=22, decl_uid=4095, cgraph_uid=23, symbol_order=22)

Removing basic block 9
Merging blocks 11 and 12
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10
;;
;; Loop 2
;;  header 9, latch 9
;;  depth 1, outer 0
;;  nodes: 9
;;
;; Loop 1
;;  header 4, latch 5
;;  depth 1, outer 0
;;  nodes: 4 5
;; 2 succs { 3 6 }
;; 3 succs { 4 6 }
;; 4 succs { 6 5 }
;; 5 succs { 4 6 }
;; 6 succs { 7 10 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 9 10 }
;; 10 succs { 1 }
size_t strlcpy (char * dst, const char * src, size_t siz)
{
  size_t n;
  const char * s;
  char * d;
  size_t D.4153;

  <bb 2> :
  d = dst;
  s = src;
  n = siz;
  if (n != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  n = n + 18446744073709551615;
  if (n != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  s.0_1 = s;
  s = s.0_1 + 1;
  d.1_2 = d;
  d = d.1_2 + 1;
  _3 = *s.0_1;
  *d.1_2 = _3;
  _4 = *d.1_2;
  if (_4 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  n = n + 18446744073709551615;
  if (n != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (n == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  if (siz != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  *d = 0;

  <bb 9> :
  s.2_5 = s;
  s = s.2_5 + 1;
  _6 = *s.2_5;
  if (_6 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _7 = s - src;
  _8 = _7 + -1;
  D.4153 = (size_t) _8;
  return D.4153;

}



;; Function vasprintf (vasprintf, funcdef_no=23, decl_uid=4109, cgraph_uid=24, symbol_order=23)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
int vasprintf (char * * ret, const char * fmt, char * ap)
{
  int D.4157;

  <bb 2> :
  _1 = strlen (fmt);
  _2 = strlen (ap);
  _3 = _1 + _2;
  _4 = malloc (_3);
  *ret = _4;
  _5 = *ret;
  if (_5 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.4157 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  D.4157 = 0;

  <bb 5> :
  return D.4157;

}



;; Function xasprintf (xasprintf, funcdef_no=24, decl_uid=4115, cgraph_uid=25, symbol_order=24)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
int xasprintf (char * * ret, const char * fmt, char * ap)
{
  int i;
  int D.4159;

  <bb 2> :
  i = xvasprintf (ret, fmt, ap);
  D.4159 = i;
  return D.4159;

}



;; Function xvasprintf (xvasprintf, funcdef_no=25, decl_uid=4118, cgraph_uid=26, symbol_order=25)

Merging blocks 5 and 6
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 4 3 }
;; 3 succs { 4 5 }
;; 4 succs { }
;; 5 succs { 1 }
int xvasprintf (char * * ret, const char * fmt, char * ap)
{
  int i;
  int D.4164;

  <bb 2> :
  i = vasprintf (ret, fmt, ap);
  if (i < 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _1 = *ret;
  if (_1 == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _2 = __errno_location ();
  _3 = *_2;
  _4 = strerror (_3);
  printf ("xasprintf: %s", _4);
  exit (1);

  <bb 5> :
  D.4164 = i;
  return D.4164;

}



;; Function main (main, funcdef_no=27, decl_uid=4141, cgraph_uid=28, symbol_order=27)

Removing basic block 3
Merging blocks 2 and 4
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
int main ()
{
  int D.4166;

  <bb 2> :
  make_label ("label");
  D.4166 = 0;
  return D.4166;

}



;; Function make_label (make_label, funcdef_no=26, decl_uid=4129, cgraph_uid=27, symbol_order=26)

Merging blocks 21 and 22
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 7 }
;; 5 succs { 6 7 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 9 11 }
;; 9 succs { 10 11 }
;; 10 succs { 20 }
;; 11 succs { 12 13 }
;; 12 succs { 20 }
;; 13 succs { 14 15 }
;; 14 succs { 20 }
;; 15 succs { 16 17 }
;; 16 succs { 20 }
;; 17 succs { 18 19 }
;; 18 succs { 19 }
;; 19 succs { 21 }
;; 20 succs { 21 }
;; 21 succs { 1 }
char * make_label (const char * label)
{
  int saved_errno;
  uid_t uid;
  struct stat sb;
  char * s;
  char * path;
  char resolved[4096];
  char * base;
  char * D.4186;

  <bb 2> :
  if (label == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  label = "default";

  <bb 4> :
  _1 = getuid ();
  uid = (uid_t) _1;
  s = getenv ("TMUX_TMPDIR");
  if (s != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _2 = *s;
  if (_2 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  xasprintf (&base, "%s/tmux-", s);
  goto <bb 8>; [INV]

  <bb 7> :
  xasprintf (&base, "%s/tmux-", "/tmp");

  <bb 8> :
  base.3_3 = base;
  _4 = mkdir (base.3_3, 0);
  if (_4 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _5 = __errno_location ();
  _6 = *_5;
  if (_6 != 17)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  // predicted unlikely by goto predictor.
  goto <bb 20>; [INV]

  <bb 11> :
  base.4_7 = base;
  _8 = lstat (base.4_7, &sb);
  if (_8 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  // predicted unlikely by goto predictor.
  goto <bb 20>; [INV]

  <bb 13> :
  _9 = sb.st_mode;
  _10 = _9 & 61440;
  if (_10 != 16384)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _11 = __errno_location ();
  *_11 = 20;
  // predicted unlikely by goto predictor.
  goto <bb 20>; [INV]

  <bb 15> :
  _12 = sb.st_uid;
  if (uid != _12)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  _13 = __errno_location ();
  *_13 = 13;
  // predicted unlikely by goto predictor.
  goto <bb 20>; [INV]

  <bb 17> :
  base.5_14 = base;
  _15 = realpath (base.5_14, &resolved);
  if (_15 == 0B)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  base.6_16 = base;
  strlcpy (&resolved, base.6_16, 4096);

  <bb 19> :
  D.4186 = path;
  goto <bb 21>; [INV]

  <bb 20> :
fail:
  _17 = __errno_location ();
  saved_errno = *_17;
  base.7_18 = base;
  free (base.7_18);
  _19 = __errno_location ();
  *_19 = saved_errno;
  D.4186 = 0B;

  <bb 21> :
  base = {CLOBBER};
  resolved = {CLOBBER};
  sb = {CLOBBER};
  return D.4186;

}


