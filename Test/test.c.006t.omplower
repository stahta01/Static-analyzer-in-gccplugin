
;; Function discard_cleanups (discard_cleanups, funcdef_no=45, decl_uid=3162, cgraph_uid=45, symbol_order=50)

discard_cleanups (struct cleanup * old_chain)
{
  discard_my_cleanups (&cleanup_chain, old_chain);
}



;; Function discard_final_cleanups (discard_final_cleanups, funcdef_no=46, decl_uid=3167, cgraph_uid=46, symbol_order=51)

discard_final_cleanups (struct cleanup * old_chain)
{
  discard_my_cleanups (&final_cleanup_chain, old_chain);
}



;; Function discard_my_cleanups (discard_my_cleanups, funcdef_no=47, decl_uid=3165, cgraph_uid=47, symbol_order=52)

discard_my_cleanups (struct cleanup * * pmy_chain, struct cleanup * old_chain)
{
  struct cleanup * ptr;

  goto <D.3198>;
  <D.3197>:
  _1 = ptr->next;
  *pmy_chain = _1;
  _2 = ptr->free_arg;
  if (_2 != 0B) goto <D.3321>; else goto <D.3322>;
  <D.3321>:
  _3 = ptr->free_arg;
  _4 = ptr->arg;
  _3 (_4);
  <D.3322>:
  free (ptr);
  <D.3198>:
  ptr = *pmy_chain;
  if (ptr != old_chain) goto <D.3197>; else goto <D.3199>;
  <D.3199>:
  _5 = ptr->arg;
  printf ("freearg: %x\n", _5);
}



;; Function printf (<unset-asm-name>, funcdef_no=15, decl_uid=798, cgraph_uid=15, symbol_order=15)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int D.3323;

  D.3323 = __printf_chk (1, __fmt, __builtin_va_arg_pack ());
  return D.3323;
}



;; Function do_cleanups (do_cleanups, funcdef_no=49, decl_uid=3172, cgraph_uid=49, symbol_order=54)

do_cleanups (struct cleanup * old_chain)
{
  do_my_cleanups (&cleanup_chain, old_chain);
}



;; Function do_my_cleanups (do_my_cleanups, funcdef_no=48, decl_uid=3170, cgraph_uid=48, symbol_order=53)

do_my_cleanups (struct cleanup * * pmy_chain, struct cleanup * old_chain)
{
  struct cleanup * ptr;

  goto <D.3206>;
  <D.3205>:
  _1 = ptr->next;
  *pmy_chain = _1;
  _2 = ptr->function;
  _3 = ptr->arg;
  _2 (_3);
  printf ("cleanup!!!!! =========\n");
  _4 = ptr->arg;
  printf ("%x\n", _4);
  _5 = ptr->free_arg;
  if (_5 != 0B) goto <D.3325>; else goto <D.3326>;
  <D.3325>:
  _6 = ptr->free_arg;
  _7 = ptr->arg;
  _6 (_7);
  <D.3326>:
  free (ptr);
  <D.3206>:
  ptr = *pmy_chain;
  if (ptr != old_chain) goto <D.3205>; else goto <D.3207>;
  <D.3207>:
}



;; Function make_cleanup (make_cleanup, funcdef_no=52, decl_uid=3185, cgraph_uid=52, symbol_order=57)

make_cleanup (void (*<Ta1d>) (void *) function, void * arg)
{
  struct cleanup * D.3327;

  D.3327 = make_my_cleanup (&cleanup_chain, function, arg);
  return D.3327;
}



;; Function make_my_cleanup (make_my_cleanup, funcdef_no=51, decl_uid=3182, cgraph_uid=51, symbol_order=56)

make_my_cleanup (struct cleanup * * pmy_chain, void (*<Ta1d>) (void *) function, void * arg)
{
  struct cleanup * D.3329;

  D.3329 = make_my_cleanup2 (pmy_chain, function, arg, 0B);
  return D.3329;
}



;; Function make_my_cleanup2 (make_my_cleanup2, funcdef_no=50, decl_uid=3178, cgraph_uid=50, symbol_order=55)

make_my_cleanup2 (struct cleanup * * pmy_chain, void (*<Ta1d>) (void *) function, void * arg, void (*<Ted>) (void *) free_arg)
{
  struct cleanup * D.3333;
  struct cleanup * new;
  struct cleanup * old_chain;

  new = malloc (32);
  old_chain = *pmy_chain;
  _1 = *pmy_chain;
  new->next = _1;
  new->function = function;
  new->free_arg = free_arg;
  new->arg = arg;
  *pmy_chain = new;
  if (old_chain == 0B) goto <D.3331>; else goto <D.3332>;
  <D.3331>:
  exit (1);
  <D.3332>:
  D.3333 = old_chain;
  return D.3333;
}



;; Function newentry (newentry, funcdef_no=53, decl_uid=3247, cgraph_uid=53, symbol_order=60)

newentry (char * word)
{
  struct dict_type * D.3335;
  struct dict_type * new_d;

  new_d = malloc (40);
  new_d->word = word;
  root.0_1 = root;
  new_d->next = root.0_1;
  root = new_d;
  _2 = malloc (8);
  new_d->code = _2;
  new_d->code_length = 1;
  new_d->code_end = 0;
  D.3335 = new_d;
  return D.3335;
}



;; Function add_var (add_var, funcdef_no=54, decl_uid=3250, cgraph_uid=54, symbol_order=61)

add_var (char * name)
{
  struct dict_type * new_d;

  new_d = newentry (name);
}



;; Function add_to_definition (add_to_definition, funcdef_no=55, decl_uid=3254, cgraph_uid=55, symbol_order=62)

add_to_definition (struct dict_type * entry, void (*stinst_type) () word)
{
  unsigned int D.3339;

  _1 = entry->code_end;
  _2 = entry->code_length;
  if (_1 == _2) goto <D.3337>; else goto <D.3338>;
  <D.3337>:
  _3 = entry->code_length;
  _4 = _3 + 2;
  entry->code_length = _4;
  _5 = entry->code_length;
  _6 = (long unsigned int) _5;
  _7 = _6 * 8;
  _8 = entry->code;
  _9 = realloc (_8, _7);
  entry->code = _9;
  <D.3338>:
  _10 = entry->code;
  _11 = entry->code_end;
  _12 = (long unsigned int) _11;
  _13 = _12 * 8;
  _14 = _10 + _13;
  *_14 = word;
  _15 = entry->code_end;
  _16 = _15;
  _17 = _16 + 1;
  entry->code_end = _17;
  D.3339 = (unsigned int) _16;
  return D.3339;
}



;; Function nextword (nextword, funcdef_no=56, decl_uid=3258, cgraph_uid=56, symbol_order=63)

nextword (char * string, char * * word)
{
  char * D.3343;
  char D.3346;
  char * word_start;
  int idx;
  char * dst;
  char * src;
  int length;

  length = 0;
  if (string == 0B) goto <D.3341>; else goto <D.3342>;
  <D.3341>:
  D.3343 = 0B;
  return D.3343;
  <D.3342>:
  {
    extern int isspace ();

    goto <D.3271>;
    <D.3270>:
    _1 = *string;
    if (_1 == 45) goto <D.3344>; else goto <D.3345>;
    <D.3344>:
    goto <D.3268>;
    <D.3267>:
    string = string + 1;
    <D.3268>:
    D.3346 = *string;
    _2 = D.3346 != 0;
    _3 = D.3346 != 10;
    _4 = _2 & _3;
    if (_4 != 0) goto <D.3267>; else goto <D.3269>;
    <D.3269>:
    goto <D.3347>;
    <D.3345>:
    string = string + 1;
    <D.3347>:
    <D.3271>:
    _5 = *string;
    _6 = (unsigned char) _5;
    _7 = (int) _6;
    _8 = isspace (_7);
    if (_8 != 0) goto <D.3270>; else goto <D.3348>;
    <D.3348>:
    _9 = *string;
    if (_9 == 45) goto <D.3270>; else goto <D.3272>;
    <D.3272>:
  }
  _10 = *string;
  if (_10 == 0) goto <D.3349>; else goto <D.3350>;
  <D.3349>:
  D.3343 = 0B;
  return D.3343;
  <D.3350>:
  word_start = string;
  _11 = *string;
  if (_11 == 34) goto <D.3351>; else goto <D.3352>;
  <D.3351>:
  <D.3274>:
  string = string + 1;
  length = length + 1;
  _12 = *string;
  if (_12 == 92) goto <D.3353>; else goto <D.3354>;
  <D.3353>:
  string = string + 2;
  length = length + 2;
  <D.3354>:
  _13 = *string;
  if (_13 != 34) goto <D.3274>; else goto <D.3275>;
  <D.3275>:
  goto <D.3355>;
  <D.3352>:
  {
    extern int isspace ();

    goto <D.3277>;
    <D.3276>:
    string = string + 1;
    length = length + 1;
    <D.3277>:
    _14 = *string;
    _15 = (unsigned char) _14;
    _16 = (int) _15;
    _17 = isspace (_16);
    if (_17 == 0) goto <D.3276>; else goto <D.3278>;
    <D.3278>:
  }
  <D.3355>:
  _18 = length + 1;
  _19 = (long unsigned int) _18;
  _20 = malloc (_19);
  *word = _20;
  dst = *word;
  src = word_start;
  idx = 0;
  goto <D.3286>;
  <D.3285>:
  _21 = (sizetype) idx;
  _22 = src + _21;
  _23 = *_22;
  if (_23 == 92) goto <D.3356>; else goto <D.3357>;
  <D.3356>:
  _24 = (sizetype) idx;
  _25 = _24 + 1;
  _26 = src + _25;
  _27 = *_26;
  _28 = (int) _27;
  switch (_28) <default: <D.3284>, case 34: <D.3282>, case 92: <D.3283>, case 110: <D.3280>>
  <D.3280>:
  dst.1_29 = dst;
  dst = dst.1_29 + 1;
  *dst.1_29 = 10;
  idx = idx + 1;
  goto <D.3281>;
  <D.3282>:
  <D.3283>:
  _30 = (sizetype) idx;
  _31 = _30 + 1;
  _32 = src + _31;
  dst.2_33 = dst;
  dst = dst.2_33 + 1;
  _34 = *_32;
  *dst.2_33 = _34;
  idx = idx + 1;
  goto <D.3281>;
  <D.3284>:
  dst.3_35 = dst;
  dst = dst.3_35 + 1;
  *dst.3_35 = 92;
  goto <D.3281>;
  <D.3281>:
  goto <D.3358>;
  <D.3357>:
  _36 = (sizetype) idx;
  _37 = src + _36;
  dst.4_38 = dst;
  dst = dst.4_38 + 1;
  _39 = *_37;
  *dst.4_38 = _39;
  <D.3358>:
  idx = idx + 1;
  <D.3286>:
  if (idx < length) goto <D.3285>; else goto <D.3287>;
  <D.3287>:
  dst.5_40 = dst;
  dst = dst.5_40 + 1;
  *dst.5_40 = 0;
  _41 = *string;
  if (_41 != 0) goto <D.3359>; else goto <D.3360>;
  <D.3359>:
  D.3343 = string + 1;
  return D.3343;
  <D.3360>:
  D.3343 = 0B;
  return D.3343;
}



;; Function compile (compile, funcdef_no=57, decl_uid=3289, cgraph_uid=57, symbol_order=64)

compile (char * string)
{
  char * word;

  try
    {
      string = nextword (string, &word);
      goto <D.3311>;
      <D.3310>:
      printf ("string: %s\n", string);
      {
        extern int strcmp ();

        word.6_1 = word;
        _2 = strcmp (word.6_1, "var");
        if (_2 == 0) goto <D.3362>; else goto <D.3363>;
        <D.3362>:
        string = nextword (string, &word);
        word.7_3 = word;
        add_var (word.7_3);
        string = nextword (string, &word);
        goto <D.3364>;
        <D.3363>:
        word.8_4 = word;
        _5 = *word.8_4;
        if (_5 == 58) goto <D.3365>; else goto <D.3366>;
        <D.3365>:
        {
          struct dict_type * ptr;

          word.9_6 = word;
          free (word.9_6);
          string = nextword (string, &word);
          word.10_7 = word;
          ptr = newentry (word.10_7);
          string = nextword (string, &word);
          goto <D.3308>;
          <D.3307>:
          word.11_8 = word;
          _9 = *word.11_8;
          _10 = (int) _9;
          switch (_10) <default: <D.3305>, case 34: <D.3293>, case 48: <D.3295>, case 49: <D.3296>, case 50: <D.3297>, case 51: <D.3298>, case 52: <D.3299>, case 53: <D.3300>, case 54: <D.3301>, case 55: <D.3302>, case 56: <D.3303>, case 57: <D.3304>>
          <D.3293>:
          word.12_11 = word;
          _12 = word.12_11 + 1;
          _13 = (void (*<T1d2>) ()) _12;
          add_to_definition (ptr, _13);
          goto <D.3294>;
          <D.3295>:
          <D.3296>:
          <D.3297>:
          <D.3298>:
          <D.3299>:
          <D.3300>:
          <D.3301>:
          <D.3302>:
          <D.3303>:
          <D.3304>:
          _14 = MEM[(int *)ptr];
          printf ("%d\n", _14);
          word.13_15 = word;
          free (word.13_15);
          goto <D.3294>;
          <D.3305>:
          _16 = MEM[(int *)ptr];
          printf ("%d\n", _16);
          word.14_17 = word;
          free (word.14_17);
          <D.3294>:
          string = nextword (string, &word);
          if (string == 0B) goto <D.3306>; else goto <D.3367>;
          <D.3367>:
          <D.3308>:
          word.15_18 = word;
          _19 = *word.15_18;
          if (_19 != 59) goto <D.3307>; else goto <D.3306>;
          <D.3306>:
          _20 = MEM[(int *)ptr];
          printf ("%d\n", _20);
          string = nextword (string, &word);
        }
        goto <D.3368>;
        <D.3366>:
        _21 = string + 18446744073709551615;
        stderr.16_22 = stderr;
        fprintf (stderr.16_22, "syntax error at %s\n", _21);
        <D.3368>:
        <D.3364>:
      }
      <D.3311>:
      if (string != 0B) goto <D.3369>; else goto <D.3312>;
      <D.3369>:
      _23 = *string;
      if (_23 != 0) goto <D.3370>; else goto <D.3312>;
      <D.3370>:
      word.17_24 = word;
      _25 = *word.17_24;
      if (_25 != 0) goto <D.3310>; else goto <D.3312>;
      <D.3312>:
    }
  finally
    {
      word = {CLOBBER};
    }
}



;; Function fprintf (<unset-asm-name>, funcdef_no=14, decl_uid=776, cgraph_uid=14, symbol_order=14)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
fprintf (struct FILE * restrict __stream, const char * restrict __fmt)
{
  int D.3371;

  D.3371 = __fprintf_chk (__stream, 1, __fmt, __builtin_va_arg_pack ());
  return D.3371;
}



;; Function main (main, funcdef_no=58, decl_uid=3313, cgraph_uid=58, symbol_order=65)

main ()
{
  int D.3373;

  {
    struct dict_type * dict;
    char * string;

    string = "var second : stored_in_dict 5 ; : next";
    compile (string);
    dict = root;
    goto <D.3318>;
    <D.3317>:
    _1 = dict->word;
    printf ("%s\n", _1);
    _2 = dict->word;
    free (_2);
    dict = dict->next;
    <D.3318>:
    if (dict != 0B) goto <D.3317>; else goto <D.3319>;
    <D.3319>:
  }
  D.3373 = 0;
  return D.3373;
}


