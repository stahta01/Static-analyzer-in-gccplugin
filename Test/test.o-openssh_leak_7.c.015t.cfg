
;; Function ASN1_item_new (ASN1_item_new, funcdef_no=22, decl_uid=3495, cgraph_uid=23, symbol_order=25)

Removing basic block 13
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
;;
;; Loop 1
;;  header 12, latch 11
;;  depth 1, outer 0
;;  nodes: 12 11 9
;; 2 succs { 13 3 6 }
;; 3 succs { 4 5 }
;; 4 succs { 14 }
;; 5 succs { 13 }
;; 6 succs { 7 8 }
;; 7 succs { 14 }
;; 8 succs { 12 }
;; 9 succs { 10 11 }
;; 10 succs { 14 }
;; 11 succs { 12 }
;; 12 succs { 9 13 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 1 }
int ASN1_item_new (ASN1_VALUE * * pval, struct ASN1_ITEM * it)
{
  struct ASN1_TEMPLATE * tt;
  ASN1_VALUE * pseqval;
  int i;
  int D.3531;

  <bb 2> :
  tt = it->templates;
  _1 = it->itype;
  _2 = (int) _1;
  switch (_2) <default: <L11> [INV], case 0: <L0> [INV], case 1: <L3> [INV]>

  <bb 3> :
<L0>:
  _3 = it->size;
  _4 = (long unsigned int) _3;
  _5 = malloc (_4);
  *pval = _5;
  _6 = *pval;
  if (_6 == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  // predicted unlikely by goto predictor.
  goto <bb 14>; [INV]

  <bb 5> :
  _7 = it->size;
  _8 = (long unsigned int) _7;
  _9 = *pval;
  memset (_9, 0, _8);
  goto <bb 13>; [INV]

  <bb 6> :
<L3>:
  _10 = it->size;
  _11 = (long unsigned int) _10;
  _12 = malloc (_11);
  *pval = _12;
  _13 = *pval;
  if (_13 == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  // predicted unlikely by goto predictor.
  goto <bb 14>; [INV]

  <bb 8> :
  _14 = it->size;
  _15 = (long unsigned int) _14;
  _16 = *pval;
  memset (_16, 0, _15);
  i = 0;
  tt = it->templates;
  goto <bb 12>; [INV]

  <bb 9> :
  _17 = *pval;
  _18 = tt->offset;
  pseqval = _17 + _18;
  _19 = tt->item;
  _20 = ASN1_item_new (pseqval, _19);
  if (_20 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  // predicted unlikely by goto predictor.
  goto <bb 14>; [INV]

  <bb 11> :
  tt = tt + 40;
  i = i + 1;

  <bb 12> :
  _21 = (long int) i;
  _22 = it->tcount;
  if (_21 < _22)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
<L11>:
  D.3531 = 1;
  goto <bb 15>; [INV]

  <bb 14> :
memerr:
  __builtin_puts (&"ASN1_ITEM_new ERROR"[0]);
  D.3531 = 0;

  <bb 15> :
  return D.3531;

}



;; Function ECDSA_SIG_new (ECDSA_SIG_new, funcdef_no=23, decl_uid=3510, cgraph_uid=24, symbol_order=26)

Merging blocks 2 and 3
Merging blocks 2 and 4
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
struct ECDSA_SIG * ECDSA_SIG_new ()
{
  struct ECDSA_SIG * ret;
  struct ECDSA_SIG * D.3533;

  <bb 2> :
  ASN1_item_new (&ret, &ECDSA_SIG_it);
  D.3533 = ret;
  ret = {CLOBBER};
  return D.3533;

}



;; Function ECDSA_SIG_free (ECDSA_SIG_free, funcdef_no=24, decl_uid=3514, cgraph_uid=25, symbol_order=27)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void ECDSA_SIG_free (struct ECDSA_SIG * p)
{
  <bb 2> :
  _1 = p->r;
  free (_1);
  _2 = p->s;
  free (_2);
  free (p);
  return;

}



;; Function BN_new (BN_new, funcdef_no=25, decl_uid=3517, cgraph_uid=26, symbol_order=28)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
struct BIGNUM * BN_new ()
{
  struct BIGNUM * D.3536;

  <bb 2> :
  D.3536 = malloc (24);
  return D.3536;

}



;; Function main (main, funcdef_no=26, decl_uid=3519, cgraph_uid=27, symbol_order=29)

Removing basic block 8
Merging blocks 7 and 9
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 6 5 }
;; 5 succs { 6 7 }
;; 6 succs { }
;; 7 succs { 1 }
int main ()
{
  static const char __func__[5] = "main";
  struct ECDSA_SIG * sig;
  int D.3543;

  <bb 2> :
  sig = ECDSA_SIG_new ();
  if (sig == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  printf ("%s: ECDSA_SIG_new failed", &__func__);
  exit (1);

  <bb 4> :
  _1 = BN_new ();
  sig->r = _1;
  _2 = sig->r;
  if (_2 == 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _3 = BN_new ();
  sig->s = _3;
  _4 = sig->s;
  if (_4 == 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  printf ("%s: BN_new failed", &__func__);
  exit (1);

  <bb 7> :
  ECDSA_SIG_free (sig);
  D.3543 = 0;
  return D.3543;

}


