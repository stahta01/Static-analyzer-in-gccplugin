__attribute__((noinline))
foo3 (int * z)
{
  _1 = malloc (1);
  _2 = (long int) _1;
  _3 = (int) _2;
  *z = _3;
}


__attribute__((noinline))
foo2 (int z)
{
  int * D.4347;
  int * a2;

  _1 = (long unsigned int) z;
  a2 = malloc (_1);
  D.4347 = a2;
  return D.4347;
}


foo4 (int z)
{
  int * D.4349;
  int * b;
  int * p2;

  try
    {
      _1 = malloc (1);
      b = _1;
      p2 = malloc (1);
      b.0_2 = b;
      *b.0_2 = 2;
      *p2 = 1;
      p2 = &b;
      free (p2);
      D.4349 = p2;
      return D.4349;
    }
  finally
    {
      b = {CLOBBER};
    }
}


__attribute__((noinline))
foo (int z)
{
  int * D.4352;
  int * p2;

  p2 = malloc (1);
  D.4352 = p2;
  return D.4352;
}


child (void * data)
{
  int * * ppData;
  int * pData;
  int data2;

  try
    {
      pthread_mutex_lock (&mLock);
      ppData = malloc (10);
      _1 = malloc (20);
      pData = _1;
      data2 = 0;
      ppData = &pData;
      pData = &data2;
      _2 = *ppData;
      *_2 = 10;
      _3 = ppData + 8;
      _4 = *_3;
      *_4 = 10;
      _5 = ppData + 16;
      _6 = *_5;
      *_6 = 10;
      _7 = *ppData;
      *_7 = 10;
      pData.1_8 = pData;
      free (pData.1_8);
      free (ppData);
      pthread_mutex_unlock (&mLock);
      pthread_exit (0B);
    }
  finally
    {
      pData = {CLOBBER};
      data2 = {CLOBBER};
    }
}


boo (int * b)
{
  free (b);
  printf ("asdda\n");
}


__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int D.4354;

  D.4354 = __printf_chk (1, __fmt, __builtin_va_arg_pack ());
  return D.4354;
}


main ()
{
  int D.4356;

  {
    int * p;
    int * p2;

    p = foo (2);
    p2 = foo (2);
    free (p);
    free (p2);
    D.4356 = 0;
    return D.4356;
  }
  D.4356 = 0;
  return D.4356;
}


