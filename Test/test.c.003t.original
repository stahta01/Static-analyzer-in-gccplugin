
;; Function atoi (null)
;; enabled by -tree-original


{
  return (int) strtol (__nptr, 0B, 10);
}


;; Function atol (null)
;; enabled by -tree-original


{
  return strtol (__nptr, 0B, 10);
}


;; Function atoll (null)
;; enabled by -tree-original


{
  return strtoll (__nptr, 0B, 10);
}


;; Function __bswap_16 (null)
;; enabled by -tree-original


{
  return (__uint16_t) __builtin_bswap16 ((int) __bsx);
}


;; Function __bswap_32 (null)
;; enabled by -tree-original


{
  return (__uint32_t) __builtin_bswap32 (__bsx);
}


;; Function __bswap_64 (null)
;; enabled by -tree-original


{
  return (__uint64_t) __builtin_bswap64 (__bsx);
}


;; Function __uint16_identity (null)
;; enabled by -tree-original


{
  return __x;
}


;; Function __uint32_identity (null)
;; enabled by -tree-original


{
  return __x;
}


;; Function __uint64_identity (null)
;; enabled by -tree-original


{
  return __x;
}


;; Function bsearch (null)
;; enabled by -tree-original


{
  size_t __l;
  size_t __u;
  size_t __idx;
  const void * __p;
  int __comparison;

    size_t __l;
    size_t __u;
    size_t __idx;
    const void * __p;
    int __comparison;
  __l = 0;
  __u = __nmemb;
  goto <D.2300>;
  <D.2299>:;
  __idx = (__l + __u) / 2;
  __p = __base + (sizetype) (__idx * __size);
  __comparison = __compar (__key, __p);
  if (__comparison < 0)
    {
      __u = __idx;
    }
  else
    {
      if (__comparison > 0)
        {
          __l = __idx + 1;
        }
      else
        {
          return (void *) __p;
        }
    }
  <D.2300>:;
  if (__l < __u) goto <D.2299>; else goto <D.2301>;
  <D.2301>:;
  return 0B;
}


;; Function atof (null)
;; enabled by -tree-original


{
  return strtod (__nptr, 0B);
}


;; Function realpath (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __resolved, 1) != 18446744073709551615)
    {
      return __realpath_chk (__name, __resolved, __builtin_object_size ((const void *) __resolved, 1));
    }
  return __realpath_alias (__name, __resolved);
}


;; Function ptsname_r (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__buflen) == 0)
        {
          return __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size ((const void *) __buf, 1));
        }
      if (__builtin_object_size ((const void *) __buf, 1) < (long unsigned int) __buflen)
        {
          return __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size ((const void *) __buf, 1));
        }
    }
  return __ptsname_r_alias (__fd, __buf, __buflen);
}


;; Function wctomb (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __s, 1) != 18446744073709551615 && __builtin_object_size ((const void *) __s, 1) <= 15)
    {
      return __wctomb_chk (__s, __wchar, __builtin_object_size ((const void *) __s, 1));
    }
  return __wctomb_alias (__s, __wchar);
}


;; Function mbstowcs (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __dst, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__len) == 0)
        {
          return __mbstowcs_chk (__dst, __src, __len, __builtin_object_size ((const void *) __dst, 1) / 4);
        }
      if (__builtin_object_size ((const void *) __dst, 1) / 4 < (long unsigned int) __len)
        {
          return __mbstowcs_chk_warn (__dst, __src, __len, __builtin_object_size ((const void *) __dst, 1) / 4);
        }
    }
  return __mbstowcs_alias (__dst, __src, __len);
}


;; Function wcstombs (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __dst, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__len) == 0)
        {
          return __wcstombs_chk (__dst, __src, __len, __builtin_object_size ((const void *) __dst, 1));
        }
      if (__builtin_object_size ((const void *) __dst, 1) < (long unsigned int) __len)
        {
          return __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size ((const void *) __dst, 1));
        }
    }
  return __wcstombs_alias (__dst, __src, __len);
}


;; Function getchar (null)
;; enabled by -tree-original


{
  return getc (stdin);
}


;; Function fgetc_unlocked (null)
;; enabled by -tree-original


{
  return __builtin_expect (__fp->_IO_read_ptr >= __fp->_IO_read_end, 0) != 0 ? __uflow (__fp) : (int) *(unsigned char *) __fp->_IO_read_ptr++ ;
}


;; Function getc_unlocked (null)
;; enabled by -tree-original


{
  return __builtin_expect (__fp->_IO_read_ptr >= __fp->_IO_read_end, 0) != 0 ? __uflow (__fp) : (int) *(unsigned char *) __fp->_IO_read_ptr++ ;
}


;; Function getchar_unlocked (null)
;; enabled by -tree-original


{
  return __builtin_expect (stdin->_IO_read_ptr >= stdin->_IO_read_end, 0) != 0 ? __uflow (stdin) : (int) *(unsigned char *) stdin->_IO_read_ptr++ ;
}


;; Function putchar (null)
;; enabled by -tree-original


{
  return putc (__c, stdout);
}


;; Function fputc_unlocked (null)
;; enabled by -tree-original


{
  return __builtin_expect (__stream->_IO_write_ptr >= __stream->_IO_write_end, 0) != 0 ? __overflow (__stream, (int) (unsigned char) __c) : (int) (unsigned char) (*__stream->_IO_write_ptr++  = (char) __c);
}


;; Function putc_unlocked (null)
;; enabled by -tree-original


{
  return __builtin_expect (__stream->_IO_write_ptr >= __stream->_IO_write_end, 0) != 0 ? __overflow (__stream, (int) (unsigned char) __c) : (int) (unsigned char) (*__stream->_IO_write_ptr++  = (char) __c);
}


;; Function putchar_unlocked (null)
;; enabled by -tree-original


{
  return __builtin_expect (stdout->_IO_write_ptr >= stdout->_IO_write_end, 0) != 0 ? __overflow (stdout, (int) (unsigned char) __c) : (int) (unsigned char) (*stdout->_IO_write_ptr++  = (char) __c);
}


;; Function feof_unlocked (null)
;; enabled by -tree-original


{
  return (__stream->_flags & 16) != 0;
}


;; Function ferror_unlocked (null)
;; enabled by -tree-original


{
  return (__stream->_flags & 32) != 0;
}


;; Function sprintf (null)
;; enabled by -tree-original


{
  return __builtin___sprintf_chk (__s, 1, __builtin_object_size ((const void *) __s, 1), __fmt, __builtin_va_arg_pack ());
}


;; Function vsprintf (null)
;; enabled by -tree-original


{
  return __builtin___vsprintf_chk (__s, 1, __builtin_object_size ((const void *) __s, 1), __fmt, __ap);
}


;; Function snprintf (null)
;; enabled by -tree-original


{
  return __builtin___snprintf_chk (__s, __n, 1, __builtin_object_size ((const void *) __s, 1), __fmt, __builtin_va_arg_pack ());
}


;; Function vsnprintf (null)
;; enabled by -tree-original


{
  return __builtin___vsnprintf_chk (__s, __n, 1, __builtin_object_size ((const void *) __s, 1), __fmt, __ap);
}


;; Function fprintf (null)
;; enabled by -tree-original


{
  return __fprintf_chk (__stream, 1, __fmt, __builtin_va_arg_pack ());
}


;; Function printf (null)
;; enabled by -tree-original


{
  return __printf_chk (1, __fmt, __builtin_va_arg_pack ());
}


;; Function vprintf (null)
;; enabled by -tree-original


{
  return __vfprintf_chk (stdout, 1, __fmt, __ap);
}


;; Function vfprintf (null)
;; enabled by -tree-original


{
  return __vfprintf_chk (__stream, 1, __fmt, __ap);
}


;; Function dprintf (null)
;; enabled by -tree-original


{
  return __dprintf_chk (__fd, 1, __fmt, __builtin_va_arg_pack ());
}


;; Function vdprintf (null)
;; enabled by -tree-original


{
  return __vdprintf_chk (__fd, 1, __fmt, __ap);
}


;; Function fgets (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __s, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__n) == 0 || __n <= 0)
        {
          return __fgets_chk (__s, __builtin_object_size ((const void *) __s, 1), __n, __stream);
        }
      if ((long unsigned int) __n > __builtin_object_size ((const void *) __s, 1))
        {
          return __fgets_chk_warn (__s, __builtin_object_size ((const void *) __s, 1), __n, __stream);
        }
    }
  return __fgets_alias (__s, __n, __stream);
}


;; Function fread (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __ptr, 0) != 18446744073709551615)
    {
      if ((__builtin_constant_p (__size) == 0 || __builtin_constant_p (__n) == 0) || (__size | __n) > 4294967295)
        {
          return __fread_chk (__ptr, __builtin_object_size ((const void *) __ptr, 0), __size, __n, __stream);
        }
      if ((long unsigned int) (__size * __n) > __builtin_object_size ((const void *) __ptr, 0))
        {
          return __fread_chk_warn (__ptr, __builtin_object_size ((const void *) __ptr, 0), __size, __n, __stream);
        }
    }
  return __fread_alias (__ptr, __size, __n, __stream);
}


;; Function fread_unlocked (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __ptr, 0) != 18446744073709551615)
    {
      if ((__builtin_constant_p (__size) == 0 || __builtin_constant_p (__n) == 0) || (__size | __n) > 4294967295)
        {
          return __fread_unlocked_chk (__ptr, __builtin_object_size ((const void *) __ptr, 0), __size, __n, __stream);
        }
      if ((long unsigned int) (__size * __n) > __builtin_object_size ((const void *) __ptr, 0))
        {
          return __fread_unlocked_chk_warn (__ptr, __builtin_object_size ((const void *) __ptr, 0), __size, __n, __stream);
        }
    }
  if (((__builtin_constant_p (__size) != 0 && __builtin_constant_p (__n) != 0) && (__size | __n) <= 4294967295) && __size * __n <= 8)
    {
      {
        size_t __cnt = __size * __n;
        char * __cptr = (char *) __ptr;

                size_t __cnt = __size * __n;
                char * __cptr = (char *) __ptr;
        if (__cnt == 0)
          {
            return 0;
          }
        goto <D.3008>;
        <D.3007>:;
        {
          int __c = getc_unlocked (__stream);

                    int __c = getc_unlocked (__stream);
          if (__c == -1)
            {
              goto <D.3006>;
            }
          *__cptr++  = (char) __c;
        }
         --__cnt;
        <D.3008>:;
        if (__cnt != 0) goto <D.3007>; else goto <D.3006>;
        <D.3006>:;
        return (size_t) ((long unsigned int) ((long int) __cptr - (long int) __ptr) / (long unsigned int) __size);
      }
    }
  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
}


;; Function pthread_equal (null)
;; enabled by -tree-original


{
  return __thread1 == __thread2;
}


;; Function read (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __buf, 0) != 18446744073709551615)
    {
      if (__builtin_constant_p (__nbytes) == 0)
        {
          return __read_chk (__fd, __buf, __nbytes, __builtin_object_size ((const void *) __buf, 0));
        }
      if (__builtin_object_size ((const void *) __buf, 0) < (long unsigned int) __nbytes)
        {
          return __read_chk_warn (__fd, __buf, __nbytes, __builtin_object_size ((const void *) __buf, 0));
        }
    }
  return __read_alias (__fd, __buf, __nbytes);
}


;; Function readlink (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__len) == 0)
        {
          return __readlink_chk (__path, __buf, __len, __builtin_object_size ((const void *) __buf, 1));
        }
      if (__builtin_object_size ((const void *) __buf, 1) < (long unsigned int) __len)
        {
          return __readlink_chk_warn (__path, __buf, __len, __builtin_object_size ((const void *) __buf, 1));
        }
    }
  return __readlink_alias (__path, __buf, __len);
}


;; Function readlinkat (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__len) == 0)
        {
          return __readlinkat_chk (__fd, __path, __buf, __len, __builtin_object_size ((const void *) __buf, 1));
        }
      if (__builtin_object_size ((const void *) __buf, 1) < (long unsigned int) __len)
        {
          return __readlinkat_chk_warn (__fd, __path, __buf, __len, __builtin_object_size ((const void *) __buf, 1));
        }
    }
  return __readlinkat_alias (__fd, __path, __buf, __len);
}


;; Function getcwd (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__size) == 0)
        {
          return __getcwd_chk (__buf, __size, __builtin_object_size ((const void *) __buf, 1));
        }
      if (__builtin_object_size ((const void *) __buf, 1) < (long unsigned int) __size)
        {
          return __getcwd_chk_warn (__buf, __size, __builtin_object_size ((const void *) __buf, 1));
        }
    }
  return __getcwd_alias (__buf, __size);
}


;; Function getwd (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      return __getwd_chk (__buf, __builtin_object_size ((const void *) __buf, 1));
    }
  return __getwd_warn (__buf);
}


;; Function confstr (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__len) == 0)
        {
          return __confstr_chk (__name, __buf, __len, __builtin_object_size ((const void *) __buf, 1));
        }
      if (__builtin_object_size ((const void *) __buf, 1) < (long unsigned int) __len)
        {
          return __confstr_chk_warn (__name, __buf, __len, __builtin_object_size ((const void *) __buf, 1));
        }
    }
  return __confstr_alias (__name, __buf, __len);
}


;; Function getgroups (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __list, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__size) == 0 || __size < 0)
        {
          return __getgroups_chk (__size, __list, __builtin_object_size ((const void *) __list, 1));
        }
      if ((long unsigned int) __size * 4 > __builtin_object_size ((const void *) __list, 1))
        {
          return __getgroups_chk_warn (__size, __list, __builtin_object_size ((const void *) __list, 1));
        }
    }
  return __getgroups_alias (__size, __list);
}


;; Function ttyname_r (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__buflen) == 0)
        {
          return __ttyname_r_chk (__fd, __buf, __buflen, __builtin_object_size ((const void *) __buf, 1));
        }
      if (__builtin_object_size ((const void *) __buf, 1) < (long unsigned int) __buflen)
        {
          return __ttyname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size ((const void *) __buf, 1));
        }
    }
  return __ttyname_r_alias (__fd, __buf, __buflen);
}


;; Function getlogin_r (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__buflen) == 0)
        {
          return __getlogin_r_chk (__buf, __buflen, __builtin_object_size ((const void *) __buf, 1));
        }
      if (__builtin_object_size ((const void *) __buf, 1) < (long unsigned int) __buflen)
        {
          return __getlogin_r_chk_warn (__buf, __buflen, __builtin_object_size ((const void *) __buf, 1));
        }
    }
  return __getlogin_r_alias (__buf, __buflen);
}


;; Function gethostname (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__buflen) == 0)
        {
          return __gethostname_chk (__buf, __buflen, __builtin_object_size ((const void *) __buf, 1));
        }
      if (__builtin_object_size ((const void *) __buf, 1) < (long unsigned int) __buflen)
        {
          return __gethostname_chk_warn (__buf, __buflen, __builtin_object_size ((const void *) __buf, 1));
        }
    }
  return __gethostname_alias (__buf, __buflen);
}


;; Function getdomainname (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__buflen) == 0)
        {
          return __getdomainname_chk (__buf, __buflen, __builtin_object_size ((const void *) __buf, 1));
        }
      if (__builtin_object_size ((const void *) __buf, 1) < (long unsigned int) __buflen)
        {
          return __getdomainname_chk_warn (__buf, __buflen, __builtin_object_size ((const void *) __buf, 1));
        }
    }
  return __getdomainname_alias (__buf, __buflen);
}


;; Function foo5 (null)
;; enabled by -tree-original


{
  int p2 = 10;

    int p2 = 10;
  printf ((const char * restrict) "test1%d\n", *z);
  printf ((const char * restrict) "test2%d\n", *y);
  printf ((const char * restrict) "test3%d\n", p2);
  return p2;
}


;; Function foo3 (null)
;; enabled by -tree-original


{
  int * p2;
  int test;

    int * p2;
    int test;
  if (test != 0)
    {
      *z = (int) (long int) malloc (1);
    }
  else
    {
      p2 = (int *) malloc (2);
    }
  *p2 = 10;
  printf ((const char * restrict) "%d", p2);
}


;; Function foo2 (null)
;; enabled by -tree-original


{
  int * a2 = (int *) malloc ((size_t) z);
  int * p3 = (int *) malloc ((size_t) z);
  int * p4 = (int *) malloc ((size_t) z);
  int tmp;

    int * a2 = (int *) malloc ((size_t) z);
    int * p3 = (int *) malloc ((size_t) z);
    int * p4 = (int *) malloc ((size_t) z);
  p99 = (int *) malloc (200);
  *p99 = 99;
  *(p99 + 4) = 100;
    int tmp;
  pthread_mutex_lock (&mLock);
  pthread_mutex_lock (&mLock2);
  pthread_mutex_lock (&mLock3);
  foo3 (p3);
  if (tmp > 10)
    {
      *(p99 + 4) = 200;
      *p3 = 10;
      free ((void *) p3);
      return p3;
    }
  else
    {
      *p4 = 10;
      free ((void *) p4);
      return p4;
    }
  return a2;
}


;; Function foo4 (null)
;; enabled by -tree-original


{
  int * b = (int *) malloc (1);
  int * p2 = (int *) malloc (1);

    int * b = (int *) malloc (1);
    int * p2 = (int *) malloc (1);
  *b = 2;
  *p2 = 1;
  p2 = (int *) &b;
  free ((void *) p2);
  return p2;
}


;; Function foo (null)
;; enabled by -tree-original


{
  int * p2 = (int *) malloc (1);

    int * p2 = (int *) malloc (1);
  *p2 = 1;
  *(p99 + 4) = 1000;
  *(p99 + 8) = 200;
  return foo2 (z);
}


;; Function child (null)
;; enabled by -tree-original


{
  union pthread_mutex_t mLock2;
  int * a99 = foo (20);
  int * * ppData = (int * *) malloc (10);
  int * pData = (int *) data;
  int * pData2 = (int *) malloc (10);
  int data2 = 0;
  int test = 100;

    union pthread_mutex_t mLock2;
  pthread_mutex_lock (&mLock);
  pthread_mutex_lock (&mLock);
    int * a99 = foo (20);
  printf ((const char * restrict) "asdda%d\n", a99);
    int * * ppData = (int * *) malloc (10);
    int * pData = (int *) data;
    int * pData2 = (int *) malloc (10);
  *pData = *pData + 1;
    int data2 = 0;
  data = 10B;
  ppData = &pData;
  pData = &data2;
  **ppData = 10;
  **ppData = 12;
  child4 ((int *) &data);
  child3 ((void *) &data);
  child5 ((void *) pData2);
  *p98 = 98;
  free ((void *) pData);
  free (data);
  boo ((int *) data);
  free ((void *) ppData);
  pthread_mutex_unlock (&mLock);
  free ((void *) ppData);
    int test = 100;
}


;; Function child4 (null)
;; enabled by -tree-original


{
  int * pData = (int *) &data;
  int * test = (int *) &data;
  int t;

    int * pData = (int *) &data;
    int * test = (int *) &data;
    int t;
  if (t != 0)
    {
      *data = *data + 1;
    }
  else
    {
      *data = 2;
    }
  printf ((const char * restrict) "asdda%d\n", pData);
}


;; Function child3 (null)
;; enabled by -tree-original


{
  int * pData = (int *) &data;
  int c = 10;

  pthread_detach (pthread_self ());
    int * pData = (int *) &data;
    int c = 10;
  pData = pData + 4;
  printf ((const char * restrict) "asdda%d\n", pData);
  printf ((const char * restrict) "asdda%d\n", c);
  free ((void *) &data);
}


;; Function child5 (null)
;; enabled by -tree-original


{
  int * pData = (int *) data;
  int c;

  pthread_detach (pthread_self ());
    int * pData = (int *) data;
    int c;
  pData = pData + 4;
  if (c != 0)
    {
      printf ((const char * restrict) "asdda%d\n", pData);
    }
  else
    {
      printf ((const char * restrict) "asdda%d\n", c);
      free ((void *) pData);
    }
}


;; Function child6 (null)
;; enabled by -tree-original


{
  int * pData = (int *) test;
  int c;

  pthread_detach (pthread_self ());
    int * pData = (int *) test;
    int c;
  pData = pData + 4;
  if (c != 0)
    {
      pData = pData + 80;
      printf ((const char * restrict) "asdda%d\n", pData);
    }
  else
    {
      pData = pData + 80;
      printf ((const char * restrict) "asdda%d\n", c);
      free ((void *) pData);
    }
}


;; Function child7 (null)
;; enabled by -tree-original


{
  int * pData = (int *) test;
  int c;

  pthread_detach (pthread_self ());
    int * pData = (int *) test;
    int c;
  pData = pData + 4;
  if (c != 0)
    {
      *(p98 + 12) = 300;
      return (int *) malloc (10);
      printf ((const char * restrict) "asdda%d\n", pData);
    }
  else
    {
      *(p98 + 8) = 300;
      pData = pData + 80;
      printf ((const char * restrict) "asdda%d\n", c);
      return (int *) malloc (30);
    }
}


;; Function child2 (null)
;; enabled by -tree-original


{
  int * pData = (int *) &data;

    int * pData = (int *) &data;
  *(p98 + 4) = 99;
  child3 (data);
  free (data);
}


;; Function boo (null)
;; enabled by -tree-original


{
  free ((void *) b);
  free ((void *) b);
  test22 (b);
  printf ((const char * restrict) "asdda\n");
}


;; Function test44 (null)
;; enabled by -tree-original


{
  free ((void *) k);
}


;; Function test33 (null)
;; enabled by -tree-original


{
  test44 (k);
}


;; Function test22 (null)
;; enabled by -tree-original


{
  int * w = (int *) malloc (5);

  free ((void *) k);
  free ((void *) k);
  free ((void *) k);
  free ((void *) k);
  free ((void *) k);
  free ((void *) k);
    int * w = (int *) malloc (5);
  free ((void *) w);
}


;; Function main (null)
;; enabled by -tree-original


{
  int * p;
  int * p2;
  int size = 2;
  int * p3 = &size;
  struct adresse * a = (struct adresse *) malloc ((long unsigned int) size * 16);
  int input[2] = {1, 2};
  int input2;
  char buff[50];
  union pthread_attr_t attr;
  union pthread_attr_t attr2;
  pthread_t t;
  pthread_t t2[3];
  int * q = (int *) malloc (70);
  int * q2 = (int *) malloc (20);
  int test;
  int * data;
  int * p4 = (int *) malloc (10);

    int * p;
    int * p2;
    int size = 2;
    int * p3 = &size;
    struct adresse * a = (struct adresse *) malloc ((long unsigned int) size * 16);
  {
    int i = 0;

        int i = 0;
    goto <D.4444>;
    <D.4443>:;
    (a + (sizetype) ((long unsigned int) i * 16))->name = (char *) "Testname";
    (a + (sizetype) ((long unsigned int) i * 16))->nummer = 123;
    i++ ;
    <D.4444>:;
    if (i < size) goto <D.4443>; else goto <D.4445>;
    <D.4445>:;
  }
  free ((void *) a);
  {
    int i = 0;

        int i = 0;
    goto <D.4448>;
    <D.4447>:;
    printf ((const char * restrict) "%s, %d\n", (a + (sizetype) ((long unsigned int) i * 16))->name, (a + (sizetype) ((long unsigned int) i * 16))->nummer);
    i++ ;
    <D.4448>:;
    if (i < size) goto <D.4447>; else goto <D.4449>;
    <D.4449>:;
  }
    int input[2] = {1, 2};
    int input2;
    char buff[50];
    union pthread_attr_t attr;
    union pthread_attr_t attr2;
  pthread_attr_init (&attr);
  pthread_attr_init (&attr2);
  pthread_attr_setdetachstate (&attr, 1);
  pthread_attr_setdetachstate (&attr2, 0);
    pthread_t t;
    pthread_t t2[3];
  pthread_create (&t, (const union pthread_attr_t * restrict) &attr2, child2, (void * restrict) (long int) input2);
  pthread_join (t, 0B);
  {
    int i = 0;

        int i = 0;
    goto <D.4460>;
    <D.4459>:;
    {
      int err = pthread_create (&t2[i], (const union pthread_attr_t * restrict) &attr2, child, 0B);

            int err = pthread_create (&t2[i], (const union pthread_attr_t * restrict) &attr2, child, 0B);
      printf ((const char * restrict) "%ld\n", t2[i]);
    }
    i++ ;
    <D.4460>:;
    if (i <= 2) goto <D.4459>; else goto <D.4461>;
    <D.4461>:;
  }
    int * q = (int *) malloc (70);
    int * q2 = (int *) malloc (20);
    int test;
  if (q != 0B && test != 0)
    {
      child ((void *) q);
      *q = 10;
      free ((void *) q);
    }
  else
    {
      *q = 20;
      printf ((const char * restrict) "test\n");
    }
  {
    int i = 0;

        int i = 0;
    goto <D.4467>;
    <D.4466>:;
    pthread_join (t2[i], 0B);
    i++ ;
    <D.4467>:;
    if (i <= 2) goto <D.4466>; else goto <D.4468>;
    <D.4468>:;
  }
    int * data;
  data = 0B;
  if (staticTrue != 0)
    {
      data = (int *) malloc (400);
      if (data == 0B)
        {
          exit (-1);
        }
      free ((void *) data);
    }
  if (staticTrue != 0)
    {
      free ((void *) data);
    }
  printf ((const char * restrict) "123%d\n", foo5 (q, q));
    int * p4 = (int *) malloc (10);
  p4 = 0B;
  p4 = 1B;
  child4 (p4);
  p4 = child7 ((void *) (long int) test, (void *) p4);
  free ((void *) p4);
  p98 = (int *) malloc (201);
  child ((void *) p98);
  free ((void *) p98);
  return 0;
}
return 0;

