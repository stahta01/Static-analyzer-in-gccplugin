
;; Function getchar (null)
;; enabled by -tree-original


{
  return getc (stdin);
}


;; Function fgetc_unlocked (null)
;; enabled by -tree-original


{
  return __builtin_expect (__fp->_IO_read_ptr >= __fp->_IO_read_end, 0) != 0 ? __uflow (__fp) : (int) *(unsigned char *) __fp->_IO_read_ptr++ ;
}


;; Function getc_unlocked (null)
;; enabled by -tree-original


{
  return __builtin_expect (__fp->_IO_read_ptr >= __fp->_IO_read_end, 0) != 0 ? __uflow (__fp) : (int) *(unsigned char *) __fp->_IO_read_ptr++ ;
}


;; Function getchar_unlocked (null)
;; enabled by -tree-original


{
  return __builtin_expect (stdin->_IO_read_ptr >= stdin->_IO_read_end, 0) != 0 ? __uflow (stdin) : (int) *(unsigned char *) stdin->_IO_read_ptr++ ;
}


;; Function putchar (null)
;; enabled by -tree-original


{
  return putc (__c, stdout);
}


;; Function fputc_unlocked (null)
;; enabled by -tree-original


{
  return __builtin_expect (__stream->_IO_write_ptr >= __stream->_IO_write_end, 0) != 0 ? __overflow (__stream, (int) (unsigned char) __c) : (int) (unsigned char) (*__stream->_IO_write_ptr++  = (char) __c);
}


;; Function putc_unlocked (null)
;; enabled by -tree-original


{
  return __builtin_expect (__stream->_IO_write_ptr >= __stream->_IO_write_end, 0) != 0 ? __overflow (__stream, (int) (unsigned char) __c) : (int) (unsigned char) (*__stream->_IO_write_ptr++  = (char) __c);
}


;; Function putchar_unlocked (null)
;; enabled by -tree-original


{
  return __builtin_expect (stdout->_IO_write_ptr >= stdout->_IO_write_end, 0) != 0 ? __overflow (stdout, (int) (unsigned char) __c) : (int) (unsigned char) (*stdout->_IO_write_ptr++  = (char) __c);
}


;; Function feof_unlocked (null)
;; enabled by -tree-original


{
  return (__stream->_flags & 16) != 0;
}


;; Function ferror_unlocked (null)
;; enabled by -tree-original


{
  return (__stream->_flags & 32) != 0;
}


;; Function sprintf (null)
;; enabled by -tree-original


{
  return __builtin___sprintf_chk (__s, 1, __builtin_object_size ((const void *) __s, 1), __fmt, __builtin_va_arg_pack ());
}


;; Function vsprintf (null)
;; enabled by -tree-original


{
  return __builtin___vsprintf_chk (__s, 1, __builtin_object_size ((const void *) __s, 1), __fmt, __ap);
}


;; Function snprintf (null)
;; enabled by -tree-original


{
  return __builtin___snprintf_chk (__s, __n, 1, __builtin_object_size ((const void *) __s, 1), __fmt, __builtin_va_arg_pack ());
}


;; Function vsnprintf (null)
;; enabled by -tree-original


{
  return __builtin___vsnprintf_chk (__s, __n, 1, __builtin_object_size ((const void *) __s, 1), __fmt, __ap);
}


;; Function fprintf (null)
;; enabled by -tree-original


{
  return __fprintf_chk (__stream, 1, __fmt, __builtin_va_arg_pack ());
}


;; Function printf (null)
;; enabled by -tree-original


{
  return __printf_chk (1, __fmt, __builtin_va_arg_pack ());
}


;; Function vprintf (null)
;; enabled by -tree-original


{
  return __vfprintf_chk (stdout, 1, __fmt, __ap);
}


;; Function vfprintf (null)
;; enabled by -tree-original


{
  return __vfprintf_chk (__stream, 1, __fmt, __ap);
}


;; Function dprintf (null)
;; enabled by -tree-original


{
  return __dprintf_chk (__fd, 1, __fmt, __builtin_va_arg_pack ());
}


;; Function vdprintf (null)
;; enabled by -tree-original


{
  return __vdprintf_chk (__fd, 1, __fmt, __ap);
}


;; Function fgets (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __s, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__n) == 0 || __n <= 0)
        {
          return __fgets_chk (__s, __builtin_object_size ((const void *) __s, 1), __n, __stream);
        }
      if ((long unsigned int) __n > __builtin_object_size ((const void *) __s, 1))
        {
          return __fgets_chk_warn (__s, __builtin_object_size ((const void *) __s, 1), __n, __stream);
        }
    }
  return __fgets_alias (__s, __n, __stream);
}


;; Function fread (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __ptr, 0) != 18446744073709551615)
    {
      if ((__builtin_constant_p (__size) == 0 || __builtin_constant_p (__n) == 0) || (__size | __n) > 4294967295)
        {
          return __fread_chk (__ptr, __builtin_object_size ((const void *) __ptr, 0), __size, __n, __stream);
        }
      if ((long unsigned int) (__size * __n) > __builtin_object_size ((const void *) __ptr, 0))
        {
          return __fread_chk_warn (__ptr, __builtin_object_size ((const void *) __ptr, 0), __size, __n, __stream);
        }
    }
  return __fread_alias (__ptr, __size, __n, __stream);
}


;; Function fread_unlocked (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __ptr, 0) != 18446744073709551615)
    {
      if ((__builtin_constant_p (__size) == 0 || __builtin_constant_p (__n) == 0) || (__size | __n) > 4294967295)
        {
          return __fread_unlocked_chk (__ptr, __builtin_object_size ((const void *) __ptr, 0), __size, __n, __stream);
        }
      if ((long unsigned int) (__size * __n) > __builtin_object_size ((const void *) __ptr, 0))
        {
          return __fread_unlocked_chk_warn (__ptr, __builtin_object_size ((const void *) __ptr, 0), __size, __n, __stream);
        }
    }
  if (((__builtin_constant_p (__size) != 0 && __builtin_constant_p (__n) != 0) && (__size | __n) <= 4294967295) && __size * __n <= 8)
    {
      {
        size_t __cnt = __size * __n;
        char * __cptr = (char *) __ptr;

                size_t __cnt = __size * __n;
                char * __cptr = (char *) __ptr;
        if (__cnt == 0)
          {
            return 0;
          }
        goto <D.2378>;
        <D.2377>:;
        {
          int __c = getc_unlocked (__stream);

                    int __c = getc_unlocked (__stream);
          if (__c == -1)
            {
              goto <D.2376>;
            }
          *__cptr++  = (char) __c;
        }
         --__cnt;
        <D.2378>:;
        if (__cnt != 0) goto <D.2377>; else goto <D.2376>;
        <D.2376>:;
        return (size_t) ((long unsigned int) ((long int) __cptr - (long int) __ptr) / (long unsigned int) __size);
      }
    }
  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
}


;; Function atoi (null)
;; enabled by -tree-original


{
  return (int) strtol (__nptr, 0B, 10);
}


;; Function atol (null)
;; enabled by -tree-original


{
  return strtol (__nptr, 0B, 10);
}


;; Function atoll (null)
;; enabled by -tree-original


{
  return strtoll (__nptr, 0B, 10);
}


;; Function __bswap_16 (null)
;; enabled by -tree-original


{
  return (__uint16_t) __builtin_bswap16 ((int) __bsx);
}


;; Function __bswap_32 (null)
;; enabled by -tree-original


{
  return (__uint32_t) __builtin_bswap32 (__bsx);
}


;; Function __bswap_64 (null)
;; enabled by -tree-original


{
  return (__uint64_t) __builtin_bswap64 (__bsx);
}


;; Function __uint16_identity (null)
;; enabled by -tree-original


{
  return __x;
}


;; Function __uint32_identity (null)
;; enabled by -tree-original


{
  return __x;
}


;; Function __uint64_identity (null)
;; enabled by -tree-original


{
  return __x;
}


;; Function bsearch (null)
;; enabled by -tree-original


{
  size_t __l;
  size_t __u;
  size_t __idx;
  const void * __p;
  int __comparison;

    size_t __l;
    size_t __u;
    size_t __idx;
    const void * __p;
    int __comparison;
  __l = 0;
  __u = __nmemb;
  goto <D.2819>;
  <D.2818>:;
  __idx = (__l + __u) / 2;
  __p = __base + (sizetype) (__idx * __size);
  __comparison = __compar (__key, __p);
  if (__comparison < 0)
    {
      __u = __idx;
    }
  else
    {
      if (__comparison > 0)
        {
          __l = __idx + 1;
        }
      else
        {
          return (void *) __p;
        }
    }
  <D.2819>:;
  if (__l < __u) goto <D.2818>; else goto <D.2820>;
  <D.2820>:;
  return 0B;
}


;; Function atof (null)
;; enabled by -tree-original


{
  return strtod (__nptr, 0B);
}


;; Function realpath (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __resolved, 1) != 18446744073709551615)
    {
      return __realpath_chk (__name, __resolved, __builtin_object_size ((const void *) __resolved, 1));
    }
  return __realpath_alias (__name, __resolved);
}


;; Function ptsname_r (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__buflen) == 0)
        {
          return __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size ((const void *) __buf, 1));
        }
      if (__builtin_object_size ((const void *) __buf, 1) < (long unsigned int) __buflen)
        {
          return __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size ((const void *) __buf, 1));
        }
    }
  return __ptsname_r_alias (__fd, __buf, __buflen);
}


;; Function wctomb (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __s, 1) != 18446744073709551615 && __builtin_object_size ((const void *) __s, 1) <= 15)
    {
      return __wctomb_chk (__s, __wchar, __builtin_object_size ((const void *) __s, 1));
    }
  return __wctomb_alias (__s, __wchar);
}


;; Function mbstowcs (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __dst, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__len) == 0)
        {
          return __mbstowcs_chk (__dst, __src, __len, __builtin_object_size ((const void *) __dst, 1) / 4);
        }
      if (__builtin_object_size ((const void *) __dst, 1) / 4 < (long unsigned int) __len)
        {
          return __mbstowcs_chk_warn (__dst, __src, __len, __builtin_object_size ((const void *) __dst, 1) / 4);
        }
    }
  return __mbstowcs_alias (__dst, __src, __len);
}


;; Function wcstombs (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __dst, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__len) == 0)
        {
          return __wcstombs_chk (__dst, __src, __len, __builtin_object_size ((const void *) __dst, 1));
        }
      if (__builtin_object_size ((const void *) __dst, 1) < (long unsigned int) __len)
        {
          return __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size ((const void *) __dst, 1));
        }
    }
  return __wcstombs_alias (__dst, __src, __len);
}


;; Function strsep (null)
;; enabled by -tree-original


{
  char * s;
  const char * spanp;
  int c;
  int sc;
  char * tok;

    char * s;
    const char * spanp;
    int c;
    int sc;
    char * tok;
  if ((s = *stringp) == 0B)
    {
      return 0B;
    }
  tok = s;
  <D.3552>:;
  c = (int) *s++ ;
  spanp = delim;
  <D.3550>:;
  if ((sc = (int) *spanp++ ) == c)
    {
      if (c == 0)
        {
          s = 0B;
        }
      else
        {
          *(s + 18446744073709551615) = 0;
        }
      *stringp = s;
      return tok;
    }
  if (sc != 0) goto <D.3550>; else goto <D.3551>;
  <D.3551>:;
  goto <D.3552>;
}


;; Function strlcat (null)
;; enabled by -tree-original


{
  char * d = dst;
  const char * s = src;
  size_t n = siz;
  size_t dlen;

    char * d = dst;
    const char * s = src;
    size_t n = siz;
    size_t dlen;
  goto <D.3563>;
  <D.3562>:;
  d++ ;
  <D.3563>:;
  if (n--  != 0 && *d != 0) goto <D.3562>; else goto <D.3564>;
  <D.3564>:;
  dlen = (size_t) ((long int) d - (long int) dst);
  n = siz - dlen;
  if (n == 0)
    {
      {
        extern long unsigned int strlen (const char *);

        return (size_t) (strlen (s) + (long unsigned int) dlen);
      }
    }
  goto <D.3567>;
  <D.3566>:;
  if (n != 1)
    {
      *d++  = *s;
      n-- ;
    }
  s++ ;
  <D.3567>:;
  if (*s != 0) goto <D.3566>; else goto <D.3568>;
  <D.3568>:;
  *d = 0;
  return (size_t) ((long unsigned int) ((long int) s - (long int) src) + (long unsigned int) dlen);
}


;; Function match_pattern (null)
;; enabled by -tree-original


{
  <D.3579>:;
  if (*pattern == 0)
    {
      return *s == 0;
    }
  if (*pattern == 42)
    {
      pattern++ ;
      if (*pattern == 0)
        {
          return 1;
        }
      if (*pattern != 63 && *pattern != 42)
        {
          goto <D.3574>;
          <D.3573>:;
          if (*s == *pattern)
            {
              return 1;
            }
          s++ ;
          <D.3574>:;
          if (*s != 0) goto <D.3573>; else goto <D.3575>;
          <D.3575>:;
          return 0;
        }
      goto <D.3577>;
      <D.3576>:;
      return 1;
      s++ ;
      <D.3577>:;
      if (*s != 0) goto <D.3576>; else goto <D.3578>;
      <D.3578>:;
      return 0;
    }
  if (*s == 0)
    {
      return 0;
    }
  if (*pattern != 63 && *pattern != *s)
    {
      return 0;
    }
  s++ ;
  pattern++ ;
  goto <D.3579>;
}


;; Function match_pattern_list (null)
;; enabled by -tree-original


{
  char sub[1024];
  int negated;
  int got_positive;
  unsigned int i;
  unsigned int subi;
  unsigned int len = (unsigned int) strlen (pattern);
  extern long unsigned int strlen (const char *);

    char sub[1024];
    int negated;
    int got_positive;
    unsigned int i;
    unsigned int subi;
    unsigned int len = (unsigned int) strlen (pattern);
  got_positive = 0;
  i = 0;
  goto <D.3597>;
  <D.3596>:;
  if (*(pattern + (sizetype) i) == 33)
    {
      negated = 1;
      i++ ;
    }
  else
    {
      negated = 0;
    }
  subi = 0;
  goto <D.3594>;
  <D.3593>:;
  {
    extern int isupper ();
    extern int tolower ();

    sub[subi] = dolower != 0 && isupper ((int) (unsigned char) *(pattern + (sizetype) i)) != 0 ? (char) tolower ((int) (unsigned char) *(pattern + (sizetype) i)) : (char) *(pattern + (sizetype) i);
  }
  subi++ ;, i++ ;;
  <D.3594>:;
  if ((i < len && subi <= 1022) && *(pattern + (sizetype) i) != 44) goto <D.3593>; else goto <D.3595>;
  <D.3595>:;
  if (subi > 1022)
    {
      return 0;
    }
  if (i < len && *(pattern + (sizetype) i) == 44)
    {
      i++ ;
    }
  sub[subi] = 0;
  if (match_pattern (string, (const char *) &sub) != 0)
    {
      if (negated != 0)
        {
          return -1;
        }
      else
        {
          got_positive = 1;
        }
    }
  <D.3597>:;
  if (i < len) goto <D.3596>; else goto <D.3598>;
  <D.3598>:;
  return got_positive;
}


;; Function match_filter_list (null)
;; enabled by -tree-original


{
  size_t len = strlen (proposal) + 1;
  extern long unsigned int strlen (const char *);
  char * fix_prop = (char *) malloc (len);
  char * orig_prop = strdup (proposal);
  extern char * strdup (const char *);
  char * cp;
  char * tmp;

    size_t len = strlen (proposal) + 1;
    char * fix_prop = (char *) malloc (len);
    char * orig_prop = strdup (proposal);
    char * cp;
    char * tmp;
  if (fix_prop == 0B || orig_prop == 0B)
    {
      free ((void *) orig_prop);
      return 0B;
    }
  tmp = orig_prop;
  *fix_prop = 0;
  goto <D.3610>;
  <D.3609>:;
  if (match_pattern_list ((const char *) cp, filter, 0) != 1)
    {
      if (*fix_prop != 0)
        {
          strlcat (fix_prop, (const char *) ",", len);
        }
      strlcat (fix_prop, (const char *) cp, len);
    }
  <D.3610>:;
  if ((cp = strsep (&tmp, (const char *) ",")) != 0B) goto <D.3609>; else goto <D.3611>;
  <D.3611>:;
  free ((void *) orig_prop);
  return fix_prop;
}


;; Function main (null)
;; enabled by -tree-original


{
  char * proposal = match_filter_list ((const char *) "proposal", (const char *) "filter");

    char * proposal = match_filter_list ((const char *) "proposal", (const char *) "filter");
  if (proposal == 0B)
    {
      printf ((const char * restrict) "match_filter_list failed\n");
    }
  printf ((const char * restrict) "proposal : %s\n", proposal);
  return 0;
}
return 0;

