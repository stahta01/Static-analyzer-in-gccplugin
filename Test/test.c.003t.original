
;; Function getchar (null)
;; enabled by -tree-original


{
  return getc (stdin);
}


;; Function fgetc_unlocked (null)
;; enabled by -tree-original


{
  return __builtin_expect (__fp->_IO_read_ptr >= __fp->_IO_read_end, 0) != 0 ? __uflow (__fp) : (int) *(unsigned char *) __fp->_IO_read_ptr++ ;
}


;; Function getc_unlocked (null)
;; enabled by -tree-original


{
  return __builtin_expect (__fp->_IO_read_ptr >= __fp->_IO_read_end, 0) != 0 ? __uflow (__fp) : (int) *(unsigned char *) __fp->_IO_read_ptr++ ;
}


;; Function getchar_unlocked (null)
;; enabled by -tree-original


{
  return __builtin_expect (stdin->_IO_read_ptr >= stdin->_IO_read_end, 0) != 0 ? __uflow (stdin) : (int) *(unsigned char *) stdin->_IO_read_ptr++ ;
}


;; Function putchar (null)
;; enabled by -tree-original


{
  return putc (__c, stdout);
}


;; Function fputc_unlocked (null)
;; enabled by -tree-original


{
  return __builtin_expect (__stream->_IO_write_ptr >= __stream->_IO_write_end, 0) != 0 ? __overflow (__stream, (int) (unsigned char) __c) : (int) (unsigned char) (*__stream->_IO_write_ptr++  = (char) __c);
}


;; Function putc_unlocked (null)
;; enabled by -tree-original


{
  return __builtin_expect (__stream->_IO_write_ptr >= __stream->_IO_write_end, 0) != 0 ? __overflow (__stream, (int) (unsigned char) __c) : (int) (unsigned char) (*__stream->_IO_write_ptr++  = (char) __c);
}


;; Function putchar_unlocked (null)
;; enabled by -tree-original


{
  return __builtin_expect (stdout->_IO_write_ptr >= stdout->_IO_write_end, 0) != 0 ? __overflow (stdout, (int) (unsigned char) __c) : (int) (unsigned char) (*stdout->_IO_write_ptr++  = (char) __c);
}


;; Function feof_unlocked (null)
;; enabled by -tree-original


{
  return (__stream->_flags & 16) != 0;
}


;; Function ferror_unlocked (null)
;; enabled by -tree-original


{
  return (__stream->_flags & 32) != 0;
}


;; Function sprintf (null)
;; enabled by -tree-original


{
  return __builtin___sprintf_chk (__s, 1, __builtin_object_size ((const void *) __s, 1), __fmt, __builtin_va_arg_pack ());
}


;; Function vsprintf (null)
;; enabled by -tree-original


{
  return __builtin___vsprintf_chk (__s, 1, __builtin_object_size ((const void *) __s, 1), __fmt, __ap);
}


;; Function snprintf (null)
;; enabled by -tree-original


{
  return __builtin___snprintf_chk (__s, __n, 1, __builtin_object_size ((const void *) __s, 1), __fmt, __builtin_va_arg_pack ());
}


;; Function vsnprintf (null)
;; enabled by -tree-original


{
  return __builtin___vsnprintf_chk (__s, __n, 1, __builtin_object_size ((const void *) __s, 1), __fmt, __ap);
}


;; Function fprintf (null)
;; enabled by -tree-original


{
  return __fprintf_chk (__stream, 1, __fmt, __builtin_va_arg_pack ());
}


;; Function printf (null)
;; enabled by -tree-original


{
  return __printf_chk (1, __fmt, __builtin_va_arg_pack ());
}


;; Function vprintf (null)
;; enabled by -tree-original


{
  return __vfprintf_chk (stdout, 1, __fmt, __ap);
}


;; Function vfprintf (null)
;; enabled by -tree-original


{
  return __vfprintf_chk (__stream, 1, __fmt, __ap);
}


;; Function dprintf (null)
;; enabled by -tree-original


{
  return __dprintf_chk (__fd, 1, __fmt, __builtin_va_arg_pack ());
}


;; Function vdprintf (null)
;; enabled by -tree-original


{
  return __vdprintf_chk (__fd, 1, __fmt, __ap);
}


;; Function fgets (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __s, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__n) == 0 || __n <= 0)
        {
          return __fgets_chk (__s, __builtin_object_size ((const void *) __s, 1), __n, __stream);
        }
      if ((long unsigned int) __n > __builtin_object_size ((const void *) __s, 1))
        {
          return __fgets_chk_warn (__s, __builtin_object_size ((const void *) __s, 1), __n, __stream);
        }
    }
  return __fgets_alias (__s, __n, __stream);
}


;; Function fread (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __ptr, 0) != 18446744073709551615)
    {
      if ((__builtin_constant_p (__size) == 0 || __builtin_constant_p (__n) == 0) || (__size | __n) > 4294967295)
        {
          return __fread_chk (__ptr, __builtin_object_size ((const void *) __ptr, 0), __size, __n, __stream);
        }
      if ((long unsigned int) (__size * __n) > __builtin_object_size ((const void *) __ptr, 0))
        {
          return __fread_chk_warn (__ptr, __builtin_object_size ((const void *) __ptr, 0), __size, __n, __stream);
        }
    }
  return __fread_alias (__ptr, __size, __n, __stream);
}


;; Function fread_unlocked (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __ptr, 0) != 18446744073709551615)
    {
      if ((__builtin_constant_p (__size) == 0 || __builtin_constant_p (__n) == 0) || (__size | __n) > 4294967295)
        {
          return __fread_unlocked_chk (__ptr, __builtin_object_size ((const void *) __ptr, 0), __size, __n, __stream);
        }
      if ((long unsigned int) (__size * __n) > __builtin_object_size ((const void *) __ptr, 0))
        {
          return __fread_unlocked_chk_warn (__ptr, __builtin_object_size ((const void *) __ptr, 0), __size, __n, __stream);
        }
    }
  if (((__builtin_constant_p (__size) != 0 && __builtin_constant_p (__n) != 0) && (__size | __n) <= 4294967295) && __size * __n <= 8)
    {
      {
        size_t __cnt = __size * __n;
        char * __cptr = (char *) __ptr;

                size_t __cnt = __size * __n;
                char * __cptr = (char *) __ptr;
        if (__cnt == 0)
          {
            return 0;
          }
        goto <D.2378>;
        <D.2377>:;
        {
          int __c = getc_unlocked (__stream);

                    int __c = getc_unlocked (__stream);
          if (__c == -1)
            {
              goto <D.2376>;
            }
          *__cptr++  = (char) __c;
        }
         --__cnt;
        <D.2378>:;
        if (__cnt != 0) goto <D.2377>; else goto <D.2376>;
        <D.2376>:;
        return (size_t) ((long unsigned int) ((long int) __cptr - (long int) __ptr) / (long unsigned int) __size);
      }
    }
  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
}


;; Function atoi (null)
;; enabled by -tree-original


{
  return (int) strtol (__nptr, 0B, 10);
}


;; Function atol (null)
;; enabled by -tree-original


{
  return strtol (__nptr, 0B, 10);
}


;; Function atoll (null)
;; enabled by -tree-original


{
  return strtoll (__nptr, 0B, 10);
}


;; Function __bswap_16 (null)
;; enabled by -tree-original


{
  return (__uint16_t) __builtin_bswap16 ((int) __bsx);
}


;; Function __bswap_32 (null)
;; enabled by -tree-original


{
  return (__uint32_t) __builtin_bswap32 (__bsx);
}


;; Function __bswap_64 (null)
;; enabled by -tree-original


{
  return (__uint64_t) __builtin_bswap64 (__bsx);
}


;; Function __uint16_identity (null)
;; enabled by -tree-original


{
  return __x;
}


;; Function __uint32_identity (null)
;; enabled by -tree-original


{
  return __x;
}


;; Function __uint64_identity (null)
;; enabled by -tree-original


{
  return __x;
}


;; Function bsearch (null)
;; enabled by -tree-original


{
  size_t __l;
  size_t __u;
  size_t __idx;
  const void * __p;
  int __comparison;

    size_t __l;
    size_t __u;
    size_t __idx;
    const void * __p;
    int __comparison;
  __l = 0;
  __u = __nmemb;
  goto <D.2819>;
  <D.2818>:;
  __idx = (__l + __u) / 2;
  __p = __base + (sizetype) (__idx * __size);
  __comparison = __compar (__key, __p);
  if (__comparison < 0)
    {
      __u = __idx;
    }
  else
    {
      if (__comparison > 0)
        {
          __l = __idx + 1;
        }
      else
        {
          return (void *) __p;
        }
    }
  <D.2819>:;
  if (__l < __u) goto <D.2818>; else goto <D.2820>;
  <D.2820>:;
  return 0B;
}


;; Function atof (null)
;; enabled by -tree-original


{
  return strtod (__nptr, 0B);
}


;; Function realpath (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __resolved, 1) != 18446744073709551615)
    {
      return __realpath_chk (__name, __resolved, __builtin_object_size ((const void *) __resolved, 1));
    }
  return __realpath_alias (__name, __resolved);
}


;; Function ptsname_r (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__buflen) == 0)
        {
          return __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size ((const void *) __buf, 1));
        }
      if (__builtin_object_size ((const void *) __buf, 1) < (long unsigned int) __buflen)
        {
          return __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size ((const void *) __buf, 1));
        }
    }
  return __ptsname_r_alias (__fd, __buf, __buflen);
}


;; Function wctomb (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __s, 1) != 18446744073709551615 && __builtin_object_size ((const void *) __s, 1) <= 15)
    {
      return __wctomb_chk (__s, __wchar, __builtin_object_size ((const void *) __s, 1));
    }
  return __wctomb_alias (__s, __wchar);
}


;; Function mbstowcs (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __dst, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__len) == 0)
        {
          return __mbstowcs_chk (__dst, __src, __len, __builtin_object_size ((const void *) __dst, 1) / 4);
        }
      if (__builtin_object_size ((const void *) __dst, 1) / 4 < (long unsigned int) __len)
        {
          return __mbstowcs_chk_warn (__dst, __src, __len, __builtin_object_size ((const void *) __dst, 1) / 4);
        }
    }
  return __mbstowcs_alias (__dst, __src, __len);
}


;; Function wcstombs (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __dst, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__len) == 0)
        {
          return __wcstombs_chk (__dst, __src, __len, __builtin_object_size ((const void *) __dst, 1));
        }
      if (__builtin_object_size ((const void *) __dst, 1) < (long unsigned int) __len)
        {
          return __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size ((const void *) __dst, 1));
        }
    }
  return __wcstombs_alias (__dst, __src, __len);
}


;; Function strlcat (null)
;; enabled by -tree-original


{
  const size_t srclen = strlen (src);
  extern long unsigned int strlen (const char *);
  const size_t dstlen = (const size_t) strnlen (dst, maxlen);
  extern int strnlen ();

    const size_t srclen = strlen (src);
    const size_t dstlen = (const size_t) strnlen (dst, maxlen);
  if (dstlen == (const size_t) maxlen)
    {
      return (size_t) ((long unsigned int) maxlen + (long unsigned int) srclen);
    }
  if ((long unsigned int) maxlen - (long unsigned int) dstlen > (long unsigned int) srclen)
    {
      {
        extern void * memcpy (void *, const void *, long unsigned int);

        memcpy ((void *) (dst + (sizetype) dstlen), (const void *) src, (long unsigned int) srclen + 1);
      }
    }
  else
    {
      {
        extern void * memcpy (void *, const void *, long unsigned int);

        memcpy ((void *) (dst + (sizetype) dstlen), (const void *) src, maxlen + 18446744073709551615);
        *(dst + ((sizetype) ((long unsigned int) dstlen + (long unsigned int) maxlen) + 18446744073709551615)) = 0;
      }
    }
  return (size_t) ((long unsigned int) dstlen + (long unsigned int) srclen);
}


;; Function tilde_expand_filename (null)
;; enabled by -tree-original


{
  const char * path;
  char user[128];
  char ret[64];
  struct passwd * pw;
  u_int len;
  u_int slash;
  extern char * strchr (const char *, int);
  extern char * strdup (const char *);

    const char * path;
    char user[128];
    char ret[64];
    struct passwd * pw;
    u_int len;
    u_int slash;
  if (*filename != 126)
    {
      {
        extern char * strdup (const char *);

        return strdup (filename);
      }
    }
  filename++ ;
  path = (const char *) strchr (filename, 47);
  if (path != 0B && path > filename)
    {
      {
        extern void * memcpy (void *, const void *, long unsigned int);

        slash = (u_int) ((long int) path - (long int) filename);
        if (slash > 127)
          {
            printf ((const char * restrict) "tilde_expand_filename: ~username too long%s\n", (char *) "");
            exit (1);
          }
        memcpy ((void *) &user, (const void *) filename, (long unsigned int) slash);
        user[slash] = 0;
      }
    }
  if (path != 0B)
    {
      filename = path + 1;
    }
  if (strlcat ((char *) &ret, filename, 64) > 63)
    {
      printf ((const char * restrict) "tilde_expand_filename: Path too long%s\n", (char *) "");
      exit (1);
    }
  return strdup ((const char *) &ret);
}


;; Function read_keyfile_line (null)
;; enabled by -tree-original


{
  static const char __func__[18] = "read_keyfile_line";

    static const char __func__[18] = "read_keyfile_line";
  goto <D.3598>;
  <D.3597>:;
  *lineno++ ;
  printf ((const char * restrict) "%s: %s line %lu exceeds size limit\n", (const char *) &__func__, filename, *lineno);
  if (rand () % 2 == 1)
    {
      return 0;
    }
  <D.3598>:;
  if (rand () % 2 == 1) goto <D.3597>; else goto <D.3599>;
  <D.3599>:;
  return -1;
}


;; Function update_krl_from_file (null)
;; enabled by -tree-original


{
  struct Key * key = 0B;
  u_long lnum = 0;
  char * path;
  char * cp;
  char * ep;
  char line[16384];
  long long unsigned int serial;
  long long unsigned int serial2;
  int i;
  int was_explicit_key;
  int was_sha1;
  int r;
  struct FILE * krl_spec;

    struct Key * key = 0B;
    u_long lnum = 0;
    char * path;
    char * cp;
    char * ep;
    char line[16384];
    long long unsigned int serial;
    long long unsigned int serial2;
    int i;
    int was_explicit_key;
    int was_sha1;
    int r;
    struct FILE * krl_spec;
  path = tilde_expand_filename (file, (uid_t) pw->pw_uid);
  {
    extern int strcmp ();

    if (strcmp (path, (char *) "-") == 0)
      {
        {
          extern char * strdup (const char *);

          krl_spec = stdin;
          free ((void *) path);
          path = strdup ((const char *) "(standard input)");
        }
      }
    else
      {
        if ((krl_spec = fopen ((const char * restrict) path, (const char * restrict) "r")) == 0B)
          {
            printf ((const char * restrict) "fopen %s: \n", path);
            exit (1);
          }
      }
  }
  if (quiet == 0)
    {
      printf ((const char * restrict) "Revoking from %s\n", path);
    }
  goto <D.3620>;
  <D.3619>:;
  if (rand () % 2 == 1)
    {
      printf ((const char * restrict) "%s: invalid\n", path);
      exit (1);
    }
  <D.3620>:;
  if (read_keyfile_line (krl_spec, (const char *) path, (char *) &line, 16384, &lnum) == 0) goto <D.3619>; else goto <D.3621>;
  <D.3621>:;
  {
    extern int strcmp ();

    if (strcmp (path, (char *) "-") != 0)
      {
        fclose (krl_spec);
      }
  }
}


;; Function main (null)
;; enabled by -tree-original


{
  struct passwd pw;
  int updating;
  int i;
  extern int time ();

    struct passwd pw;
    int updating;
    int i;
  srand ((unsigned int) time (0B));
  i = 0;
  goto <D.3632>;
  <D.3631>:;
  update_krl_from_file (&pw, (const char *) *(argv + (sizetype) ((long unsigned int) i * 8)));
  i++ ;
  <D.3632>:;
  if (i < argc) goto <D.3631>; else goto <D.3633>;
  <D.3633>:;
  return 0;
}
return 0;

