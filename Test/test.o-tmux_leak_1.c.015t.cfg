
;; Function xvasprintf (xvasprintf, funcdef_no=22, decl_uid=4031, cgraph_uid=23, symbol_order=24)

Merging blocks 5 and 6
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 4 3 }
;; 3 succs { 4 5 }
;; 4 succs { }
;; 5 succs { 1 }
int xvasprintf (char * * ret, const char * fmt, char * ap)
{
  int i;
  int D.4109;

  <bb 2> :
  i = vasprintf (ret, fmt, ap);
  if (i < 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _1 = *ret;
  if (_1 == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  printf ("xasprintf: %s", "");
  exit (1);

  <bb 5> :
  D.4109 = i;
  return D.4109;

}



;; Function screen_write_cnputs (screen_write_cnputs, funcdef_no=23, decl_uid=4041, cgraph_uid=24, symbol_order=25)

Removing basic block 13
Removing basic block 16
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
;;
;; Loop 2
;;  header 14, latch 13
;;  depth 1, outer 0
;;  nodes: 14 13
;;
;; Loop 1
;;  header 21, multiple latches: 6 10 15 20
;;  depth 1, outer 0
;;  nodes: 21 6 10 15 20 18 19 16 17 7 3 4 11 12 9 8 5
;; 2 succs { 21 }
;; 3 succs { 4 7 }
;; 4 succs { 5 7 }
;; 5 succs { 22 6 }
;; 6 succs { 21 }
;; 7 succs { 8 16 }
;; 8 succs { 22 9 }
;; 9 succs { 10 11 }
;; 10 succs { 21 }
;; 11 succs { 12 15 }
;; 12 succs { 14 15 }
;; 13 succs { 14 }
;; 14 succs { 13 22 }
;; 15 succs { 21 }
;; 16 succs { 17 18 }
;; 17 succs { 22 18 }
;; 18 succs { 19 20 }
;; 19 succs { 20 }
;; 20 succs { 21 }
;; 21 succs { 3 22 }
;; 22 succs { 1 }
void screen_write_cnputs (struct screen_write_ctx * ctx, ssize_t maxlen, const struct grid_cell * gcp, const char * fmt, char * ap)
{
  utf8_state more;
  size_t size;
  size_t left;
  u_char * last;
  u_char * ptr;
  char * msg;
  struct utf8_data * ud;
  struct grid_cell gc;

  <bb 2> :
  ud = &gc.data;
  size = 0;
  memcpy (&gc, gcp, 24);
  xvasprintf (&msg, fmt, ap);
  ptr = msg;
  goto <bb 21>; [INV]

  <bb 3> :
  _1 = *ptr;
  if (_1 == 35)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _2 = ptr + 1;
  _3 = *_2;
  if (_3 == 91)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  ptr = ptr + 2;
  _4 = strcspn (ptr, "]");
  last = ptr + _4;
  _5 = *last;
  if (_5 == 0)
    goto <bb 22>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  *last = 0;
  ptr = last + 1;
  // predicted unlikely by continue predictor.
  goto <bb 21>; [INV]

  <bb 7> :
  _6 = *ptr;
  _7 = (signed char) _6;
  if (_7 < 0)
    goto <bb 8>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 8> :
  ptr = ptr + 1;
  left = strlen (ptr);
  _8 = ud->size;
  _9 = (long unsigned int) _8;
  _10 = _9 + 18446744073709551615;
  if (left < _10)
    goto <bb 22>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  ptr = ptr + 1;
  if (more != 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  // predicted unlikely by continue predictor.
  goto <bb 21>; [INV]

  <bb 11> :
  if (maxlen > 0)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 12> :
  _11 = ud->width;
  _12 = (long unsigned int) _11;
  _13 = size + _12;
  maxlen.0_14 = (long unsigned int) maxlen;
  if (_13 > maxlen.0_14)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  size = size + 1;

  <bb 14> :
  maxlen.1_15 = (long unsigned int) maxlen;
  if (size < maxlen.1_15)
    goto <bb 13>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 15> :
  _16 = ud->width;
  _17 = (long unsigned int) _16;
  size = size + _17;
  goto <bb 21>; [INV]

  <bb 16> :
  if (maxlen > 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  _18 = size + 1;
  maxlen.2_19 = (long unsigned int) maxlen;
  if (_18 > maxlen.2_19)
    goto <bb 22>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  _20 = *ptr;
  _21 = _20 + 224;
  if (_21 <= 94)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  size = size + 1;

  <bb 20> :
  ptr = ptr + 1;

  <bb 21> :
  _22 = *ptr;
  if (_22 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  msg.3_23 = msg;
  free (msg.3_23);
  gc = {CLOBBER};
  msg = {CLOBBER};
  return;

}



;; Function screen_write_cstrlen (screen_write_cstrlen, funcdef_no=24, decl_uid=4062, cgraph_uid=25, symbol_order=26)

Removing basic block 5
Merging blocks 13 and 14
Merging blocks 13 and 15
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12
;;
;; Loop 1
;;  header 11, multiple latches: 9 10
;;  depth 1, outer 0
;;  nodes: 11 9 10 3 4 7 8 6 5
;;
;; Loop 2
;;  header 6, latch 5
;;  depth 2, outer 1
;;  nodes: 6 5
;; 2 succs { 11 }
;; 3 succs { 4 10 }
;; 4 succs { 6 10 }
;; 5 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 3 12 }
;; 12 succs { 1 }
size_t screen_write_cstrlen (const char * fmt, char * ap)
{
  size_t size;
  char * ptr2;
  char * ptr;
  char * msg2;
  char * msg;
  size_t D.4138;
  char D.4135;

  <bb 2> :
  xvasprintf (&msg, fmt, ap);
  msg.4_1 = msg;
  _2 = strlen (msg.4_1);
  _3 = _2 + 1;
  msg2 = malloc (_3);
  ptr = msg;
  ptr2 = msg2;
  goto <bb 11>; [INV]

  <bb 3> :
  _4 = *ptr;
  if (_4 == 35)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  _5 = ptr + 1;
  _6 = *_5;
  if (_6 == 91)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  ptr = ptr + 1;

  <bb 6> :
  D.4135 = *ptr;
  _7 = D.4135 != 93;
  _8 = D.4135 != 0;
  _9 = _7 & _8;
  if (_9 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _10 = *ptr;
  if (_10 == 93)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  ptr = ptr + 1;

  <bb 9> :
  // predicted unlikely by continue predictor.
  goto <bb 11>; [INV]

  <bb 10> :
  ptr.5_11 = ptr;
  ptr = ptr.5_11 + 1;
  ptr2.6_12 = ptr2;
  ptr2 = ptr2.6_12 + 1;
  _13 = *ptr.5_11;
  *ptr2.6_12 = _13;

  <bb 11> :
  _14 = *ptr;
  if (_14 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  *ptr2 = 0;
  msg.7_15 = msg;
  free (msg.7_15);
  free (msg2);
  D.4138 = size;
  msg = {CLOBBER};
  return D.4138;

}



;; Function grid_compare (grid_compare, funcdef_no=25, decl_uid=4078, cgraph_uid=26, symbol_order=27)

Merging blocks 6 and 7
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 4 3 }
;; 3 succs { 4 5 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 1 }
int grid_compare (struct grid * ga, struct grid * gb)
{
  u_int yy;
  u_int xx;
  struct grid_cell gcb;
  struct grid_cell gca;
  struct grid_line * glb;
  struct grid_line * gla;
  int D.4144;

  <bb 2> :
  _1 = ga->sx;
  _2 = gb->sx;
  if (_1 != _2)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _3 = ga->sy;
  _4 = gb->sy;
  if (_3 != _4)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  D.4144 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 6>; [INV]

  <bb 5> :
  D.4144 = 0;

  <bb 6> :
  gca = {CLOBBER};
  gcb = {CLOBBER};
  return D.4144;

}



;; Function main (main, funcdef_no=27, decl_uid=4100, cgraph_uid=28, symbol_order=29)

Removing basic block 4
Merging blocks 2 and 3
Merging blocks 2 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
int main ()
{
  struct window_pane wp;
  struct window w;
  struct client c;
  int D.4147;

  <bb 2> :
  screen_redraw_make_pane_status (&c, &w, &wp);
  D.4147 = 0;
  c = {CLOBBER};
  w = {CLOBBER};
  wp = {CLOBBER};
  return D.4147;

}



;; Function screen_redraw_make_pane_status (screen_redraw_make_pane_status, funcdef_no=26, decl_uid=4089, cgraph_uid=27, symbol_order=28)

Merging blocks 5 and 6
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
int screen_redraw_make_pane_status (struct client * c, struct window * w, struct window_pane * wp)
{
  struct screen old;
  struct screen_write_ctx ctx;
  size_t outlen;
  char * out;
  struct format_tree * ft;
  const char * fmt;
  struct grid_cell gc;
  int D.4152;

  <bb 2> :
  _1 = &wp->status_screen;
  memcpy (&old, _1, 136);
  wp->status_screen.mode = 0;
  _2 = strlen (fmt);
  out = malloc (_2);
  outlen = screen_write_cstrlen ("%s", out);
  outlen.8_3 = (long int) outlen;
  screen_write_cnputs (&ctx, outlen.8_3, &gc, "%s", out);
  _4 = old.grid;
  _5 = wp->status_screen.grid;
  _6 = grid_compare (_5, _4);
  if (_6 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.4152 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  D.4152 = 1;

  <bb 5> :
  gc = {CLOBBER};
  ctx = {CLOBBER};
  old = {CLOBBER};
  return D.4152;

}


