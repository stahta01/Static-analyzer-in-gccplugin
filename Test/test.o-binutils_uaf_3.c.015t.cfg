
;; Function discard_cleanups (discard_cleanups, funcdef_no=22, decl_uid=3018, cgraph_uid=23, symbol_order=27)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void discard_cleanups (struct cleanup * old_chain)
{
  <bb 2> :
  discard_my_cleanups (&cleanup_chain, old_chain);
  return;

}



;; Function discard_final_cleanups (discard_final_cleanups, funcdef_no=23, decl_uid=3023, cgraph_uid=24, symbol_order=28)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void discard_final_cleanups (struct cleanup * old_chain)
{
  <bb 2> :
  discard_my_cleanups (&final_cleanup_chain, old_chain);
  return;

}



;; Function discard_my_cleanups (discard_my_cleanups, funcdef_no=24, decl_uid=3021, cgraph_uid=25, symbol_order=29)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }
void discard_my_cleanups (struct cleanup * * pmy_chain, struct cleanup * old_chain)
{
  struct cleanup * ptr;

  <bb 2> :
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = ptr->next;
  *pmy_chain = _1;
  _2 = ptr->free_arg;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = ptr->free_arg;
  _4 = ptr->arg;
  _3 (_4);

  <bb 5> :
  free (ptr);

  <bb 6> :
  ptr = *pmy_chain;
  if (ptr != old_chain)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _5 = ptr->arg;
  printf ("freearg: %x\n", _5);
  return;

}



;; Function do_cleanups (do_cleanups, funcdef_no=26, decl_uid=3028, cgraph_uid=27, symbol_order=31)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void do_cleanups (struct cleanup * old_chain)
{
  <bb 2> :
  do_my_cleanups (&cleanup_chain, old_chain);
  return;

}



;; Function do_my_cleanups (do_my_cleanups, funcdef_no=25, decl_uid=3026, cgraph_uid=26, symbol_order=30)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }
void do_my_cleanups (struct cleanup * * pmy_chain, struct cleanup * old_chain)
{
  struct cleanup * ptr;

  <bb 2> :
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = ptr->next;
  *pmy_chain = _1;
  _2 = ptr->function;
  _3 = ptr->arg;
  _2 (_3);
  __builtin_puts (&"cleanup!!!!! ========="[0]);
  _4 = ptr->arg;
  printf ("%x\n", _4);
  _5 = ptr->free_arg;
  if (_5 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = ptr->free_arg;
  _7 = ptr->arg;
  _6 (_7);

  <bb 5> :
  free (ptr);

  <bb 6> :
  ptr = *pmy_chain;
  if (ptr != old_chain)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  return;

}



;; Function make_cleanup (make_cleanup, funcdef_no=29, decl_uid=3041, cgraph_uid=30, symbol_order=34)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
struct cleanup * make_cleanup (void (*<T59c>) (void *) function, void * arg)
{
  struct cleanup * D.3362;

  <bb 2> :
  D.3362 = make_my_cleanup (&cleanup_chain, function, arg);
  return D.3362;

}



;; Function make_my_cleanup (make_my_cleanup, funcdef_no=28, decl_uid=3038, cgraph_uid=29, symbol_order=33)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
struct cleanup * make_my_cleanup (struct cleanup * * pmy_chain, void (*<T59c>) (void *) function, void * arg)
{
  struct cleanup * D.3364;

  <bb 2> :
  D.3364 = make_my_cleanup2 (pmy_chain, function, arg, 0B);
  return D.3364;

}



;; Function make_my_cleanup2 (make_my_cleanup2, funcdef_no=27, decl_uid=3034, cgraph_uid=28, symbol_order=32)

Merging blocks 4 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 1 }
struct cleanup * make_my_cleanup2 (struct cleanup * * pmy_chain, void (*<T59c>) (void *) function, void * arg, void (*<Tee>) (void *) free_arg)
{
  struct cleanup * old_chain;
  struct cleanup * new;
  struct cleanup * D.3368;

  <bb 2> :
  new = malloc (32);
  old_chain = *pmy_chain;
  _1 = *pmy_chain;
  new->next = _1;
  new->function = function;
  new->free_arg = free_arg;
  new->arg = arg;
  *pmy_chain = new;
  if (old_chain == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  exit (1);

  <bb 4> :
  D.3368 = old_chain;
  return D.3368;

}



;; Function bfd_put_bits (bfd_put_bits, funcdef_no=30, decl_uid=3289, cgraph_uid=31, symbol_order=35)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10
;;
;; Loop 1
;;  header 9, latch 8
;;  depth 1, outer 0
;;  nodes: 9 8 6 7 5
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 9 }
;; 5 succs { 6 7 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 9 }
;; 9 succs { 5 10 }
;; 10 succs { 1 }
void bfd_put_bits (int64_t data, void * p, int bits, bool big_p)
{
  int addr_index;
  int bytes;
  int i;
  bfd_byte * addr;
  int iftmp.1;

  <bb 2> :
  addr = p;
  bits.0_1 = (unsigned int) bits;
  _2 = bits.0_1 & 7;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  abort ();

  <bb 4> :
  bytes = bits / 8;
  i = 0;
  goto <bb 9>; [INV]

  <bb 5> :
  if (big_p != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _3 = bytes - i;
  iftmp.1 = _3 + -1;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.1 = i;

  <bb 8> :
  addr_index = iftmp.1;
  _4 = (sizetype) addr_index;
  _5 = addr + _4;
  _6 = (unsigned char) data;
  *_5 = _6;
  data = data >> 8;
  i = i + 1;

  <bb 9> :
  if (i < bytes)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  return;

}



;; Function cgen_get_insn_value (cgen_get_insn_value, funcdef_no=31, decl_uid=3302, cgraph_uid=32, symbol_order=36)

Removing basic block 6
Merging blocks 8 and 9
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 5, latch 4
;;  depth 1, outer 0
;;  nodes: 5 4
;; 2 succs { 3 6 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 4 7 }
;; 6 succs { 7 }
;; 7 succs { 1 }
CGEN_INSN_INT cgen_get_insn_value (struct cgen_cpu_desc * cd, unsigned char * buf, int length)
{
  bfd_vma this_value;
  int bit_index;
  int i;
  CGEN_INSN_INT value;
  int insn_chunk_bitsize;
  int big_p;
  CGEN_INSN_INT D.3379;

  <bb 2> :
  value = 0;
  _1 = insn_chunk_bitsize != 0;
  _2 = insn_chunk_bitsize < length;
  _3 = _1 & _2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  i = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  bit_index = i;
  _4 = bit_index / 8;
  _5 = (sizetype) _4;
  _6 = buf + _5;
  _7 = bfd_get_bits (_6, insn_chunk_bitsize, big_p);
  this_value = (bfd_vma) _7;
  _8 = value << insn_chunk_bitsize;
  _9 = (unsigned int) this_value;
  value = _8 | _9;
  i = i + insn_chunk_bitsize;

  <bb 5> :
  if (i < length)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _10 = bfd_get_bits (buf, length, big_p);
  value = (CGEN_INSN_INT) _10;

  <bb 7> :
  D.3379 = value;
  return D.3379;

}



;; Function cgen_put_insn_value (cgen_put_insn_value, funcdef_no=32, decl_uid=3321, cgraph_uid=33, symbol_order=37)

Removing basic block 6
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 5, latch 4
;;  depth 1, outer 0
;;  nodes: 5 4
;; 2 succs { 3 6 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 4 7 }
;; 6 succs { 7 }
;; 7 succs { 1 }
void cgen_put_insn_value (struct cgen_cpu_desc * cd, unsigned char * buf, int length, CGEN_INSN_INT value)
{
  int bit_index;
  int i;
  int insn_chunk_bitsize;
  int big_p;

  <bb 2> :
  _1 = insn_chunk_bitsize != 0;
  _2 = insn_chunk_bitsize < length;
  _3 = _1 & _2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  i = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  _4 = length - insn_chunk_bitsize;
  bit_index = _4 - i;
  _5 = bit_index / 8;
  _6 = (sizetype) _5;
  _7 = buf + _6;
  _8 = (long int) value;
  bfd_put_bits (_8, _7, insn_chunk_bitsize, big_p);
  value = value >> insn_chunk_bitsize;
  i = i + insn_chunk_bitsize;

  <bb 5> :
  if (i < length)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _9 = (long int) value;
  bfd_put_bits (_9, buf, length, big_p);

  <bb 7> :
  return;

}



;; Function cgen_dis_lookup_insn (cgen_dis_lookup_insn, funcdef_no=33, decl_uid=3334, cgraph_uid=34, symbol_order=38)

Merging blocks 15 and 16
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 14 }
;; 5 succs { 6 14 }
;; 6 succs { 7 14 }
;; 7 succs { 8 9 }
;; 8 succs { 13 }
;; 9 succs { 10 11 }
;; 10 succs { 12 }
;; 11 succs { 12 }
;; 12 succs { 13 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 1 }
struct CGEN_INSN_LIST * cgen_dis_lookup_insn (struct cgen_cpu_desc * cd, const char * buf, CGEN_INSN_INT value)
{
  unsigned int hash;
  struct CGEN_INSN_LIST * D.3402;
  int iftmp.4;
  int D.3394;
  int iftmp.3;
  int D.3389;
  int iftmp.2;

  <bb 2> :
  _1 = cd->dis_hash_table;
  if (_1 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  build_dis_hash_table (cd);

  <bb 4> :
  _2 = MEM[(unsigned char *)buf];
  _3 = (int) _2;
  _4 = _3 & 240;
  _5 = MEM[(unsigned char *)buf];
  _6 = (int) _5;
  D.3389 = _6 & 240;
  _7 = D.3389 != 64;
  _8 = D.3389 != 224;
  _9 = _7 & _8;
  if (_9 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 5> :
  _10 = MEM[(unsigned char *)buf];
  _11 = (int) _10;
  _12 = _11 & 240;
  if (_12 != 96)
    goto <bb 6>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 6> :
  _13 = MEM[(unsigned char *)buf];
  _14 = (int) _13;
  _15 = _14 & 240;
  if (_15 != 80)
    goto <bb 7>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 7> :
  _16 = MEM[(unsigned char *)buf];
  _17 = (int) _16;
  D.3394 = _17 & 240;
  _18 = D.3394 == 112;
  _19 = D.3394 == 240;
  _20 = _18 | _19;
  if (_20 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _21 = MEM[(unsigned char *)buf];
  _22 = (int) _21;
  iftmp.3 = _22 & 15;
  goto <bb 13>; [INV]

  <bb 9> :
  _23 = MEM[(unsigned char *)buf];
  _24 = (int) _23;
  _25 = _24 & 240;
  if (_25 == 48)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _26 = buf + 1;
  _27 = *_26;
  _28 = (int) _27;
  _29 = _28 >> 4;
  iftmp.4 = _29 & 7;
  goto <bb 12>; [INV]

  <bb 11> :
  _30 = buf + 1;
  _31 = *_30;
  _32 = _31 >> 4;
  iftmp.4 = (int) _32;

  <bb 12> :
  iftmp.3 = iftmp.4;

  <bb 13> :
  iftmp.2 = iftmp.3;
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.2 = 0;

  <bb 15> :
  _33 = iftmp.2 | _4;
  hash = (unsigned int) _33;
  _34 = cd->dis_hash_table;
  _35 = (long unsigned int) hash;
  _36 = _35 * 8;
  _37 = _34 + _36;
  D.3402 = *_37;
  return D.3402;

}



;; Function cgen_lookup_insn (cgen_lookup_insn, funcdef_no=34, decl_uid=3343, cgraph_uid=35, symbol_order=39)

Merging blocks 9 and 10
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 1
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 6 9 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 7 9 }
;; 9 succs { 1 }
const struct CGEN_INSN * cgen_lookup_insn (struct cgen_cpu_desc * cd, const struct CGEN_INSN * insn, CGEN_INSN_INT insn_int_value, unsigned char * insn_bytes_value)
{
  const struct CGEN_INSN_LIST * insn_list;
  CGEN_INSN_INT base_insn;
  unsigned char * buf;
  int length;
  const struct CGEN_INSN * D.3409;

  <bb 2> :
  _1 = cd->int_insn_p;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  buf = malloc (4);
  cgen_put_insn_value (cd, buf, length, insn_int_value);
  base_insn = insn_int_value;
  free (buf);
  goto <bb 5>; [INV]

  <bb 4> :
  buf = insn_bytes_value;
  base_insn = cgen_get_insn_value (cd, buf, length);

  <bb 5> :
  if (insn == 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  insn_list = cgen_dis_lookup_insn (cd, buf, base_insn);
  goto <bb 8>; [INV]

  <bb 7> :
  insn = insn_list->insn;
  insn_list = insn_list->next;

  <bb 8> :
  if (insn_list != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  D.3409 = 0B;
  return D.3409;

}



;; Function main (main, funcdef_no=35, decl_uid=3352, cgraph_uid=36, symbol_order=40)

Removing basic block 3
Merging blocks 2 and 4
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
int main ()
{
  unsigned char * insn_bytes_value;
  struct cgen_cpu_desc * cd;
  int D.3411;

  <bb 2> :
  cd = malloc (16);
  insn_bytes_value = strdup ("insn_value");
  _1 = rand ();
  _2 = _1 % 2;
  _3 = _2 == 1;
  _4 = (int) _3;
  cd->int_insn_p = _4;
  cgen_lookup_insn (cd, 0B, 0, insn_bytes_value);
  free (insn_bytes_value);
  free (cd);
  D.3411 = 0;
  return D.3411;

}


