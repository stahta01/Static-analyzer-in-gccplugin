
;; Function discard_cleanups (discard_cleanups, funcdef_no=22, decl_uid=3018, cgraph_uid=23, symbol_order=27)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void discard_cleanups (struct cleanup * old_chain)
{
  <bb 2> :
  discard_my_cleanups (&cleanup_chain, old_chain);
  return;

}



;; Function discard_final_cleanups (discard_final_cleanups, funcdef_no=23, decl_uid=3023, cgraph_uid=24, symbol_order=28)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void discard_final_cleanups (struct cleanup * old_chain)
{
  <bb 2> :
  discard_my_cleanups (&final_cleanup_chain, old_chain);
  return;

}



;; Function discard_my_cleanups (discard_my_cleanups, funcdef_no=24, decl_uid=3021, cgraph_uid=25, symbol_order=29)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }
void discard_my_cleanups (struct cleanup * * pmy_chain, struct cleanup * old_chain)
{
  struct cleanup * ptr;

  <bb 2> :
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = ptr->next;
  *pmy_chain = _1;
  _2 = ptr->free_arg;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = ptr->free_arg;
  _4 = ptr->arg;
  _3 (_4);

  <bb 5> :
  free (ptr);

  <bb 6> :
  ptr = *pmy_chain;
  if (ptr != old_chain)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _5 = ptr->arg;
  printf ("freearg: %x\n", _5);
  return;

}



;; Function do_cleanups (do_cleanups, funcdef_no=26, decl_uid=3028, cgraph_uid=27, symbol_order=31)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void do_cleanups (struct cleanup * old_chain)
{
  <bb 2> :
  do_my_cleanups (&cleanup_chain, old_chain);
  return;

}



;; Function do_my_cleanups (do_my_cleanups, funcdef_no=25, decl_uid=3026, cgraph_uid=26, symbol_order=30)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }
void do_my_cleanups (struct cleanup * * pmy_chain, struct cleanup * old_chain)
{
  struct cleanup * ptr;

  <bb 2> :
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = ptr->next;
  *pmy_chain = _1;
  _2 = ptr->function;
  _3 = ptr->arg;
  _2 (_3);
  __builtin_puts (&"cleanup!!!!! ========="[0]);
  _4 = ptr->arg;
  printf ("%x\n", _4);
  _5 = ptr->free_arg;
  if (_5 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = ptr->free_arg;
  _7 = ptr->arg;
  _6 (_7);

  <bb 5> :
  free (ptr);

  <bb 6> :
  ptr = *pmy_chain;
  if (ptr != old_chain)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  return;

}



;; Function make_cleanup (make_cleanup, funcdef_no=29, decl_uid=3041, cgraph_uid=30, symbol_order=34)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
struct cleanup * make_cleanup (void (*<T59c>) (void *) function, void * arg)
{
  struct cleanup * D.3126;

  <bb 2> :
  D.3126 = make_my_cleanup (&cleanup_chain, function, arg);
  return D.3126;

}



;; Function make_my_cleanup (make_my_cleanup, funcdef_no=28, decl_uid=3038, cgraph_uid=29, symbol_order=33)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
struct cleanup * make_my_cleanup (struct cleanup * * pmy_chain, void (*<T59c>) (void *) function, void * arg)
{
  struct cleanup * D.3128;

  <bb 2> :
  D.3128 = make_my_cleanup2 (pmy_chain, function, arg, 0B);
  return D.3128;

}



;; Function make_my_cleanup2 (make_my_cleanup2, funcdef_no=27, decl_uid=3034, cgraph_uid=28, symbol_order=32)

Merging blocks 4 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 1 }
struct cleanup * make_my_cleanup2 (struct cleanup * * pmy_chain, void (*<T59c>) (void *) function, void * arg, void (*<Tee>) (void *) free_arg)
{
  struct cleanup * old_chain;
  struct cleanup * new;
  struct cleanup * D.3132;

  <bb 2> :
  new = malloc (32);
  old_chain = *pmy_chain;
  _1 = *pmy_chain;
  new->next = _1;
  new->function = function;
  new->free_arg = free_arg;
  new->arg = arg;
  *pmy_chain = new;
  if (old_chain == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  exit (1);

  <bb 4> :
  D.3132 = old_chain;
  return D.3132;

}



;; Function main (main, funcdef_no=32, decl_uid=3115, cgraph_uid=33, symbol_order=37)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
int main ()
{
  const char * namespace;
  int oload_champ;
  struct badness_vector * bvvec[10];
  symbol * * symvec[10];
  int D.3134;

  <bb 2> :
  namespace = "A::B::C";
  find_oload_champ_namespace_loop (namespace, 1, &symvec, &bvvec, &oload_champ);
  do_cleanups (0B);
  symvec = {CLOBBER};
  bvvec = {CLOBBER};
  oload_champ = {CLOBBER};
  D.3134 = 0;
  return D.3134;

}



;; Function find_oload_champ_namespace_loop (find_oload_champ_namespace_loop, funcdef_no=31, decl_uid=3102, cgraph_uid=32, symbol_order=36)

Merging blocks 13 and 14
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13
;; 2 succs { 3 6 }
;; 3 succs { 4 6 }
;; 4 succs { 5 6 }
;; 5 succs { 13 }
;; 6 succs { 7 8 }
;; 7 succs { }
;; 8 succs { 9 10 }
;; 9 succs { 13 }
;; 10 succs { 11 12 }
;; 11 succs { 13 }
;; 12 succs { 13 }
;; 13 succs { 1 }
int find_oload_champ_namespace_loop (const char * qualified_name, int namespace_len, struct symbol * * * oload_syms, struct badness_vector * * oload_champ_bv, int * oload_champ)
{
  int name_len;
  int call_num;
  static int static_call_num;
  struct badness_vector * new_oload_champ_bv;
  struct symbol * * new_oload_syms;
  struct cleanup * old_cleanups;
  int new_oload_champ;
  static int static_calls;
  int searched_deeper;
  int next_namespace_len;
  int D.3142;

  <bb 2> :
  next_namespace_len = namespace_len;
  searched_deeper = 0;
  static_call_num.0_1 = static_call_num;
  _2 = static_call_num.0_1 + 1;
  static_call_num = _2;
  call_num = static_call_num;
  _3 = strlen (qualified_name);
  name_len = (int) _3;
  *oload_syms = 0B;
  *oload_champ_bv = 0B;
  if (next_namespace_len < name_len)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _4 = (sizetype) next_namespace_len;
  _5 = qualified_name + _4;
  _6 = *_5;
  if (_6 == 58)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  next_namespace_len = next_namespace_len + 3;
  searched_deeper = 1;
  _7 = find_oload_champ_namespace_loop (qualified_name, next_namespace_len, oload_syms, oload_champ_bv, oload_champ);
  if (_7 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  D.3142 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 13>; [INV]

  <bb 6> :
  _8 = *oload_syms;
  old_cleanups = make_cleanup (free, _8);
  _9 = *oload_champ_bv;
  old_cleanups = make_cleanup (free, _9);
  new_oload_syms = malloc (800);
  if (new_oload_syms == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  exit (1);

  <bb 8> :
  *new_oload_syms = 0B;
  new_oload_champ = find_oload_champ (new_oload_syms, &new_oload_champ_bv);
  _10 = new_oload_champ != -1;
  _11 = call_num == 1;
  _12 = _10 | _11;
  if (_12 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  *oload_syms = new_oload_syms;
  *oload_champ = new_oload_champ;
  new_oload_champ_bv.1_13 = new_oload_champ_bv;
  *oload_champ_bv = new_oload_champ_bv.1_13;
  do_cleanups (old_cleanups);
  D.3142 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 13>; [INV]

  <bb 10> :
  if (searched_deeper != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  free (new_oload_syms);
  new_oload_champ_bv.2_14 = new_oload_champ_bv;
  free (new_oload_champ_bv.2_14);
  discard_cleanups (old_cleanups);
  D.3142 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 13>; [INV]

  <bb 12> :
  *oload_syms = new_oload_syms;
  *oload_champ = new_oload_champ;
  new_oload_champ_bv.3_15 = new_oload_champ_bv;
  *oload_champ_bv = new_oload_champ_bv.3_15;
  discard_cleanups (old_cleanups);
  D.3142 = 0;
  // predicted unlikely by early return (on trees) predictor.

  <bb 13> :
  new_oload_champ_bv = {CLOBBER};
  return D.3142;

}



;; Function find_oload_champ (find_oload_champ, funcdef_no=30, decl_uid=3092, cgraph_uid=31, symbol_order=35)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
int find_oload_champ (struct symbol * * oload_syms, struct badness_vector * * oload_champ_bv)
{
  struct badness_vector * bv;
  int ret;
  int D.3151;

  <bb 2> :
  _1 = MEM[(int *)oload_syms];
  printf ("%d\n", _1);
  bv = malloc (16);
  *oload_champ_bv = bv;
  ret = -1;
  D.3151 = ret;
  return D.3151;

}


