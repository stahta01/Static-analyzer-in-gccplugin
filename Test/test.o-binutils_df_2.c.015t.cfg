
;; Function discard_cleanups (discard_cleanups, funcdef_no=22, decl_uid=3018, cgraph_uid=23, symbol_order=27)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void discard_cleanups (struct cleanup * old_chain)
{
  <bb 2> :
  discard_my_cleanups (&cleanup_chain, old_chain);
  return;

}



;; Function discard_final_cleanups (discard_final_cleanups, funcdef_no=23, decl_uid=3023, cgraph_uid=24, symbol_order=28)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void discard_final_cleanups (struct cleanup * old_chain)
{
  <bb 2> :
  discard_my_cleanups (&final_cleanup_chain, old_chain);
  return;

}



;; Function discard_my_cleanups (discard_my_cleanups, funcdef_no=24, decl_uid=3021, cgraph_uid=25, symbol_order=29)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }
void discard_my_cleanups (struct cleanup * * pmy_chain, struct cleanup * old_chain)
{
  struct cleanup * ptr;

  <bb 2> :
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = ptr->next;
  *pmy_chain = _1;
  _2 = ptr->free_arg;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = ptr->free_arg;
  _4 = ptr->arg;
  _3 (_4);

  <bb 5> :
  free (ptr);

  <bb 6> :
  ptr = *pmy_chain;
  if (ptr != old_chain)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _5 = ptr->arg;
  printf ("freearg: %x\n", _5);
  return;

}



;; Function do_cleanups (do_cleanups, funcdef_no=26, decl_uid=3028, cgraph_uid=27, symbol_order=31)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void do_cleanups (struct cleanup * old_chain)
{
  <bb 2> :
  do_my_cleanups (&cleanup_chain, old_chain);
  return;

}



;; Function do_my_cleanups (do_my_cleanups, funcdef_no=25, decl_uid=3026, cgraph_uid=26, symbol_order=30)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }
void do_my_cleanups (struct cleanup * * pmy_chain, struct cleanup * old_chain)
{
  struct cleanup * ptr;

  <bb 2> :
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = ptr->next;
  *pmy_chain = _1;
  _2 = ptr->function;
  _3 = ptr->arg;
  _2 (_3);
  __builtin_puts (&"cleanup!!!!! ========="[0]);
  _4 = ptr->arg;
  printf ("%x\n", _4);
  _5 = ptr->free_arg;
  if (_5 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = ptr->free_arg;
  _7 = ptr->arg;
  _6 (_7);

  <bb 5> :
  free (ptr);

  <bb 6> :
  ptr = *pmy_chain;
  if (ptr != old_chain)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  return;

}



;; Function make_cleanup (make_cleanup, funcdef_no=29, decl_uid=3041, cgraph_uid=30, symbol_order=34)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
struct cleanup * make_cleanup (void (*<T59c>) (void *) function, void * arg)
{
  struct cleanup * D.3510;

  <bb 2> :
  D.3510 = make_my_cleanup (&cleanup_chain, function, arg);
  return D.3510;

}



;; Function make_my_cleanup (make_my_cleanup, funcdef_no=28, decl_uid=3038, cgraph_uid=29, symbol_order=33)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
struct cleanup * make_my_cleanup (struct cleanup * * pmy_chain, void (*<T59c>) (void *) function, void * arg)
{
  struct cleanup * D.3512;

  <bb 2> :
  D.3512 = make_my_cleanup2 (pmy_chain, function, arg, 0B);
  return D.3512;

}



;; Function make_my_cleanup2 (make_my_cleanup2, funcdef_no=27, decl_uid=3034, cgraph_uid=28, symbol_order=32)

Merging blocks 4 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 1 }
struct cleanup * make_my_cleanup2 (struct cleanup * * pmy_chain, void (*<T59c>) (void *) function, void * arg, void (*<Tee>) (void *) free_arg)
{
  struct cleanup * old_chain;
  struct cleanup * new;
  struct cleanup * D.3516;

  <bb 2> :
  new = malloc (32);
  old_chain = *pmy_chain;
  _1 = *pmy_chain;
  new->next = _1;
  new->function = function;
  new->free_arg = free_arg;
  new->arg = arg;
  *pmy_chain = new;
  if (old_chain == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  exit (1);

  <bb 4> :
  D.3516 = old_chain;
  return D.3516;

}



;; Function _bfd_elf_link_read_relocs (_bfd_elf_link_read_relocs, funcdef_no=30, decl_uid=3477, cgraph_uid=31, symbol_order=35)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
;; 2 succs { 3 5 }
;; 3 succs { 4 5 }
;; 4 succs { 15 }
;; 5 succs { 6 10 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 9 10 }
;; 9 succs { 12 }
;; 10 succs { 11 12 }
;; 11 succs { 15 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 15 }
;; 15 succs { 1 }
Elf_Internal_Rela * _bfd_elf_link_read_relocs (struct bfd * abfd, Elf_Internal_Rela * internal_relocs, bfd_boolean keep_memory)
{
  Elf_Internal_Rela * internal_rela_relocs;
  Elf_Internal_Rela * alloc2;
  Elf_Internal_Rela * alloc1;
  Elf_Internal_Rela * D.3522;

  <bb 2> :
  alloc2 = 0B;
  _1 = rand ();
  _2 = _1 % 2;
  if (_2 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _3 = abfd->memory;
  if (_3 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  __builtin_puts (&"cached memory(abfd->memory) is returned"[0]);
  D.3522 = abfd->memory;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 15>; [INV]

  <bb 5> :
  if (internal_relocs == 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  alloc2 = malloc (4);
  internal_relocs = alloc2;
  if (keep_memory != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  abfd->memory = alloc2;

  <bb 8> :
  if (internal_relocs == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  // predicted unlikely by goto predictor.
  goto <bb 12>; [INV]

  <bb 10> :
  if (alloc1 == 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  D.3522 = internal_relocs;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 15>; [INV]

  <bb 12> :
error_return:
  if (keep_memory != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  abfd->memory = 0B;

  <bb 14> :
  D.3522 = 0B;

  <bb 15> :
  return D.3522;

}



;; Function main (main, funcdef_no=33, decl_uid=3496, cgraph_uid=34, symbol_order=38)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
int main ()
{
  struct link_info link_info;
  struct bfd bfd;
  struct alpha_relax_info info;
  bfd_vma symval;
  time_t t;
  int D.3534;

  <bb 2> :
  _1 = time (&t);
  _2 = (unsigned int) _1;
  srand (_2);
  symval = 1;
  _3 = malloc (4);
  bfd.memory = _3;
  _4 = rand ();
  _5 = _4 % 2;
  _6 = _5 == 1;
  _7 = (int) _6;
  link_info.keep_memory = _7;
  info.abfd = &bfd;
  info.link_info = &link_info;
  _8 = link_info.keep_memory;
  printf ("keep_memory: %d\n", _8);
  elf64_alpha_relax_with_lituse (&info, symval);
  _9 = bfd.memory;
  MEM[(int *)_9] = 1;
  _10 = bfd.memory;
  free (_10);
  t = {CLOBBER};
  info = {CLOBBER};
  bfd = {CLOBBER};
  link_info = {CLOBBER};
  D.3534 = 0;
  return D.3534;

}



;; Function elf64_alpha_relax_with_lituse (elf64_alpha_relax_with_lituse, funcdef_no=32, decl_uid=3491, cgraph_uid=33, symbol_order=37)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
bfd_boolean elf64_alpha_relax_with_lituse (struct alpha_relax_info * info, bfd_vma symval)
{
  bfd_vma optdest;
  Elf_Internal_Rela * internal_relocs;
  struct bfd * abfd;

  <bb 2> :
  abfd = info->abfd;
  _1 = info->link_info;
  _2 = _1->keep_memory;
  internal_relocs = _bfd_elf_link_read_relocs (abfd, 0B, _2);
  optdest = elf64_alpha_relax_opt_call (info, symval);
  free (internal_relocs);
  return;

}



;; Function elf64_alpha_relax_opt_call (elf64_alpha_relax_opt_call, funcdef_no=31, decl_uid=3485, cgraph_uid=32, symbol_order=36)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10
;; 2 succs { 3 4 }
;; 3 succs { 10 }
;; 4 succs { 5 6 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 10 }
;; 10 succs { 1 }
bfd_vma elf64_alpha_relax_opt_call (struct alpha_relax_info * info, bfd_vma symval)
{
  Elf_Internal_Rela * tsec_free;
  Elf_Internal_Rela * tsec_relocs;
  Elf_Internal_Rela * iftmp.0;
  bfd_vma D.3538;

  <bb 2> :
  _1 = info->link_info;
  _2 = _1->keep_memory;
  _3 = info->abfd;
  tsec_relocs = _bfd_elf_link_read_relocs (_3, 0B, _2);
  if (tsec_relocs == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.3538 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 10>; [INV]

  <bb 4> :
  MEM[(int *)tsec_relocs] = 1;
  _4 = info->link_info;
  _5 = _4->keep_memory;
  if (_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  iftmp.0 = tsec_relocs;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.0 = 0B;

  <bb 7> :
  tsec_free = iftmp.0;
  if (tsec_free != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  free (tsec_free);

  <bb 9> :
  D.3538 = 0;

  <bb 10> :
  return D.3538;

}


