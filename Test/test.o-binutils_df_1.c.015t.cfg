
;; Function discard_cleanups (discard_cleanups, funcdef_no=22, decl_uid=3018, cgraph_uid=23, symbol_order=27)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void discard_cleanups (struct cleanup * old_chain)
{
  <bb 2> :
  discard_my_cleanups (&cleanup_chain, old_chain);
  return;

}



;; Function discard_final_cleanups (discard_final_cleanups, funcdef_no=23, decl_uid=3023, cgraph_uid=24, symbol_order=28)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void discard_final_cleanups (struct cleanup * old_chain)
{
  <bb 2> :
  discard_my_cleanups (&final_cleanup_chain, old_chain);
  return;

}



;; Function discard_my_cleanups (discard_my_cleanups, funcdef_no=24, decl_uid=3021, cgraph_uid=25, symbol_order=29)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }
void discard_my_cleanups (struct cleanup * * pmy_chain, struct cleanup * old_chain)
{
  struct cleanup * ptr;

  <bb 2> :
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = ptr->next;
  *pmy_chain = _1;
  _2 = ptr->free_arg;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = ptr->free_arg;
  _4 = ptr->arg;
  _3 (_4);

  <bb 5> :
  free (ptr);

  <bb 6> :
  ptr = *pmy_chain;
  if (ptr != old_chain)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _5 = ptr->arg;
  printf ("freearg: %x\n", _5);
  return;

}



;; Function do_cleanups (do_cleanups, funcdef_no=26, decl_uid=3028, cgraph_uid=27, symbol_order=31)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void do_cleanups (struct cleanup * old_chain)
{
  <bb 2> :
  do_my_cleanups (&cleanup_chain, old_chain);
  return;

}



;; Function do_my_cleanups (do_my_cleanups, funcdef_no=25, decl_uid=3026, cgraph_uid=26, symbol_order=30)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }
void do_my_cleanups (struct cleanup * * pmy_chain, struct cleanup * old_chain)
{
  struct cleanup * ptr;

  <bb 2> :
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = ptr->next;
  *pmy_chain = _1;
  _2 = ptr->function;
  _3 = ptr->arg;
  _2 (_3);
  __builtin_puts (&"cleanup!!!!! ========="[0]);
  _4 = ptr->arg;
  printf ("%x\n", _4);
  _5 = ptr->free_arg;
  if (_5 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = ptr->free_arg;
  _7 = ptr->arg;
  _6 (_7);

  <bb 5> :
  free (ptr);

  <bb 6> :
  ptr = *pmy_chain;
  if (ptr != old_chain)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  return;

}



;; Function make_cleanup (make_cleanup, funcdef_no=29, decl_uid=3041, cgraph_uid=30, symbol_order=34)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
struct cleanup * make_cleanup (void (*<T59c>) (void *) function, void * arg)
{
  struct cleanup * D.3146;

  <bb 2> :
  D.3146 = make_my_cleanup (&cleanup_chain, function, arg);
  return D.3146;

}



;; Function make_my_cleanup (make_my_cleanup, funcdef_no=28, decl_uid=3038, cgraph_uid=29, symbol_order=33)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
struct cleanup * make_my_cleanup (struct cleanup * * pmy_chain, void (*<T59c>) (void *) function, void * arg)
{
  struct cleanup * D.3148;

  <bb 2> :
  D.3148 = make_my_cleanup2 (pmy_chain, function, arg, 0B);
  return D.3148;

}



;; Function make_my_cleanup2 (make_my_cleanup2, funcdef_no=27, decl_uid=3034, cgraph_uid=28, symbol_order=32)

Merging blocks 4 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 1 }
struct cleanup * make_my_cleanup2 (struct cleanup * * pmy_chain, void (*<T59c>) (void *) function, void * arg, void (*<Tee>) (void *) free_arg)
{
  struct cleanup * old_chain;
  struct cleanup * new;
  struct cleanup * D.3152;

  <bb 2> :
  new = malloc (32);
  old_chain = *pmy_chain;
  _1 = *pmy_chain;
  new->next = _1;
  new->function = function;
  new->free_arg = free_arg;
  new->arg = arg;
  *pmy_chain = new;
  if (old_chain == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  exit (1);

  <bb 4> :
  D.3152 = old_chain;
  return D.3152;

}



;; Function xrealloc (xrealloc, funcdef_no=30, decl_uid=3096, cgraph_uid=31, symbol_order=35)

Merging blocks 9 and 10
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 8 9 }
;; 8 succs { }
;; 9 succs { 1 }
void * xrealloc (void * oldmem, size_t size)
{
  void * newmem;
  void * D.3161;

  <bb 2> :
  if (size == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  size = 1;

  <bb 4> :
  if (oldmem == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  newmem = malloc (size);
  goto <bb 7>; [INV]

  <bb 6> :
  newmem = realloc (oldmem, size);

  <bb 7> :
  if (newmem == 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  exit (1);

  <bb 9> :
  D.3161 = newmem;
  return D.3161;

}



;; Function remote_filename_p (remote_filename_p, funcdef_no=31, decl_uid=3100, cgraph_uid=32, symbol_order=36)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
int remote_filename_p (const char * filename)
{
  int D.3163;

  <bb 2> :
  _1 = strncmp (filename, "remote:", 7);
  _2 = _1 == 0;
  D.3163 = (int) _2;
  return D.3163;

}



;; Function rs6000_aix_ld_info_to_xml (rs6000_aix_ld_info_to_xml, funcdef_no=34, decl_uid=3122, cgraph_uid=35, symbol_order=39)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
ULONGEST rs6000_aix_ld_info_to_xml (const gdb_byte * ldi_buf)
{
  int i;
  ULONGEST D.3165;

  <bb 2> :
  _1 = *ldi_buf;
  i = (int) _1;
  D.3165 = (ULONGEST) i;
  return D.3165;

}



;; Function main (main, funcdef_no=36, decl_uid=3132, cgraph_uid=37, symbol_order=41)

Merging blocks 5 and 6
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
int main ()
{
  ULONGEST * xfered_len;
  gdb_byte * writebuf;
  int len;
  char buf[10];
  time_t t;
  int D.3171;
  gdb_byte * iftmp.0;

  <bb 2> :
  _1 = time (&t);
  _2 = (unsigned int) _1;
  srand (_2);
  xfered_len = &len;
  _3 = rand ();
  _4 = _3 % 2;
  if (_4 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.0 = &buf;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.0 = 0B;

  <bb 5> :
  writebuf = iftmp.0;
  rs6000_xfer_shared_libraries (writebuf, xfered_len);
  t = {CLOBBER};
  buf = {CLOBBER};
  len = {CLOBBER};
  D.3171 = 0;
  return D.3171;

}



;; Function rs6000_xfer_shared_libraries (rs6000_xfer_shared_libraries, funcdef_no=35, decl_uid=3127, cgraph_uid=36, symbol_order=40)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;; 2 succs { 3 4 }
;; 3 succs { 9 }
;; 4 succs { 5 6 }
;; 5 succs { }
;; 6 succs { 7 8 }
;; 7 succs { 9 }
;; 8 succs { 9 }
;; 9 succs { 1 }
target_xfer_status rs6000_xfer_shared_libraries (const gdb_byte * writebuf, ULONGEST * xfered_len)
{
  struct cleanup * cleanup;
  ULONGEST result;
  gdb_byte * ldi_buf;
  target_xfer_status D.3175;

  <bb 2> :
  if (writebuf != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.3175 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 9>; [INV]

  <bb 4> :
  ldi_buf = rs6000_ptrace_ldinfo ();
  if (ldi_buf == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  exit (1);

  <bb 6> :
  cleanup = make_cleanup (free, ldi_buf);
  result = rs6000_aix_ld_info_to_xml (ldi_buf);
  free (ldi_buf);
  do_cleanups (cleanup);
  if (result == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  D.3175 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 9>; [INV]

  <bb 8> :
  *xfered_len = result;
  D.3175 = 1;
  // predicted unlikely by early return (on trees) predictor.

  <bb 9> :
  return D.3175;

}



;; Function rs6000_ptrace_ldinfo (rs6000_ptrace_ldinfo, funcdef_no=33, decl_uid=3112, cgraph_uid=34, symbol_order=38)

Merging blocks 5 and 6
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 3, latch 4
;;  depth 1, outer 0
;;  nodes: 3 4
;; 2 succs { 3 }
;; 3 succs { 5 4 }
;; 4 succs { 3 }
;; 5 succs { 1 }
gdb_byte * rs6000_ptrace_ldinfo ()
{
  int rc;
  void * ldi;
  int ldi_size;
  const int pid;
  gdb_byte * D.3182;

  <bb 2> :
  pid = 1;
  ldi_size = 1024;
  _1 = (long unsigned int) ldi_size;
  ldi = malloc (_1);
  rc = -1;

  <bb 3> :
  ldi.1_2 = (long long int) ldi;
  rc = rs6000_ptrace64 (1, 1, ldi.1_2, ldi_size, 0B);
  if (rc != -1)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  ldi_size = ldi_size * 2;
  _3 = (long unsigned int) ldi_size;
  ldi = xrealloc (ldi, _3);
  goto <bb 3>; [INV]

  <bb 5> :
  D.3182 = ldi;
  return D.3182;

}



;; Function rs6000_ptrace64 (rs6000_ptrace64, funcdef_no=32, decl_uid=3108, cgraph_uid=33, symbol_order=37)

Merging blocks 5 and 6
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
int rs6000_ptrace64 (int req, int id, long long int addr, int data, void * buf)
{
  int ret;
  int i;
  int D.3188;
  int iftmp.3;

  <bb 2> :
  addr.2_1 = (int *) addr;
  i = *addr.2_1;
  _2 = rand ();
  _3 = _2 % 2;
  if (_3 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.3 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.3 = -1;

  <bb 5> :
  ret = iftmp.3;
  D.3188 = ret;
  return D.3188;

}


