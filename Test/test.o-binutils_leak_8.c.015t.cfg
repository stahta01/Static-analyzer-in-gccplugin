
;; Function discard_cleanups (discard_cleanups, funcdef_no=22, decl_uid=3018, cgraph_uid=23, symbol_order=27)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void discard_cleanups (struct cleanup * old_chain)
{
  <bb 2> :
  discard_my_cleanups (&cleanup_chain, old_chain);
  return;

}



;; Function discard_final_cleanups (discard_final_cleanups, funcdef_no=23, decl_uid=3023, cgraph_uid=24, symbol_order=28)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void discard_final_cleanups (struct cleanup * old_chain)
{
  <bb 2> :
  discard_my_cleanups (&final_cleanup_chain, old_chain);
  return;

}



;; Function discard_my_cleanups (discard_my_cleanups, funcdef_no=24, decl_uid=3021, cgraph_uid=25, symbol_order=29)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }
void discard_my_cleanups (struct cleanup * * pmy_chain, struct cleanup * old_chain)
{
  struct cleanup * ptr;

  <bb 2> :
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = ptr->next;
  *pmy_chain = _1;
  _2 = ptr->free_arg;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = ptr->free_arg;
  _4 = ptr->arg;
  _3 (_4);

  <bb 5> :
  free (ptr);

  <bb 6> :
  ptr = *pmy_chain;
  if (ptr != old_chain)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _5 = ptr->arg;
  printf ("freearg: %x\n", _5);
  return;

}



;; Function do_cleanups (do_cleanups, funcdef_no=26, decl_uid=3028, cgraph_uid=27, symbol_order=31)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void do_cleanups (struct cleanup * old_chain)
{
  <bb 2> :
  do_my_cleanups (&cleanup_chain, old_chain);
  return;

}



;; Function do_my_cleanups (do_my_cleanups, funcdef_no=25, decl_uid=3026, cgraph_uid=26, symbol_order=30)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }
void do_my_cleanups (struct cleanup * * pmy_chain, struct cleanup * old_chain)
{
  struct cleanup * ptr;

  <bb 2> :
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = ptr->next;
  *pmy_chain = _1;
  _2 = ptr->function;
  _3 = ptr->arg;
  _2 (_3);
  __builtin_puts (&"cleanup!!!!! ========="[0]);
  _4 = ptr->arg;
  printf ("%x\n", _4);
  _5 = ptr->free_arg;
  if (_5 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = ptr->free_arg;
  _7 = ptr->arg;
  _6 (_7);

  <bb 5> :
  free (ptr);

  <bb 6> :
  ptr = *pmy_chain;
  if (ptr != old_chain)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  return;

}



;; Function make_cleanup (make_cleanup, funcdef_no=29, decl_uid=3041, cgraph_uid=30, symbol_order=34)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
struct cleanup * make_cleanup (void (*<T59c>) (void *) function, void * arg)
{
  struct cleanup * D.3512;

  <bb 2> :
  D.3512 = make_my_cleanup (&cleanup_chain, function, arg);
  return D.3512;

}



;; Function make_my_cleanup (make_my_cleanup, funcdef_no=28, decl_uid=3038, cgraph_uid=29, symbol_order=33)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
struct cleanup * make_my_cleanup (struct cleanup * * pmy_chain, void (*<T59c>) (void *) function, void * arg)
{
  struct cleanup * D.3514;

  <bb 2> :
  D.3514 = make_my_cleanup2 (pmy_chain, function, arg, 0B);
  return D.3514;

}



;; Function make_my_cleanup2 (make_my_cleanup2, funcdef_no=27, decl_uid=3034, cgraph_uid=28, symbol_order=32)

Merging blocks 4 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 1 }
struct cleanup * make_my_cleanup2 (struct cleanup * * pmy_chain, void (*<T59c>) (void *) function, void * arg, void (*<Tee>) (void *) free_arg)
{
  struct cleanup * old_chain;
  struct cleanup * new;
  struct cleanup * D.3518;

  <bb 2> :
  new = malloc (32);
  old_chain = *pmy_chain;
  _1 = *pmy_chain;
  new->next = _1;
  new->function = function;
  new->free_arg = free_arg;
  new->arg = arg;
  *pmy_chain = new;
  if (old_chain == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  exit (1);

  <bb 4> :
  D.3518 = old_chain;
  return D.3518;

}



;; Function bfd_malloc (bfd_malloc, funcdef_no=30, decl_uid=3465, cgraph_uid=31, symbol_order=35)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;; 2 succs { 3 4 }
;; 3 succs { 7 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 }
;; 7 succs { 1 }
void * bfd_malloc (bfd_size_type size)
{
  size_t sz;
  void * ptr;
  void * D.3522;

  <bb 2> :
  sz = size;
  _1 = size != sz;
  sz.0_2 = (long int) sz;
  _3 = sz.0_2 < 0;
  _4 = _1 | _3;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __builtin_puts (&"bfd_error_no_memory"[0]);
  D.3522 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 7>; [INV]

  <bb 4> :
  ptr = malloc (sz);
  _5 = ptr == 0B;
  _6 = sz != 0;
  _7 = _5 & _6;
  if (_7 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  __builtin_puts (&"bfd_error_no_memory"[0]);

  <bb 6> :
  D.3522 = ptr;

  <bb 7> :
  return D.3522;

}



;; Function bfd_get_section_contents (bfd_get_section_contents, funcdef_no=31, decl_uid=3471, cgraph_uid=32, symbol_order=36)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
bfd_boolean bfd_get_section_contents (struct bfd_section * sec, const void * location)
{
  bfd_boolean D.3528;

  <bb 2> :
  if (location != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  memset (location, 0, 4);
  D.3528 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  _1 = rand ();
  _2 = _1 % 2;
  _3 = _2 == 1;
  D.3528 = (bfd_boolean) _3;

  <bb 5> :
  return D.3528;

}



;; Function bfd_get_full_section_contents (bfd_get_full_section_contents, funcdef_no=32, decl_uid=3476, cgraph_uid=33, symbol_order=37)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
;; 2 succs { 26 3 21 11 }
;; 3 succs { 4 6 }
;; 4 succs { 5 6 }
;; 5 succs { 27 }
;; 6 succs { 7 10 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 27 }
;; 10 succs { 27 }
;; 11 succs { 12 13 }
;; 12 succs { 27 }
;; 13 succs { 14 15 }
;; 14 succs { 20 }
;; 15 succs { 16 17 }
;; 16 succs { 17 }
;; 17 succs { 18 19 }
;; 18 succs { 20 }
;; 19 succs { 27 }
;; 20 succs { 27 }
;; 21 succs { 22 23 }
;; 22 succs { 23 }
;; 23 succs { 24 25 }
;; 24 succs { 27 }
;; 25 succs { 27 }
;; 26 succs { }
;; 27 succs { 1 }
bfd_boolean bfd_get_full_section_contents (struct bfd_section * sec, bfd_byte * * ptr)
{
  bfd_byte * p;
  bfd_byte * compressed_buffer;
  bfd_boolean D.3534;

  <bb 2> :
  p = *ptr;
  _1 = sec->compress_status;
  _2 = (int) _1;
  switch (_2) <default: <L24> [INV], case 0: <L0> [INV], case 1: <L19> [INV], case 2: <L9> [INV]>

  <bb 3> :
<L0>:
  if (p == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  p = bfd_malloc (4);
  if (p == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  D.3534 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 27>; [INV]

  <bb 6> :
  *p = 12;
  _3 = bfd_get_section_contents (sec, p);
  if (_3 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  _4 = *ptr;
  if (p != _4)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  free (p);

  <bb 9> :
  D.3534 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 27>; [INV]

  <bb 10> :
  *ptr = p;
  D.3534 = 1;
  goto <bb 27>; [INV]

  <bb 11> :
<L9>:
  compressed_buffer = bfd_malloc (4);
  if (compressed_buffer == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  D.3534 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 27>; [INV]

  <bb 13> :
  _5 = rand ();
  _6 = _5 % 2;
  if (_6 == 1)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  // predicted unlikely by goto predictor.
  goto <bb 20>; [INV]

  <bb 15> :
  if (p == 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  p = bfd_malloc (4);

  <bb 17> :
  if (p == 0B)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  // predicted unlikely by goto predictor.
  goto <bb 20>; [INV]

  <bb 19> :
  free (compressed_buffer);
  *ptr = p;
  D.3534 = 1;
  goto <bb 27>; [INV]

  <bb 20> :
fail_compressed:
  free (compressed_buffer);
  D.3534 = 0;
  goto <bb 27>; [INV]

  <bb 21> :
<L19>:
  if (p == 0B)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  p = bfd_malloc (4);

  <bb 23> :
  if (p == 0B)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  D.3534 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 27>; [INV]

  <bb 25> :
  *ptr = p;
  D.3534 = 1;
  goto <bb 27>; [INV]

  <bb 26> :
<L24>:
  exit (1);

  <bb 27> :
  return D.3534;

}



;; Function bfd_convert_section_contents (bfd_convert_section_contents, funcdef_no=33, decl_uid=3488, cgraph_uid=34, symbol_order=38)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;; 2 succs { 3 5 }
;; 3 succs { 4 5 }
;; 4 succs { 8 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 1 }
bfd_boolean bfd_convert_section_contents (struct bfd_section * isec, bfd_byte * * ptr)
{
  bfd_boolean use_memmove;
  bfd_byte * contents;
  bfd_boolean D.3556;

  <bb 2> :
  _1 = rand ();
  _2 = _1 % 2;
  _3 = _2 == 1;
  use_memmove = (bfd_boolean) _3;
  contents = *ptr;
  if (use_memmove == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  contents = bfd_malloc (4);
  if (contents == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  D.3556 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 8>; [INV]

  <bb 5> :
  if (contents != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _4 = MEM[(int *)contents];
  printf ("%d\n", _4);

  <bb 7> :
  _5 = rand ();
  _6 = _5 % 2;
  _7 = _6 == 1;
  D.3556 = (bfd_boolean) _7;

  <bb 8> :
  return D.3556;

}



;; Function bfd_set_section_contents (bfd_set_section_contents, funcdef_no=34, decl_uid=3493, cgraph_uid=35, symbol_order=39)

Merging blocks 4 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
bfd_boolean bfd_set_section_contents (const void * location)
{
  bfd_boolean D.3562;

  <bb 2> :
  if (location != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = MEM[(int *)location];
  printf ("%d\n", _1);

  <bb 4> :
  _2 = rand ();
  _3 = _2 % 2;
  _4 = _3 == 1;
  D.3562 = (bfd_boolean) _4;
  return D.3562;

}



;; Function main (main, funcdef_no=36, decl_uid=3501, cgraph_uid=37, symbol_order=41)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
int main ()
{
  struct bfd_section * isection;
  struct bfd_section sec;
  int D.3564;

  <bb 2> :
  _1 = time (0B);
  _2 = (unsigned int) _1;
  srand (_2);
  isection = &sec;
  _3 = rand ();
  _4 = _3 % 3;
  _5 = (<unnamed-unsigned:2>) _4;
  sec.compress_status = _5;
  copy_section (isection);
  sec = {CLOBBER};
  D.3564 = 0;
  return D.3564;

}



;; Function copy_section (copy_section, funcdef_no=35, decl_uid=3496, cgraph_uid=36, symbol_order=40)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
;; 2 succs { 3 9 }
;; 3 succs { 5 4 }
;; 4 succs { 5 6 }
;; 5 succs { 13 }
;; 6 succs { 7 8 }
;; 7 succs { 13 }
;; 8 succs { 12 }
;; 9 succs { 10 11 }
;; 10 succs { 13 }
;; 11 succs { 12 }
;; 12 succs { 14 }
;; 13 succs { 14 }
;; 14 succs { 1 }
void copy_section (struct bfd_section * isection)
{
  void * memhunk;
  bfd_byte * memhunk;

  <bb 2> :
  memhunk = 0B;
  _1 = rand ();
  _2 = _1 % 2;
  if (_2 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  _3 = bfd_get_full_section_contents (isection, &memhunk);
  if (_3 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _4 = bfd_convert_section_contents (isection, &memhunk);
  if (_4 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 13>; [INV]

  <bb 6> :
  memhunk.1_5 = memhunk;
  _6 = MEM[(int *)memhunk.1_5];
  printf ("%d\n", _6);
  memhunk.2_7 = memhunk;
  _8 = bfd_set_section_contents (memhunk.2_7);
  if (_8 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 13>; [INV]

  <bb 8> :
  memhunk.3_9 = memhunk;
  free (memhunk.3_9);
  goto <bb 12>; [INV]

  <bb 9> :
  memhunk = malloc (4);
  memset (memhunk, 0, 4);
  _10 = bfd_set_section_contents (memhunk);
  if (_10 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 13>; [INV]

  <bb 11> :
  free (memhunk);

  <bb 12> :
  memhunk = {CLOBBER};
  goto <bb 14>; [INV]

  <bb 13> :
  memhunk = {CLOBBER};

  <bb 14> :
  return;

}


