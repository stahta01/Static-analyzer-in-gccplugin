
;; Function sshkey_new (sshkey_new, funcdef_no=22, decl_uid=3476, cgraph_uid=23, symbol_order=22)

Removing basic block 8
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10
;; 2 succs { 3 4 }
;; 3 succs { 10 }
;; 4 succs { 8 5 9 }
;; 5 succs { 6 7 }
;; 6 succs { 10 }
;; 7 succs { 9 }
;; 8 succs { 10 }
;; 9 succs { 10 }
;; 10 succs { 1 }
struct sshkey * sshkey_new (int type)
{
  struct DSA * dsa;
  struct sshkey * k;
  struct sshkey * D.3529;

  <bb 2> :
  k = calloc (1, 64);
  if (k == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.3529 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 10>; [INV]

  <bb 4> :
  k->type = type;
  k->ecdsa = 0B;
  k->ecdsa_nid = -1;
  k->dsa = 0B;
  k->rsa = 0B;
  k->cert = 0B;
  k->ed25519_sk = 0B;
  k->ed25519_pk = 0B;
  _1 = k->type;
  switch (_1) <default: <L7> [INV], case 2: <L2> [INV], case 6: <L2> [INV], case 11: <L10> [INV]>

  <bb 5> :
<L2>:
  dsa = malloc (56);
  if (dsa == 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  D.3529 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 10>; [INV]

  <bb 7> :
  k->dsa = dsa;
  goto <bb 9>; [INV]

  <bb 8> :
<L7>:
  free (k);
  D.3529 = 0B;
  goto <bb 10>; [INV]

  <bb 9> :
<L10>:
  D.3529 = k;

  <bb 10> :
  return D.3529;

}



;; Function sshkey_free (sshkey_free, funcdef_no=23, decl_uid=3486, cgraph_uid=24, symbol_order=23)

Removing basic block 8
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;; 2 succs { 3 4 }
;; 3 succs { 9 }
;; 4 succs { 8 5 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 9 }
;; 9 succs { 1 }
void sshkey_free (struct sshkey * k)
{
  <bb 2> :
  if (k == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 9>; [INV]

  <bb 4> :
  _1 = k->type;
  switch (_1) <default: <L9> [INV], case 2: <L2> [INV], case 6: <L2> [INV]>

  <bb 5> :
<L2>:
  _2 = k->dsa;
  if (_2 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _3 = k->dsa;
  free (_3);

  <bb 7> :
  k->dsa = 0B;

  <bb 8> :
<L9>:
  free (k);

  <bb 9> :
  return;

}



;; Function dsa_builtin_paramgen (dsa_builtin_paramgen, funcdef_no=24, decl_uid=3493, cgraph_uid=25, symbol_order=24)

Merging blocks 6 and 7
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 5 3 }
;; 3 succs { 5 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 1 }
int dsa_builtin_paramgen (struct DSA * ret)
{
  int ok;
  int D.3544;

  <bb 2> :
  ok = 0;
  printf ("%d\n", ret);
  _1 = ret->p;
  if (_1 == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _2 = ret->q;
  if (_2 == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _3 = ret->g;
  if (_3 == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _4 = rand ();
  _5 = _4 % 2;
  _6 = _5 == 1;
  ok = (int) _6;

  <bb 6> :
  D.3544 = ok;
  return D.3544;

}



;; Function DSA_generate_parameters_ex (DSA_generate_parameters_ex, funcdef_no=25, decl_uid=3497, cgraph_uid=26, symbol_order=25)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
int DSA_generate_parameters_ex (struct DSA * ret)
{
  size_t qbits;
  const EVP_MD * evpmd;
  int D.3546;

  <bb 2> :
  qbits = 8;
  D.3546 = dsa_builtin_paramgen (ret);
  return D.3546;

}



;; Function sshkey_generate (sshkey_generate, funcdef_no=27, decl_uid=3511, cgraph_uid=28, symbol_order=27)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13
;; 2 succs { 3 4 }
;; 3 succs { 13 }
;; 4 succs { 5 6 }
;; 5 succs { 13 }
;; 6 succs { 8 7 }
;; 7 succs { 9 }
;; 8 succs { 9 }
;; 9 succs { 10 11 }
;; 10 succs { 12 }
;; 11 succs { 12 }
;; 12 succs { 13 }
;; 13 succs { 1 }
int sshkey_generate (int type, u_int bits, struct sshkey * * keyp)
{
  int ret;
  struct sshkey * k;
  int D.3550;

  <bb 2> :
  ret = -1;
  if (keyp == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.3550 = -10;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 13>; [INV]

  <bb 4> :
  *keyp = 0B;
  k = sshkey_new (11);
  if (k == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  D.3550 = -2;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 13>; [INV]

  <bb 6> :
  if (type == 2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
<L4>:
  _1 = &k->dsa;
  ret = dsa_generate_private_key (bits, _1);
  goto <bb 9>; [INV]

  <bb 8> :
<L5>:
  ret = -10;

  <bb 9> :
  if (ret == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  k->type = type;
  *keyp = k;
  goto <bb 12>; [INV]

  <bb 11> :
  sshkey_free (k);

  <bb 12> :
  D.3550 = ret;

  <bb 13> :
  return D.3550;

}



;; Function dsa_generate_private_key (dsa_generate_private_key, funcdef_no=26, decl_uid=3503, cgraph_uid=27, symbol_order=26)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12
;; 2 succs { 3 4 }
;; 3 succs { 12 }
;; 4 succs { 5 6 }
;; 5 succs { 9 }
;; 6 succs { 7 8 }
;; 7 succs { 9 }
;; 8 succs { 9 }
;; 9 succs { 10 11 }
;; 10 succs { 11 }
;; 11 succs { 12 }
;; 12 succs { 1 }
int dsa_generate_private_key (u_int bits, struct DSA * * dsap)
{
  int ret;
  struct DSA * private;
  int D.3559;

  <bb 2> :
  ret = -1;
  if (dsap == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.3559 = -10;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 12>; [INV]

  <bb 4> :
  private = malloc (56);
  if (private == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  ret = -2;
  // predicted unlikely by goto predictor.
  goto <bb 9>; [INV]

  <bb 6> :
  *dsap = 0B;
  _1 = DSA_generate_parameters_ex (private);
  if (_1 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  free (private);
  ret = -22;
  // predicted unlikely by goto predictor.
  goto <bb 9>; [INV]

  <bb 8> :
  *dsap = private;
  private = 0B;
  ret = 0;

  <bb 9> :
out:
  if (private != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  free (private);

  <bb 11> :
  D.3559 = ret;

  <bb 12> :
  return D.3559;

}



;; Function main (main, funcdef_no=28, decl_uid=3518, cgraph_uid=29, symbol_order=28)

Removing basic block 6
Merging blocks 4 and 5
Merging blocks 4 and 7
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 1 }
int main ()
{
  struct sshkey public;
  struct sshkey * private;
  u_int bits;
  int type;
  int D.3569;

  <bb 2> :
  _1 = time (0B);
  _2 = (unsigned int) _1;
  srand (_2);
  _3 = sshkey_generate (2, bits, &private);
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  printf ("sshkey_generate error%s\n", "");
  exit (1);

  <bb 4> :
  private.0_4 = private;
  _5 = private.0_4->dsa;
  _5->flags = 0;
  private.1_6 = private;
  sshkey_free (private.1_6);
  D.3569 = 0;
  private = {CLOBBER};
  public = {CLOBBER};
  return D.3569;

}


