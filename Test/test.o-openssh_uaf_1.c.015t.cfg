
;; Function sshbuf_init (sshbuf_init, funcdef_no=22, decl_uid=3642, cgraph_uid=23, symbol_order=36)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
void sshbuf_init (struct sshbuf * ret)
{
  <bb 2> :
  explicit_bzero (ret, 72);
  ret->alloc = 256;
  ret->max_size = 134217728;
  ret->readonly = 0;
  ret->dont_free = 1;
  ret->refcount = 1;
  _1 = ret->alloc;
  _2 = calloc (1, _1);
  ret->d = _2;
  _3 = ret->d;
  ret->cd = _3;
  _4 = ret->cd;
  if (_4 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ret->alloc = 0;

  <bb 4> :
  return;

}



;; Function sshbuf_free (sshbuf_free, funcdef_no=23, decl_uid=3647, cgraph_uid=24, symbol_order=37)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12
;; 2 succs { 3 4 }
;; 3 succs { 12 }
;; 4 succs { 5 6 }
;; 5 succs { 12 }
;; 6 succs { 7 8 }
;; 7 succs { 12 }
;; 8 succs { 9 10 }
;; 9 succs { 10 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 1 }
void sshbuf_free (struct sshbuf * buf)
{
  int dont_free;

  <bb 2> :
  dont_free = 0;
  if (buf == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 12>; [INV]

  <bb 4> :
  _1 = sshbuf_check_sanity (buf);
  if (_1 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 12>; [INV]

  <bb 6> :
  _2 = buf->parent;
  sshbuf_free (_2);
  buf->parent = 0B;
  _3 = buf->refcount;
  _4 = _3 + 4294967295;
  buf->refcount = _4;
  _5 = buf->refcount;
  if (_5 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 12>; [INV]

  <bb 8> :
  dont_free = buf->dont_free;
  _6 = buf->readonly;
  if (_6 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _7 = buf->alloc;
  _8 = buf->d;
  explicit_bzero (_8, _7);
  _9 = buf->d;
  free (_9);

  <bb 10> :
  explicit_bzero (buf, 72);
  if (dont_free == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  free (buf);

  <bb 12> :
  return;

}



;; Function sshbuf_reset (sshbuf_reset, funcdef_no=24, decl_uid=3655, cgraph_uid=25, symbol_order=38)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;; 2 succs { 4 3 }
;; 3 succs { 4 5 }
;; 4 succs { 9 }
;; 5 succs { 6 8 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 9 }
;; 9 succs { 1 }
void sshbuf_reset (struct sshbuf * buf)
{
  u_char * d;

  <bb 2> :
  _1 = buf->readonly;
  if (_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _2 = buf->refcount;
  if (_2 > 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = buf->size;
  buf->off = _3;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 9>; [INV]

  <bb 5> :
  sshbuf_check_sanity (buf);
  buf->size = 0;
  _4 = buf->size;
  buf->off = _4;
  _5 = buf->alloc;
  if (_5 != 256)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _6 = buf->alloc;
  _7 = buf->d;
  _8 = recallocarray (_7, _6, 256, 1);
  _9 = (long int) _8;
  d = (u_char *) _9;
  if (d != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  buf->d = d;
  _10 = buf->d;
  buf->cd = _10;
  buf->alloc = 256;

  <bb 8> :
  _11 = buf->d;
  explicit_bzero (_11, 256);

  <bb 9> :
  return;

}



;; Function channel_new (channel_new, funcdef_no=26, decl_uid=3687, cgraph_uid=27, symbol_order=40)

Merging blocks 15 and 16
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 7 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 8 11 }
;; 8 succs { 9 10 }
;; 9 succs { }
;; 10 succs { 11 }
;; 11 succs { 14 12 }
;; 12 succs { 14 13 }
;; 13 succs { 14 15 }
;; 14 succs { }
;; 15 succs { 1 }
struct Channel * channel_new (struct ssh * ssh, char * ctype, int type, int rfd, int wfd, int efd, u_int window, u_int maxpack, int extusage, char * remote_name, int nonblock)
{
  static const char __func__[12] = "channel_new";
  struct Channel * c;
  u_int found;
  u_int i;
  struct ssh_channels * sc;
  struct Channel * D.3794;

  <bb 2> :
  sc = ssh->chanctxt;
  i = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = sc->channels;
  _2 = (long unsigned int) i;
  _3 = _2 * 8;
  _4 = _1 + _3;
  _5 = *_4;
  if (_5 == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  found = i;
  goto <bb 7>; [INV]

  <bb 5> :
  i = i + 1;

  <bb 6> :
  _6 = sc->channels_alloc;
  if (i < _6)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _7 = sc->channels_alloc;
  if (i >= _7)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  found = sc->channels_alloc;
  _8 = sc->channels_alloc;
  if (_8 > 16384)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  printf ("%s: internal error: channels_alloc too big", &__func__);
  exit (1);

  <bb 10> :
  _9 = sc->channels_alloc;
  _10 = _9 + 10;
  _11 = sc->channels_alloc;
  _12 = sc->channels;
  _13 = xrecallocarray (_12, _11, _10, 8);
  _14 = (long int) _13;
  _15 = (struct Channel * *) _14;
  sc->channels = _15;
  _16 = sc->channels_alloc;
  _17 = _16 + 10;
  sc->channels_alloc = _17;
  _18 = sc->channels_alloc;
  debug2 ("channel: expanding %d", _18);

  <bb 11> :
  _19 = sc->channels;
  _20 = (long unsigned int) found;
  _21 = _20 * 8;
  _22 = _19 + _21;
  _23 = calloc (1, 272);
  *_22 = _23;
  c = *_22;
  _24 = sshbuf_new ();
  _25 = (long int) _24;
  _26 = (struct sshbuf *) _25;
  c->input = _26;
  _27 = c->input;
  if (_27 == 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  _28 = sshbuf_new ();
  _29 = (long int) _28;
  _30 = (struct sshbuf *) _29;
  c->output = _30;
  _31 = c->output;
  if (_31 == 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  _32 = sshbuf_new ();
  _33 = (long int) _32;
  _34 = (struct sshbuf *) _33;
  c->extended = _34;
  _35 = c->extended;
  if (_35 == 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  printf ("%s: sshbuf_new failed", &__func__);
  exit (1);

  <bb 15> :
  c->ostate = 0;
  c->istate = 0;
  channel_register_fds (ssh, c, rfd, wfd, efd, extusage, nonblock, 0);
  found.0_36 = (int) found;
  c->self = found.0_36;
  c->type = type;
  c->ctype = ctype;
  c->local_window = window;
  c->local_window_max = window;
  c->local_maxpacket = maxpack;
  _37 = strdup (remote_name);
  c->remote_name = _37;
  c->ctl_chan = -1;
  c->delayed = 1;
  debug ("channel %d: new [%s]", found, remote_name);
  D.3794 = c;
  return D.3794;

}



;; Function channel_init_channels (channel_init_channels, funcdef_no=27, decl_uid=3710, cgraph_uid=28, symbol_order=41)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 5 3 }
;; 3 succs { 5 4 }
;; 4 succs { 5 6 }
;; 5 succs { }
;; 6 succs { 1 }
void channel_init_channels (struct ssh * ssh)
{
  static const char __func__[22] = "channel_init_channels";
  struct ssh_channels * sc;

  <bb 2> :
  sc = calloc (1, 112);
  if (sc == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _1 = calloc (21, 8);
  sc->channel_pre = _1;
  _2 = sc->channel_pre;
  if (_2 == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _3 = calloc (21, 8);
  sc->channel_post = _3;
  _4 = sc->channel_post;
  if (_4 == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  printf ("%s: allocation failed", &__func__);
  exit (1);

  <bb 6> :
  sc->channels_alloc = 10;
  _5 = sc->channels_alloc;
  _6 = (long unsigned int) _5;
  _7 = calloc (_6, 8);
  sc->channels = _7;
  channel_handler_init (sc);
  ssh->chanctxt = sc;
  return;

}



;; Function channel_free (channel_free, funcdef_no=28, decl_uid=3718, cgraph_uid=29, symbol_order=42)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
;;
;; Loop 1
;;  header 10, latch 9
;;  depth 1, outer 0
;;  nodes: 10 9 4 5 6 7 8 3
;; 2 succs { 10 }
;; 3 succs { 4 5 }
;; 4 succs { 9 }
;; 5 succs { 6 9 }
;; 6 succs { 7 9 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 10 }
;; 10 succs { 3 11 }
;; 11 succs { 12 13 }
;; 12 succs { 14 }
;; 13 succs { 14 }
;; 14 succs { 15 16 }
;; 15 succs { 16 }
;; 16 succs { 1 }
void channel_free (struct ssh * ssh, struct Channel * c)
{
  struct channel_confirm * cc;
  struct Channel * other;
  u_int n;
  u_int i;
  char * s;
  struct ssh_channels * sc;
  char * iftmp.1;

  <bb 2> :
  sc = ssh->chanctxt;
  n = 0;
  i = 0;
  goto <bb 10>; [INV]

  <bb 3> :
  _1 = sc->channels;
  _2 = (long unsigned int) i;
  _3 = _2 * 8;
  _4 = _1 + _3;
  other = *_4;
  if (other == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  // predicted unlikely by continue predictor.
  goto <bb 9>; [INV]

  <bb 5> :
  n = n + 1;
  _5 = c->type;
  if (_5 == 16)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  _6 = other->type;
  if (_6 == 20)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _7 = other->mux_ctx;
  if (c == _7)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  other->mux_ctx = 0B;
  other->type = 4;
  other->istate = 3;
  other->ostate = 3;

  <bb 9> :
  i = i + 1;

  <bb 10> :
  _8 = sc->channels_alloc;
  if (i < _8)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _9 = c->remote_name;
  if (_9 != 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  iftmp.1 = c->remote_name;
  goto <bb 14>; [INV]

  <bb 13> :
  iftmp.1 = "???";

  <bb 14> :
  _10 = c->self;
  debug ("channel %d: free: %s, nchannels %u", _10, iftmp.1, n);
  _11 = c->type;
  if (_11 == 16)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  mux_remove_remote_forwardings (ssh, c);

  <bb 16> :
  _12 = channel_open_message (ssh);
  _13 = (long int) _12;
  s = (char *) _13;
  _14 = c->self;
  debug3 ("channel %d: status: %s", _14, s);
  free (s);
  channel_close_fds (ssh, c);
  _15 = c->input;
  sshbuf_free (_15);
  _16 = c->output;
  sshbuf_free (_16);
  _17 = c->extended;
  sshbuf_free (_17);
  c->extended = 0B;
  _18 = c->extended;
  c->output = _18;
  _19 = c->output;
  c->input = _19;
  _20 = c->remote_name;
  free (_20);
  c->remote_name = 0B;
  _21 = c->path;
  free (_21);
  c->path = 0B;
  _22 = c->listening_addr;
  free (_22);
  c->listening_addr = 0B;
  _23 = sc->channels;
  _24 = c->self;
  _25 = (long unsigned int) _24;
  _26 = _25 * 8;
  _27 = _23 + _26;
  *_27 = 0B;
  __builtin_memset (c, 0, 272);
  free (c);
  return;

}



;; Function channel_free_all (channel_free_all, funcdef_no=29, decl_uid=3742, cgraph_uid=30, symbol_order=43)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }
void channel_free_all (struct ssh * ssh)
{
  u_int i;

  <bb 2> :
  i = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = ssh->chanctxt;
  _2 = _1->channels;
  _3 = (long unsigned int) i;
  _4 = _3 * 8;
  _5 = _2 + _4;
  _6 = *_5;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _7 = ssh->chanctxt;
  _8 = _7->channels;
  _9 = (long unsigned int) i;
  _10 = _9 * 8;
  _11 = _8 + _10;
  _12 = *_11;
  channel_free (ssh, _12);

  <bb 5> :
  i = i + 1;

  <bb 6> :
  _13 = ssh->chanctxt;
  _14 = _13->channels_alloc;
  if (i < _14)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  return;

}



;; Function main (main, funcdef_no=30, decl_uid=3751, cgraph_uid=31, symbol_order=44)

Removing basic block 7
Merging blocks 5 and 6
Merging blocks 5 and 8
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
int main (int argc, char * * argv)
{
  int i;
  int out;
  int in;
  struct Channel * c;
  struct ssh ssh;
  int D.3816;

  <bb 2> :
  channel_init_channels (&ssh);
  i = 1;
  goto <bb 4>; [INV]

  <bb 3> :
  c = channel_new (&ssh, "stdio-forward", 3, in, out, -1, 2097152, 32768, 0, "stdio-forward", 0);
  i = i + 1;

  <bb 4> :
  if (i < argc)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _1 = c->extended;
  _2 = c->output;
  _3 = c->input;
  client_suspend_self (_3, _2, _1);
  channel_free_all (&ssh);
  D.3816 = 0;
  ssh = {CLOBBER};
  return D.3816;

}



;; Function client_suspend_self (client_suspend_self, funcdef_no=25, decl_uid=3665, cgraph_uid=26, symbol_order=39)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 1 }
void client_suspend_self (struct sshbuf * bin, struct sshbuf * bout, struct sshbuf * berr)
{
  <bb 2> :
  _1 = sshbuf_len (bout);
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = sshbuf_len (bout);
  _3 = (unsigned int) _2;
  _4 = sshbuf_mutable_ptr (bout);
  stdout.2_5 = stdout;
  _6 = fileno (stdout.2_5);
  atomicio (vwrite, _6, _4, _3);

  <bb 4> :
  _7 = sshbuf_len (berr);
  if (_7 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _8 = sshbuf_len (berr);
  _9 = (unsigned int) _8;
  _10 = sshbuf_mutable_ptr (berr);
  stderr.3_11 = stderr;
  _12 = fileno (stderr.3_11);
  atomicio (vwrite, _12, _10, _9);

  <bb 6> :
  sshbuf_free (bin);
  sshbuf_free (bout);
  sshbuf_free (berr);
  received_window_change_signal = 1;
  sshbuf_init (bin);
  sshbuf_init (bout);
  sshbuf_init (berr);
  return;

}


