
;; Function discard_cleanups (discard_cleanups, funcdef_no=22, decl_uid=3018, cgraph_uid=23, symbol_order=27)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void discard_cleanups (struct cleanup * old_chain)
{
  <bb 2> :
  discard_my_cleanups (&cleanup_chain, old_chain);
  return;

}



;; Function discard_final_cleanups (discard_final_cleanups, funcdef_no=23, decl_uid=3023, cgraph_uid=24, symbol_order=28)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void discard_final_cleanups (struct cleanup * old_chain)
{
  <bb 2> :
  discard_my_cleanups (&final_cleanup_chain, old_chain);
  return;

}



;; Function discard_my_cleanups (discard_my_cleanups, funcdef_no=24, decl_uid=3021, cgraph_uid=25, symbol_order=29)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }
void discard_my_cleanups (struct cleanup * * pmy_chain, struct cleanup * old_chain)
{
  struct cleanup * ptr;

  <bb 2> :
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = ptr->next;
  *pmy_chain = _1;
  _2 = ptr->free_arg;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = ptr->free_arg;
  _4 = ptr->arg;
  _3 (_4);

  <bb 5> :
  free (ptr);

  <bb 6> :
  ptr = *pmy_chain;
  if (ptr != old_chain)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _5 = ptr->arg;
  printf ("freearg: %x\n", _5);
  return;

}



;; Function do_cleanups (do_cleanups, funcdef_no=26, decl_uid=3028, cgraph_uid=27, symbol_order=31)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void do_cleanups (struct cleanup * old_chain)
{
  <bb 2> :
  do_my_cleanups (&cleanup_chain, old_chain);
  return;

}



;; Function do_my_cleanups (do_my_cleanups, funcdef_no=25, decl_uid=3026, cgraph_uid=26, symbol_order=30)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }
void do_my_cleanups (struct cleanup * * pmy_chain, struct cleanup * old_chain)
{
  struct cleanup * ptr;

  <bb 2> :
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = ptr->next;
  *pmy_chain = _1;
  _2 = ptr->function;
  _3 = ptr->arg;
  _2 (_3);
  __builtin_puts (&"cleanup!!!!! ========="[0]);
  _4 = ptr->arg;
  printf ("%x\n", _4);
  _5 = ptr->free_arg;
  if (_5 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = ptr->free_arg;
  _7 = ptr->arg;
  _6 (_7);

  <bb 5> :
  free (ptr);

  <bb 6> :
  ptr = *pmy_chain;
  if (ptr != old_chain)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  return;

}



;; Function make_cleanup (make_cleanup, funcdef_no=29, decl_uid=3041, cgraph_uid=30, symbol_order=34)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
struct cleanup * make_cleanup (void (*<T59c>) (void *) function, void * arg)
{
  struct cleanup * D.3536;

  <bb 2> :
  D.3536 = make_my_cleanup (&cleanup_chain, function, arg);
  return D.3536;

}



;; Function make_my_cleanup (make_my_cleanup, funcdef_no=28, decl_uid=3038, cgraph_uid=29, symbol_order=33)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
struct cleanup * make_my_cleanup (struct cleanup * * pmy_chain, void (*<T59c>) (void *) function, void * arg)
{
  struct cleanup * D.3538;

  <bb 2> :
  D.3538 = make_my_cleanup2 (pmy_chain, function, arg, 0B);
  return D.3538;

}



;; Function make_my_cleanup2 (make_my_cleanup2, funcdef_no=27, decl_uid=3034, cgraph_uid=28, symbol_order=32)

Merging blocks 4 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 1 }
struct cleanup * make_my_cleanup2 (struct cleanup * * pmy_chain, void (*<T59c>) (void *) function, void * arg, void (*<Tee>) (void *) free_arg)
{
  struct cleanup * old_chain;
  struct cleanup * new;
  struct cleanup * D.3542;

  <bb 2> :
  new = malloc (32);
  old_chain = *pmy_chain;
  _1 = *pmy_chain;
  new->next = _1;
  new->function = function;
  new->free_arg = free_arg;
  new->arg = arg;
  *pmy_chain = new;
  if (old_chain == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  exit (1);

  <bb 4> :
  D.3542 = old_chain;
  return D.3542;

}



;; Function make_tempname (make_tempname, funcdef_no=31, decl_uid=3478, cgraph_uid=32, symbol_order=38)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
char * make_tempname (char * filename)
{
  int fd;
  char * tmpname;
  char * D.3546;

  <bb 2> :
  tmpname = template_in_dir (filename);
  fd = mkstemp (tmpname);
  if (fd == -1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  free (tmpname);
  D.3546 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  close (fd);
  D.3546 = tmpname;

  <bb 5> :
  return D.3546;

}



;; Function template_in_dir (template_in_dir, funcdef_no=30, decl_uid=3469, cgraph_uid=31, symbol_order=37)

Merging blocks 5 and 6
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
char * template_in_dir (const char * path)
{
  size_t len;
  char * tmpname;
  const char * slash;
  char * D.3551;

  <bb 2> :
  slash = strrchr (path, 47);
  if (slash != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = slash - path;
  len = (size_t) _1;
  _2 = len + 11;
  tmpname = malloc (_2);
  memcpy (tmpname, path, len);
  len.0_3 = len;
  len = len.0_3 + 1;
  _4 = tmpname + len.0_3;
  *_4 = 47;
  goto <bb 5>; [INV]

  <bb 4> :
  tmpname = malloc (9);
  len = 0;

  <bb 5> :
  _5 = tmpname + len;
  memcpy (_5, "stXXXXXX", 9);
  D.3551 = tmpname;
  return D.3551;

}



;; Function set_times (set_times, funcdef_no=32, decl_uid=3486, cgraph_uid=33, symbol_order=39)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
void set_times (const char * destination, const struct stat * statbuf)
{
  long int tb[2];
  int result;

  <bb 2> :
  _1 = statbuf->st_atim.tv_sec;
  tb[0] = _1;
  _2 = statbuf->st_mtim.tv_sec;
  tb[1] = _2;
  result = utime (destination, &tb);
  tb = {CLOBBER};
  if (result != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  printf ("%s: cannot set time:", destination);

  <bb 4> :
  return;

}



;; Function smart_rename (smart_rename, funcdef_no=33, decl_uid=3495, cgraph_uid=34, symbol_order=40)

Removing basic block 9
Removing basic block 11
Merging blocks 17 and 18
Merging blocks 17 and 19
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
;; 2 succs { 5 3 }
;; 3 succs { 4 10 }
;; 4 succs { 5 10 }
;; 5 succs { 6 9 }
;; 6 succs { 7 15 }
;; 7 succs { 8 15 }
;; 8 succs { 15 }
;; 9 succs { 15 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 15 }
;; 15 succs { 1 }
int smart_rename (const char * from, const char * to, int preserve_dates)
{
  int ret;
  struct stat s;
  bfd_boolean exists;
  int D.3571;

  <bb 2> :
  ret = 0;
  _1 = lstat (to, &s);
  _2 = _1 == 0;
  exists = (bfd_boolean) _2;
  if (exists == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _3 = BIT_FIELD_REF <s, 32, 192>;
  _4 = _3 & 61568;
  if (_4 == 32896)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  _5 = s.st_nlink;
  if (_5 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  ret = rename (from, to);
  if (ret == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  if (exists != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 7> :
  _6 = s.st_mode;
  _7 = _6 & 511;
  chmod (to, _7);
  _8 = s.st_gid;
  _9 = s.st_uid;
  _10 = chown (to, _9, _8);
  if (_10 >= 0)
    goto <bb 8>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 8> :
  _11 = s.st_mode;
  _12 = _11 & 4095;
  chmod (to, _12);
  goto <bb 15>; [INV]

  <bb 9> :
  printf ("unable to rename \'%s\';", to);
  unlink (from);
  goto <bb 15>; [INV]

  <bb 10> :
  if (ret != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  printf ("unable to copy file \'%s\';", to);

  <bb 12> :
  if (preserve_dates != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  set_times (to, &s);

  <bb 14> :
  unlink (from);

  <bb 15> :
  D.3571 = ret;
  s = {CLOBBER};
  return D.3571;

}



;; Function unlink_if_ordinary (unlink_if_ordinary, funcdef_no=34, decl_uid=3506, cgraph_uid=35, symbol_order=41)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void unlink_if_ordinary (const char * name)
{
  <bb 2> :
  _1 = MEM[(int *)name];
  printf ("%d\n", _1);
  return;

}



;; Function bfd_openw (bfd_openw, funcdef_no=35, decl_uid=3509, cgraph_uid=36, symbol_order=42)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
struct bfd * bfd_openw (const char * name)
{
  struct bfd * nbfd;
  struct bfd * D.3574;

  <bb 2> :
  _1 = MEM[(int *)name];
  printf ("%d\n", _1);
  nbfd = malloc (48);
  D.3574 = nbfd;
  return D.3574;

}



;; Function bfd_close (bfd_close, funcdef_no=36, decl_uid=3513, cgraph_uid=37, symbol_order=43)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
bfd_boolean * bfd_close (struct bfd * abfd)
{
  bfd_boolean ret;

  <bb 2> :
  _1 = rand ();
  _2 = _1 % 2;
  _3 = _2 == 1;
  ret = (bfd_boolean) _3;
  free (abfd);
  return;

}



;; Function bfd_get_filename (bfd_get_filename, funcdef_no=37, decl_uid=3517, cgraph_uid=38, symbol_order=44)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
char * bfd_get_filename (struct bfd * iarch)
{
  char * D.3576;

  <bb 2> :
  D.3576 = iarch->filename;
  return D.3576;

}



;; Function main (main, funcdef_no=39, decl_uid=3528, cgraph_uid=40, symbol_order=46)

Removing basic block 4
Merging blocks 2 and 3
Merging blocks 2 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
int main ()
{
  struct bfd iarch;
  int D.3578;

  <bb 2> :
  write_archive (&iarch);
  D.3578 = 0;
  iarch = {CLOBBER};
  return D.3578;

}



;; Function write_archive (write_archive, funcdef_no=38, decl_uid=3520, cgraph_uid=39, symbol_order=45)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 5 6 }
;; 5 succs { }
;; 6 succs { 7 8 }
;; 7 succs { }
;; 8 succs { 9 10 }
;; 9 succs { }
;; 10 succs { 1 }
void write_archive (struct bfd * iarch)
{
  struct bfd * contents_head;
  char * new_name;
  char * old_name;
  struct bfd * obfd;

  <bb 2> :
  contents_head = iarch->archive_next;
  _1 = bfd_get_filename (iarch);
  _2 = strlen (_1);
  _3 = _2 + 1;
  old_name = malloc (_3);
  _4 = bfd_get_filename (iarch);
  strcpy (old_name, _4);
  new_name = make_tempname (old_name);
  if (new_name == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  printf ("could not create temporary file whilst writing archive%s", "");
  exit (1);

  <bb 4> :
  output_filename = new_name;
  obfd = bfd_openw (new_name);
  if (obfd == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  printf ("%s", old_name);
  exit (1);

  <bb 6> :
  _5 = bfd_close (obfd);
  if (_5 == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  printf ("%s", old_name);
  exit (1);

  <bb 8> :
  output_filename = 0B;
  bfd_close (iarch);
  _6 = smart_rename (new_name, old_name, 0);
  if (_6 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  exit (1);

  <bb 10> :
  free (old_name);
  return;

}


