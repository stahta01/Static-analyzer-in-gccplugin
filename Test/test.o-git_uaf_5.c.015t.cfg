
;; Function xrealloc (xrealloc, funcdef_no=26, decl_uid=3272, cgraph_uid=27, symbol_order=27)

Merging blocks 9 and 10
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 9 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 8 9 }
;; 8 succs { }
;; 9 succs { 1 }
void * xrealloc (void * ptr, size_t size)
{
  void * ret;
  void * D.3394;

  <bb 2> :
  ret = realloc (ptr, size);
  _1 = ret == 0B;
  _2 = size == 0;
  _3 = _1 & _2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ret = realloc (ptr, 1);

  <bb 4> :
  if (ret == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  ret = realloc (ptr, size);
  _4 = ret == 0B;
  _5 = size == 0;
  _6 = _4 & _5;
  if (_6 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  ret = realloc (ptr, 1);

  <bb 7> :
  if (ret == 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  printf ("Out of memory, realloc failed%s", "");
  exit (1);

  <bb 9> :
  D.3394 = ret;
  return D.3394;

}



;; Function is_directory (is_directory, funcdef_no=28, decl_uid=3330, cgraph_uid=29, symbol_order=29)

Merging blocks 6 and 7
Merging blocks 6 and 8
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 3 5 }
;; 3 succs { 4 5 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 1 }
int is_directory (const char * path)
{
  struct stat st;
  int iftmp.0;
  int D.3396;

  <bb 2> :
  _1 = stat (path, &st);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = st.st_mode;
  _3 = _2 & 61440;
  if (_3 == 16384)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.0 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.0 = 0;

  <bb 6> :
  D.3396 = iftmp.0;
  st = {CLOBBER};
  return D.3396;

}



;; Function real_path (real_path, funcdef_no=29, decl_uid=3334, cgraph_uid=30, symbol_order=30)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
const char * real_path (const char * path)
{
  const char * D.3404;

  <bb 2> :
  _1 = real_path_internal (path, 1);
  _2 = (long int) _1;
  D.3404 = (const char *) _2;
  return D.3404;

}



;; Function read_gitfile_gently (read_gitfile_gently, funcdef_no=30, decl_uid=3324, cgraph_uid=31, symbol_order=31)

Removing basic block 14
Merging blocks 40 and 41
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
;;
;; Loop 1
;;  header 15, latch 14
;;  depth 1, outer 0
;;  nodes: 15 14
;; 2 succs { 3 4 }
;; 3 succs { 24 }
;; 4 succs { 5 6 }
;; 5 succs { 24 }
;; 6 succs { 7 8 }
;; 7 succs { 24 }
;; 8 succs { 9 10 }
;; 9 succs { 24 }
;; 10 succs { 11 12 }
;; 11 succs { 24 }
;; 12 succs { 13 15 }
;; 13 succs { 24 }
;; 14 succs { 15 }
;; 15 succs { 14 16 }
;; 16 succs { 17 18 }
;; 17 succs { 24 }
;; 18 succs { 19 21 }
;; 19 succs { 20 21 }
;; 20 succs { 21 }
;; 21 succs { 22 23 }
;; 22 succs { 24 }
;; 23 succs { 24 }
;; 24 succs { 25 26 }
;; 25 succs { 26 }
;; 26 succs { 27 38 }
;; 27 succs { 28 29 }
;; 28 succs { 39 }
;; 29 succs { 37 30 31 33 34 35 36 32 }
;; 30 succs { 39 }
;; 31 succs { }
;; 32 succs { }
;; 33 succs { }
;; 34 succs { }
;; 35 succs { }
;; 36 succs { }
;; 37 succs { 38 }
;; 38 succs { 39 }
;; 39 succs { 1 }
const char * read_gitfile_gently (const char * path, int * return_error_code)
{
  size_t dirlen;
  size_t pathlen;
  ssize_t len;
  int fd;
  struct stat st;
  const char * slash;
  char * dir;
  char * buf;
  int error_code;
  const int max_file_size;
  const char * D.3433;
  char D.3418;

  <bb 2> :
  max_file_size = 1048576;
  error_code = 0;
  buf = 0B;
  dir = 0B;
  _1 = stat (path, &st);
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  error_code = 1;
  // predicted unlikely by goto predictor.
  goto <bb 24>; [INV]

  <bb 4> :
  _2 = st.st_mode;
  _3 = _2 & 61440;
  if (_3 != 32768)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  error_code = 2;
  // predicted unlikely by goto predictor.
  goto <bb 24>; [INV]

  <bb 6> :
  _4 = st.st_size;
  if (_4 > 1048576)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  error_code = 8;
  // predicted unlikely by goto predictor.
  goto <bb 24>; [INV]

  <bb 8> :
  fd = open (path, 0);
  if (fd < 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  error_code = 3;
  // predicted unlikely by goto predictor.
  goto <bb 24>; [INV]

  <bb 10> :
  _5 = st.st_size;
  _6 = _5 + 1;
  _7 = (long unsigned int) _6;
  buf = malloc (_7);
  _8 = st.st_size;
  _9 = read_in_full (fd, buf, _8);
  len = (ssize_t) _9;
  close (fd);
  _10 = st.st_size;
  if (len != _10)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  error_code = 4;
  // predicted unlikely by goto predictor.
  goto <bb 24>; [INV]

  <bb 12> :
  len.1_11 = (sizetype) len;
  _12 = buf + len.1_11;
  *_12 = 0;
  _13 = starts_with (buf, "gitdir: ");
  if (_13 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  error_code = 5;
  // predicted unlikely by goto predictor.
  goto <bb 24>; [INV]

  <bb 14> :
  len = len + -1;

  <bb 15> :
  len.2_14 = (sizetype) len;
  _15 = len.2_14 + 18446744073709551615;
  _16 = buf + _15;
  D.3418 = *_16;
  _17 = D.3418 == 10;
  _18 = D.3418 == 13;
  _19 = _17 | _18;
  if (_19 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  if (len <= 8)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  error_code = 6;
  // predicted unlikely by goto predictor.
  goto <bb 24>; [INV]

  <bb 18> :
  len.3_20 = (sizetype) len;
  _21 = buf + len.3_20;
  *_21 = 0;
  dir = buf + 8;
  _22 = is_absolute_path (dir);
  if (_22 == 0)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 19> :
  slash = strrchr (path, 47);
  if (slash != 0B)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  _23 = slash + 1;
  _24 = _23 - path;
  pathlen = (size_t) _24;
  len.4_25 = (long unsigned int) len;
  _26 = pathlen + len.4_25;
  dirlen = _26 + 18446744073709551608;
  _27 = dirlen + 1;
  dir = malloc (_27);
  strncpy (dir, path, pathlen);
  _28 = len + -8;
  _29 = (long unsigned int) _28;
  _30 = buf + 8;
  _31 = dir + pathlen;
  strncpy (_31, _30, _29);
  _32 = dir + dirlen;
  *_32 = 0;
  free (buf);
  buf = dir;

  <bb 21> :
  _33 = is_git_directory (dir);
  if (_33 == 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  error_code = 7;
  // predicted unlikely by goto predictor.
  goto <bb 24>; [INV]

  <bb 23> :
  update_linked_gitdir (path, dir);
  path = real_path (dir);

  <bb 24> :
cleanup_return:
  free (buf);
  if (return_error_code != 0B)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  *return_error_code = error_code;

  <bb 26> :
  if (error_code != 0)
    goto <bb 27>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 27> :
  if (return_error_code != 0B)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  D.3433 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 39>; [INV]

  <bb 29> :
  switch (error_code) <default: <L37> [INV], case 1 ... 2: <L29> [INV], case 3: <L31> [INV], case 4: <L33> [INV], case 5: <L34> [INV], case 6: <L35> [INV], case 7: <L36> [INV], case 8: <L32> [INV]>

  <bb 30> :
<L29>:
  D.3433 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 39>; [INV]

  <bb 31> :
<L31>:
  printf ("Error opening \'%s\'", path);
  exit (1);

  <bb 32> :
<L32>:
  printf ("Too large to be a .git file: \'%s\'", path);
  exit (1);

  <bb 33> :
<L33>:
  printf ("Error reading %s", path);
  exit (1);

  <bb 34> :
<L34>:
  printf ("Invalid gitfile format: %s", path);
  exit (1);

  <bb 35> :
<L35>:
  printf ("No path in gitfile: %s", path);
  exit (1);

  <bb 36> :
<L36>:
  printf ("Not a git repository: %s", dir);
  exit (1);

  <bb 37> :
<L37>:
  assert (0);

  <bb 38> :
  D.3433 = path;

  <bb 39> :
  st = {CLOBBER};
  return D.3433;

}



;; Function main (main, funcdef_no=31, decl_uid=3382, cgraph_uid=32, symbol_order=32)

Removing basic block 4
Merging blocks 2 and 3
Merging blocks 2 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
int main ()
{
  int error_code;
  int D.3436;

  <bb 2> :
  read_gitfile_gently ("path", &error_code);
  D.3436 = 0;
  error_code = {CLOBBER};
  return D.3436;

}


