
;; Function X509_STORE_CTX_cleanup (X509_STORE_CTX_cleanup, funcdef_no=22, decl_uid=3553, cgraph_uid=23, symbol_order=24)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 3 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 1 }
void X509_STORE_CTX_cleanup (struct X509_STORE_CTX * ctx)
{
  <bb 2> :
  _1 = ctx->param;
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _2 = ctx->param;
  printf ("%x\n", _2);
  _3 = ctx->parent;
  if (_3 == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _4 = ctx->param;
  X509_VERIFY_PARAM_free (_4);

  <bb 5> :
  ctx->param = 0B;

  <bb 6> :
  _5 = ctx->tree;
  X509_policy_tree_free (_5);
  ctx->tree = 0B;
  return;

}



;; Function X509_STORE_CTX_free (X509_STORE_CTX_free, funcdef_no=23, decl_uid=3562, cgraph_uid=24, symbol_order=25)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
void X509_STORE_CTX_free (struct X509_STORE_CTX * ctx)
{
  <bb 2> :
  if (ctx == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  X509_STORE_CTX_cleanup (ctx);
  free (ctx);

  <bb 5> :
  return;

}



;; Function test_ptr (test_ptr, funcdef_no=24, decl_uid=3568, cgraph_uid=25, symbol_order=26)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
int test_ptr (const char * file, int line, const char * s, const void * p)
{
  int D.3645;

  <bb 2> :
  if (p != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.3645 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  test_fail_message (0B, file, line, "ptr", s, "NULL", "!=", "%p", p);
  D.3645 = 0;

  <bb 5> :
  return D.3645;

}



;; Function X509_VERIFY_PARAM_set_depth (X509_VERIFY_PARAM_set_depth, funcdef_no=25, decl_uid=3574, cgraph_uid=26, symbol_order=27)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void X509_VERIFY_PARAM_set_depth (struct X509_VERIFY_PARAM * param, int depth)
{
  <bb 2> :
  param->depth = depth;
  return;

}



;; Function X509_VERIFY_PARAM_set_time (X509_VERIFY_PARAM_set_time, funcdef_no=26, decl_uid=3578, cgraph_uid=27, symbol_order=28)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void X509_VERIFY_PARAM_set_time (struct X509_VERIFY_PARAM * param, time_t t)
{
  <bb 2> :
  param->check_time = t;
  _1 = param->flags;
  _2 = _1 | 2;
  param->flags = _2;
  return;

}



;; Function X509_VERIFY_PARAM_get_time (X509_VERIFY_PARAM_get_time, funcdef_no=27, decl_uid=3581, cgraph_uid=28, symbol_order=29)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
time_t X509_VERIFY_PARAM_get_time (const struct X509_VERIFY_PARAM * param)
{
  time_t D.3647;

  <bb 2> :
  D.3647 = param->check_time;
  return D.3647;

}



;; Function X509_VERIFY_PARAM_set_flags (X509_VERIFY_PARAM_set_flags, funcdef_no=28, decl_uid=3585, cgraph_uid=29, symbol_order=30)

Merging blocks 4 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
int X509_VERIFY_PARAM_set_flags (struct X509_VERIFY_PARAM * param, long unsigned int flags)
{
  int D.3651;

  <bb 2> :
  _1 = param->flags;
  _2 = flags | _1;
  param->flags = _2;
  _3 = flags & 1920;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = param->flags;
  _5 = _4 | 128;
  param->flags = _5;

  <bb 4> :
  D.3651 = 1;
  return D.3651;

}



;; Function X509_STORE_CTX_set0_param (X509_STORE_CTX_set0_param, funcdef_no=29, decl_uid=3589, cgraph_uid=30, symbol_order=31)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void X509_STORE_CTX_set0_param (struct X509_STORE_CTX * ctx, struct X509_VERIFY_PARAM * param)
{
  <bb 2> :
  _1 = ctx->param;
  X509_VERIFY_PARAM_free (_1);
  ctx->param = param;
  return;

}



;; Function X509_verify_cert (X509_verify_cert, funcdef_no=31, decl_uid=3604, cgraph_uid=32, symbol_order=34)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
;; 2 succs { 3 4 }
;; 3 succs { 14 }
;; 4 succs { 5 7 }
;; 5 succs { 6 7 }
;; 6 succs { 14 }
;; 7 succs { 8 9 }
;; 8 succs { 10 }
;; 9 succs { 10 }
;; 10 succs { 11 13 }
;; 11 succs { 12 13 }
;; 12 succs { 13 }
;; 13 succs { 14 }
;; 14 succs { 1 }
int X509_verify_cert (struct X509_STORE_CTX * ctx)
{
  int ret;
  struct SSL_DANE * dane;
  int D.3655;

  <bb 2> :
  dane = ctx->dane;
  _1 = ctx->cert;
  if (_1 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ctx->error = 69;
  D.3655 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 14>; [INV]

  <bb 4> :
  _2 = ctx->cert;
  X509_up_ref (_2);
  ctx->num_untrusted = 1;
  _3 = ctx->cert;
  _4 = check_key_level (ctx, _3);
  if (_4 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _5 = ctx->cert;
  _6 = verify_cb_cert (ctx, _5, 0, 66);
  if (_6 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  D.3655 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 14>; [INV]

  <bb 7> :
  _7 = DANETLS_ENABLED (dane);
  if (_7 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  ret = dane_verify (ctx);
  goto <bb 10>; [INV]

  <bb 9> :
  ret = verify_chain (ctx);

  <bb 10> :
  if (ret <= 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _8 = ctx->error;
  if (_8 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  ctx->error = 1;

  <bb 13> :
  D.3655 = ret;

  <bb 14> :
  return D.3655;

}



;; Function check_key_level (check_key_level, funcdef_no=30, decl_uid=3595, cgraph_uid=31, symbol_order=33)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;; 2 succs { 3 4 }
;; 3 succs { 7 }
;; 4 succs { 5 6 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 1 }
int check_key_level (struct X509_STORE_CTX * ctx, struct X509 * cert)
{
  int level;
  struct EVP_PKEY * pkey;
  int D.3670;

  <bb 2> :
  _1 = X509_get0_pubkey (cert);
  _2 = (long int) _1;
  pkey = (struct EVP_PKEY *) _2;
  _3 = ctx->param;
  level = _3->auth_level;
  if (pkey == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.3670 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 7>; [INV]

  <bb 4> :
  if (level <= 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  D.3670 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 7>; [INV]

  <bb 6> :
  _4 = EVP_PKEY_security_bits (pkey);
  _5 = level + -1;
  _6 = minbits_table[_5];
  _7 = _4 >= _6;
  D.3670 = (int) _7;

  <bb 7> :
  return D.3670;

}



;; Function main (main, funcdef_no=33, decl_uid=3633, cgraph_uid=34, symbol_order=36)

Removing basic block 3
Merging blocks 2 and 4
Merging blocks 2 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
int main ()
{
  int D.3676;

  <bb 2> :
  test_no_crl ();
  test_root.0_1 = test_root;
  X509_free (test_root.0_1);
  test_leaf.1_2 = test_leaf;
  X509_free (test_leaf.1_2);
  D.3676 = 0;
  return D.3676;

}



;; Function test_no_crl (test_no_crl, funcdef_no=32, decl_uid=3626, cgraph_uid=33, symbol_order=35)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
int test_no_crl ()
{
  int D.3678;

  <bb 2> :
  test_root.2_1 = test_root;
  test_leaf.3_2 = test_leaf;
  _3 = verify (test_leaf.3_2, test_root.2_1, 0B, 4);
  D.3678 = TEST_int_eq (_3, 3);
  return D.3678;

}


