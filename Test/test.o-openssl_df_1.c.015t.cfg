
;; Function OPENSSL_sk_new_null (OPENSSL_sk_new_null, funcdef_no=22, decl_uid=3555, cgraph_uid=23, symbol_order=22)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
struct OPENSSL_STACK * OPENSSL_sk_new_null ()
{
  struct OPENSSL_STACK * D.3655;

  <bb 2> :
  D.3655 = malloc (24);
  return D.3655;

}



;; Function OPENSSL_sk_push (OPENSSL_sk_push, funcdef_no=23, decl_uid=3559, cgraph_uid=24, symbol_order=23)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
int OPENSSL_sk_push (struct OPENSSL_STACK * st, const void * data)
{
  int D.3659;

  <bb 2> :
  if (st == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.3659 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  _1 = st->num;
  D.3659 = OPENSSL_sk_insert (st, data, _1);

  <bb 5> :
  return D.3659;

}



;; Function OPENSSL_sk_insert (OPENSSL_sk_insert, funcdef_no=24, decl_uid=3561, cgraph_uid=25, symbol_order=24)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12
;; 2 succs { 4 3 }
;; 3 succs { 4 5 }
;; 4 succs { 12 }
;; 5 succs { 6 7 }
;; 6 succs { 12 }
;; 7 succs { 9 8 }
;; 8 succs { 9 10 }
;; 9 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 12 }
;; 12 succs { 1 }
int OPENSSL_sk_insert (struct OPENSSL_STACK * st, const void * data, int loc)
{
  int D.3664;

  <bb 2> :
  if (st == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _1 = st->num;
  if (_1 == 255)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  D.3664 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 12>; [INV]

  <bb 5> :
  _2 = sk_reserve (st, 1, 0);
  if (_2 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  D.3664 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 12>; [INV]

  <bb 7> :
  _3 = st->num;
  if (loc >= _3)
    goto <bb 9>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  if (loc < 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _4 = st->data;
  _5 = st->num;
  _6 = (long unsigned int) _5;
  _7 = _6 * 8;
  _8 = _4 + _7;
  *_8 = data;
  goto <bb 11>; [INV]

  <bb 10> :
  _9 = st->num;
  _10 = _9 - loc;
  _11 = (long unsigned int) _10;
  _12 = _11 * 8;
  _13 = st->data;
  _14 = (long unsigned int) loc;
  _15 = _14 * 8;
  _16 = _13 + _15;
  _17 = st->data;
  _18 = (sizetype) loc;
  _19 = _18 + 1;
  _20 = _19 * 8;
  _21 = _17 + _20;
  memmove (_21, _16, _12);
  _22 = st->data;
  _23 = (long unsigned int) loc;
  _24 = _23 * 8;
  _25 = _22 + _24;
  *_25 = data;

  <bb 11> :
  _26 = st->num;
  _27 = _26 + 1;
  st->num = _27;
  st->sorted = 0;
  D.3664 = st->num;

  <bb 12> :
  return D.3664;

}



;; Function OPENSSL_sk_pop_free (OPENSSL_sk_pop_free, funcdef_no=25, decl_uid=3573, cgraph_uid=26, symbol_order=25)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10
;;
;; Loop 1
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7 5 6
;; 2 succs { 3 4 }
;; 3 succs { 10 }
;; 4 succs { 8 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 5 9 }
;; 9 succs { 10 }
;; 10 succs { 1 }
void OPENSSL_sk_pop_free (struct OPENSSL_STACK * st, void (*OPENSSL_sk_freefunc) (void *) func)
{
  int i;

  <bb 2> :
  if (st == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 10>; [INV]

  <bb 4> :
  i = 0;
  goto <bb 8>; [INV]

  <bb 5> :
  _1 = st->data;
  _2 = (long unsigned int) i;
  _3 = _2 * 8;
  _4 = _1 + _3;
  _5 = *_4;
  if (_5 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _6 = st->data;
  _7 = (long unsigned int) i;
  _8 = _7 * 8;
  _9 = _6 + _8;
  _10 = *_9;
  func (_10);

  <bb 7> :
  i = i + 1;

  <bb 8> :
  _11 = st->num;
  if (i < _11)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  OPENSSL_sk_free (st);

  <bb 10> :
  return;

}



;; Function OPENSSL_sk_free (OPENSSL_sk_free, funcdef_no=26, decl_uid=3576, cgraph_uid=27, symbol_order=26)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
void OPENSSL_sk_free (struct OPENSSL_STACK * st)
{
  <bb 2> :
  if (st == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  _1 = st->data;
  free (_1);
  free (st);

  <bb 5> :
  return;

}



;; Function X509V3_conf_free (X509V3_conf_free, funcdef_no=32, decl_uid=3608, cgraph_uid=33, symbol_order=32)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
void X509V3_conf_free (struct CONF_VALUE * conf)
{
  <bb 2> :
  if (conf == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  _1 = conf->name;
  free (_1);
  _2 = conf->value;
  free (_2);
  _3 = conf->section;
  free (_3);
  free (conf);

  <bb 5> :
  return;

}



;; Function X509V3_add_value (X509V3_add_value, funcdef_no=33, decl_uid=3613, cgraph_uid=34, symbol_order=33)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
;; 2 succs { 3 5 }
;; 3 succs { 4 5 }
;; 4 succs { 16 }
;; 5 succs { 6 8 }
;; 6 succs { 7 8 }
;; 7 succs { 16 }
;; 8 succs { 9 10 }
;; 9 succs { 16 }
;; 10 succs { 11 13 }
;; 11 succs { 12 13 }
;; 12 succs { 16 }
;; 13 succs { 14 15 }
;; 14 succs { 16 }
;; 15 succs { 19 }
;; 16 succs { 17 18 }
;; 17 succs { 18 }
;; 18 succs { 19 }
;; 19 succs { 1 }
int X509V3_add_value (const char * name, const char * value, struct stack_st_CONF_VALUE * * extlist)
{
  int sk_allocated;
  char * tvalue;
  char * tname;
  struct CONF_VALUE * vtmp;
  int D.3699;

  <bb 2> :
  vtmp = 0B;
  tname = 0B;
  tvalue = 0B;
  _1 = *extlist;
  _2 = _1 == 0B;
  sk_allocated = (int) _2;
  if (name != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _3 = OPENSSL_strdup (name);
  _4 = (long int) _3;
  tname = (char *) _4;
  if (tname == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  // predicted unlikely by goto predictor.
  goto <bb 16>; [INV]

  <bb 5> :
  if (value != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _5 = OPENSSL_strdup (value);
  _6 = (long int) _5;
  tvalue = (char *) _6;
  if (tvalue == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  // predicted unlikely by goto predictor.
  goto <bb 16>; [INV]

  <bb 8> :
  vtmp = malloc (24);
  if (vtmp == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  // predicted unlikely by goto predictor.
  goto <bb 16>; [INV]

  <bb 10> :
  if (sk_allocated != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _7 = sk_CONF_VALUE_new_null ();
  *extlist = _7;
  _8 = *extlist;
  if (_8 == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  // predicted unlikely by goto predictor.
  goto <bb 16>; [INV]

  <bb 13> :
  vtmp->section = 0B;
  vtmp->name = tname;
  vtmp->value = tvalue;
  _9 = *extlist;
  _10 = sk_CONF_VALUE_push (_9, vtmp);
  if (_10 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  // predicted unlikely by goto predictor.
  goto <bb 16>; [INV]

  <bb 15> :
  D.3699 = 1;
  goto <bb 19>; [INV]

  <bb 16> :
err:
  if (sk_allocated != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  _11 = *extlist;
  sk_CONF_VALUE_free (_11);

  <bb 18> :
  free (vtmp);
  free (tname);
  free (tvalue);
  D.3699 = 0;

  <bb 19> :
  return D.3699;

}



;; Function sk_CONF_VALUE_new_null (sk_CONF_VALUE_new_null, funcdef_no=27, decl_uid=3589, cgraph_uid=28, symbol_order=27)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
struct stack_st_CONF_VALUE * sk_CONF_VALUE_new_null ()
{
  struct stack_st_CONF_VALUE * D.3703;

  <bb 2> :
  D.3703 = OPENSSL_sk_new_null ();
  return D.3703;

}



;; Function sk_CONF_VALUE_push (sk_CONF_VALUE_push, funcdef_no=29, decl_uid=3596, cgraph_uid=30, symbol_order=29)

Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
int sk_CONF_VALUE_push (struct stack_st_CONF_VALUE * sk, struct CONF_VALUE * ptr)
{
  int D.3705;

  <bb 2> :
  D.3705 = OPENSSL_sk_push (sk, ptr);
  return D.3705;

}



;; Function sk_CONF_VALUE_free (sk_CONF_VALUE_free, funcdef_no=28, decl_uid=3592, cgraph_uid=29, symbol_order=28)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void sk_CONF_VALUE_free (struct stack_st_CONF_VALUE * sk)
{
  <bb 2> :
  OPENSSL_sk_free (sk);
  return;

}



;; Function X509V3_parse_list (X509V3_parse_list, funcdef_no=34, decl_uid=3624, cgraph_uid=35, symbol_order=34)

Removing basic block 14
Merging blocks 31 and 32
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
;;
;; Loop 1
;;  header 19, latch 18
;;  depth 1, outer 0
;;  nodes: 19 18 5 10 14 17 9 13 11 7 6 15 20
;; 2 succs { 3 4 }
;; 3 succs { 29 }
;; 4 succs { 19 }
;; 5 succs { 18 6 14 }
;; 6 succs { 7 10 }
;; 7 succs { 8 9 }
;; 8 succs { 29 }
;; 9 succs { 18 }
;; 10 succs { 11 18 }
;; 11 succs { 12 13 }
;; 12 succs { 29 }
;; 13 succs { 18 }
;; 14 succs { 15 18 }
;; 15 succs { 16 17 }
;; 16 succs { 29 }
;; 17 succs { 18 }
;; 18 succs { 19 }
;; 19 succs { 20 21 }
;; 20 succs { 5 21 }
;; 21 succs { 22 25 }
;; 22 succs { 23 24 }
;; 23 succs { 29 }
;; 24 succs { 28 }
;; 25 succs { 26 27 }
;; 26 succs { 29 }
;; 27 succs { 28 }
;; 28 succs { 30 }
;; 29 succs { 30 }
;; 30 succs { 1 }
struct stack_st_CONF_VALUE * X509V3_parse_list (const char * line)
{
  int state;
  char * linebuf;
  struct stack_st_CONF_VALUE * values;
  char * vtmp;
  char * ntmp;
  char c;
  char * q;
  char * p;
  struct stack_st_CONF_VALUE * D.3731;

  <bb 2> :
  values = 0B;
  _1 = OPENSSL_strdup (line);
  _2 = (long int) _1;
  linebuf = (char *) _2;
  if (linebuf == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  // predicted unlikely by goto predictor.
  goto <bb 29>; [INV]

  <bb 4> :
  state = 1;
  ntmp = 0B;
  p = linebuf;
  q = linebuf;
  goto <bb 19>; [INV]

  <bb 5> :
  switch (state) <default: <L17> [INV], case 1: <L3> [INV], case 2: <L13> [INV]>

  <bb 6> :
<L3>:
  if (c == 58)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  state = 2;
  *p = 0;
  _3 = strip_spaces (q);
  _4 = (long int) _3;
  ntmp = (char *) _4;
  if (ntmp == 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  // predicted unlikely by goto predictor.
  goto <bb 29>; [INV]

  <bb 9> :
  q = p + 1;
  goto <bb 18>; [INV]

  <bb 10> :
  if (c == 44)
    goto <bb 11>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 11> :
  *p = 0;
  _5 = strip_spaces (q);
  _6 = (long int) _5;
  ntmp = (char *) _6;
  q = p + 1;
  if (ntmp == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  // predicted unlikely by goto predictor.
  goto <bb 29>; [INV]

  <bb 13> :
  X509V3_add_value (ntmp, 0B, &values);
  goto <bb 18>; [INV]

  <bb 14> :
<L13>:
  if (c == 44)
    goto <bb 15>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 15> :
  state = 1;
  *p = 0;
  _7 = strip_spaces (q);
  _8 = (long int) _7;
  vtmp = (char *) _8;
  if (vtmp == 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  // predicted unlikely by goto predictor.
  goto <bb 29>; [INV]

  <bb 17> :
  X509V3_add_value (ntmp, vtmp, &values);
  ntmp = 0B;
  q = p + 1;

  <bb 18> :
<L17>:
  p = p + 1;

  <bb 19> :
  c = *p;
  if (c != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  _9 = c != 13;
  _10 = c != 10;
  _11 = _9 & _10;
  if (_11 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  if (state == 2)
    goto <bb 22>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 22> :
  _12 = strip_spaces (q);
  _13 = (long int) _12;
  vtmp = (char *) _13;
  if (vtmp == 0B)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  // predicted unlikely by goto predictor.
  goto <bb 29>; [INV]

  <bb 24> :
  X509V3_add_value (ntmp, vtmp, &values);
  goto <bb 28>; [INV]

  <bb 25> :
  _14 = strip_spaces (q);
  _15 = (long int) _14;
  ntmp = (char *) _15;
  if (ntmp == 0B)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  // predicted unlikely by goto predictor.
  goto <bb 29>; [INV]

  <bb 27> :
  X509V3_add_value (ntmp, 0B, &values);

  <bb 28> :
  free (linebuf);
  D.3731 = values;
  goto <bb 30>; [INV]

  <bb 29> :
err:
  free (linebuf);
  values.0_16 = values;
  sk_CONF_VALUE_pop_free (values.0_16, X509V3_conf_free);
  D.3731 = 0B;

  <bb 30> :
  values = {CLOBBER};
  return D.3731;

}



;; Function sk_CONF_VALUE_pop_free (sk_CONF_VALUE_pop_free, funcdef_no=30, decl_uid=3600, cgraph_uid=31, symbol_order=30)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void sk_CONF_VALUE_pop_free (struct stack_st_CONF_VALUE * sk, void (*sk_CONF_VALUE_freefunc) (struct CONF_VALUE *) freefunc)
{
  <bb 2> :
  OPENSSL_sk_pop_free (sk, freefunc);
  return;

}



;; Function main (main, funcdef_no=35, decl_uid=3651, cgraph_uid=36, symbol_order=35)

Removing basic block 5
Merging blocks 4 and 6
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
int main (int argc, char * * argv)
{
  struct stack_st_CONF_VALUE * values;
  int D.3736;

  <bb 2> :
  values = 0B;
  _1 = *argv;
  values = X509V3_parse_list (_1);
  if (values != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  sk_CONF_VALUE_pop_free (values, X509V3_conf_free);

  <bb 4> :
  D.3736 = 0;
  return D.3736;

}


